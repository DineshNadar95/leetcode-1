先用二维矩阵记录每个工人到每辆车的距离，dp[i][j] = distance就表示工人 i 和车 j 的距离为distance。

然后问题就转化为：
在二维矩阵里每一行取一个数digit，
当前行取完 digit 之后别的行不能在 digit 在的这一列再取，
求所有行都取一个数后, 所有这些取出来数的最小和。
暴力解就是回溯， 所有取法都试一次，时间复杂度是O(N!)，

所以python需要优化剪枝，用dp记录之前已经计算过的局部解，

class Solution(object):
    def assignBikes(self, workers, bikes):
      
        m = len(workers)
        n = len(bikes)
        self.dis = [self.manhattan(workers[i], bikes[j]) for i in range(m) for j in range(n)]
        self.memo = {}
        return self.dfs(workers, bikes, [], 0)
    
    
    def dfs(self, workers, bikes, used_bikes, w):
        if w == len(workers):
            return 0
        
        state = (w, tuple(sorted(used_bikes)))
        if state in self.memo:
            return self.memo[state]
        
        tmp = sys.maxsize
        for i in range(len(bikes)):
            if i not in used_bikes:
                tmp = min(tmp, self.manhattan(workers[w], bikes[i]) + self.dfs(workers, bikes, used_bikes + [i], w + 1))
        self.memo[state] = tmp
        return tmp
        
    def manhattan(self, x, y):
        return abs(x[0] - y[0]) + abs(x[1] - y[1])
