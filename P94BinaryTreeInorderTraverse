# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        results = []
        self.traverse(root, results)
        return results
    
    def traverse(self, root, results):
        if not root:
            return 
        self.traverse(root.left, results)
        results.append(root.val)
        self.traverse(root.right, results)
        
# non-recursion
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def inorderTraversal(self, root):
        
        if not root:
            return None
        
        res = []
        stack = []
        cur = root
        
        while stack or cur:
            if cur:
                stack.append(cur)
                cur = cur.left
            else:
                node = stack.pop()
                res.append(node.val)
                cur = node.right
        return res
                
                
                
