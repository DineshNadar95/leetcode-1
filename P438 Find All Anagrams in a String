# sol1 brute-force
# time O((len(s)-len(p))*len(p)) = O(n^2)


# sol2 sliding window + counter
# time O(len(s)), space O(len(p))

class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        m = len(s)
        n = len(p)
        if m < n:
            return []
        
        res = []
        i_start = 0
        cp = collections.Counter(p)
        cs = collections.Counter(s[:n - 1])
    
        for j in range(n - 1, m):
            cur_char = s[j]
            cs[cur_char] += 1
            if cs == cp:
                res.append(i_start)
            cs[s[i_start]] -= 1
            if cs[s[i_start]] == 0:
                del cs[s[i_start]]
            i_start += 1
            
        return res
