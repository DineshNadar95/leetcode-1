# sol1 brute-force
# time O((len(s)-len(p))*len(p)) = O(n^2)


# sol2 sliding window + counter
# time O(len(s)), space O(len(p))

class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        res = []
        pCounter = collections.Counter(p)
        sCounter = collections.Counter(s[:len(p) - 1])
        for i in range(len(p) - 1, len(s)):
            sCounter[s[i]] += 1
            if sCounter == pCounter:
                res.append(i - len(p) + 1)
            sCounter[s[i - len(p) + 1]] -= 1
            if sCounter[s[i - len(p) + 1]] == 0:
                del sCounter[s[i - len(p) + 1]]
        return res
            
      
