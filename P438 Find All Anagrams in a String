# sol1 brute-force
# time O((len(s)-len(p))*len(p)) = O(n^2)


# sol2 sliding window + counter
# time O(len(s)), space O(len(s))

class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        res = []
        pCounter = collections.Counter(p)
        sCounter = collections.Counter(s[:len(p) - 1])
        for i in range(len(p) - 1, len(s)):
            sCounter[s[i]] += 1
            if sCounter == pCounter:
                res.append(i - len(p) + 1)
            sCounter[s[i - len(p) + 1]] -= 1
            if sCounter[s[i - len(p) + 1]] == 0:
                del sCounter[s[i - len(p) + 1]]
        return res
            
        


# sol3 sliding window + hashmap
# time O(s * 26) = O(n)
# space O(len(p))
# hash table: char:count
利用滑动窗口，在第一次用vector a记录p的字符的个数时，也同时用vector b记录s中前p.length()个字符的个数，
判断a==b，若成立，将0放进要返回的vector。然后开始从i=1，i小于s.length()滑动窗口，每次滑动一个字符，
将s中i-1处对应的字符在b中的个数减1，而s中i-1+p.length()处对应的字符在b中的个数加1，
这样不需要思路一种每次遍历p.length()个字符，只需要改动两个位置即可。然后判断a==b，若成立，将i放进要返回的vector。继续循环即可

class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        hash_p = {}
        for c in p:
            hash_p[c] = hash_p.get(c, 0) + 1
        count = len(p)
        
        # initialize
        res = []
        
        # current candidate is s[left, right + 1]
        left = 0
        right = 0
        
        while right < len(s):
            # for every iteration, check if current character is a desired char. if so, cross it off. 
            # otherwise, move on to the next character
            if s[right] in hash_p:
                hash_p[s[right]] -= 1
                if hash_p[s[right]] >= 0:
                    count -= 1
                    
             # if all items are crossed-off, add to result list
            if count == 0:
                res.append(left)
                
            # Move window only if the minimum size is met.
            if right - left + 1 == len(p):
                if s[left] in hash_p:
                    if hash_p[s[left]] >= 0:
                        count += 1
                    hash_p[s[left]] += 1
                left += 1
            right += 1
        
        return res
                
