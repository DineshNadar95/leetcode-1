sol1: DP
time O(n^3)
space O(n^2)

# dp[i][j], 子数组 arr[i:j+1] （即数组中第 i 个元素到第 j 个元素，编号从 0 开始）构成树的最小代价
# transmation formula
  dp(i,j)=min(dp(i,k)+dp[(k+1,j)+max(i,k) * max(k+1,j)),i ≤ k< j
  
# result: dp[0][n - 1]
class Solution(object):
    def mctFromLeafValues(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        n = len(arr)
        # 初始值设为最大
        dp = [[float('inf') for _ in range(n)] for _ in range(n)]
        # 初始区间查询最大值设为0
        maxval = [[0 for _ in range(n)] for _ in range(n)]
        # 求区间[i, j]中最大元素
        for i in range(n):
            for j in range(i, n):
                maxval[i][j] = max(arr[i:j + 1])
        # 叶子结点不参与计算
        for i in range(n):
            dp[i][i] = 0
        # 枚举区间长度
        for l in range(1, n):
            # 枚举区间起始点
            for s in range(n - l):
                # 枚举划分两棵子树
                for k in range(s, s + l):
                    dp[s][s + l] = min(dp[s][s + l], dp[s][k] + dp[k + 1][s + l] + maxval[s][k] * maxval[k + 1][s + l])
        return dp[0][n - 1]


# stack
这道题可以看做如下过程：在数组 arr 中，每次取相邻的两个数 a 和 b，然后去掉其中较小的一个，
花费代价为 a * b，求最终将数组消减为一个元素的最小代价。
那么，要想获得最小代价，我们应该采取的策略是：对于数组中的某一个数 a，
分别向左和向右查询比它大的第一个数，在这两个数中选择较小的那个数把它消去，花费的代价最小。这个过程我们可以用单调栈来一次遍历解决掉。

class Solution(object):
    def mctFromLeafValues(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        A = arr
        res, n = 0, len(A)
        stack = [float('inf')]
        for a in A:
            while stack[-1] <= a:
                mid = stack.pop()
                res += mid * min(stack[-1], a)
            stack.append(a)
        while len(stack) > 2:
            res += stack.pop() * stack[-1]
        return res



