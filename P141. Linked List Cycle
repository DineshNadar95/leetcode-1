# o(n) time, O(n) space

class Solution(object):
    def hasCycle(self, head):
        
        # dic key:node
        hashset = set()
        while head:
            if head in hashset:
                return True
            else:
                hashset.add(head)
                head = head.next
        return False
            
        
# O(n + k) time
# O(1) space 

# if there is a cycle, the fast p will always catch up with the slow pointer in the cycle
# 快慢指针一定会相遇
# time distance/speed diff = k/1 = k (k is the length of cycle)
class Solution(object):
    def hasCycle(self, head):
        
        if not head:
            return False
        
        fast = head
        slow = head
        
        while fast.next and fast.next.next:
            fast = fast.next.next
            slow = slow.next
            if fast == slow:
                return True
            
        return False
            
    
            
