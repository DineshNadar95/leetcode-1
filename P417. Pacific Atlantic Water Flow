# bfs
# start from the edges of the matrix, which are reachable nodes to Altlantic and Pacific
# then do bfs for each of the set return the set that reachable to Altlantic and Pacifc
# intersection of the two set

# time O(m + n) * (m * n) -> upperbound O(m * n)
# space O(mn)
class Solution(object):
    def pacificAtlantic(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        if not matrix:
            return []
        
        m = len(matrix)
        n = len(matrix[0])
        set_pacific = set([(0, i) for i in range(n)] + [(j, 0) for j in range(m)])
        set_atlantic = set([(m - 1, j) for j in range(n)] + [(i, n - 1) for i in range(m)])
        
        return self.bfs(matrix, set_pacific) & self.bfs(matrix, set_atlantic)
    
    def bfs(self, matrix, reachable_nodes):
        queue = collections.deque(reachable_nodes)
        #queue.append(reachable_nodes)
        
        while queue:
            (x, y) = queue.popleft()
            for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                new_x = x + dx
                new_y = y + dy
                if 0 <= new_x < len(matrix) and 0 <= new_y < len(matrix[0]) and matrix[new_x][new_y] >= matrix[x][y] and (new_x, new_y) not in reachable_nodes:
                    reachable_nodes.add((new_x, new_y))
                    queue.append((new_x,new_y))
        return reachable_nodes
                
        
