# bfs
# start from the edges of the matrix, which are reachable nodes to Altlantic and Pacific
# then do bfs for each of the set return the set that reachable to Altlantic and Pacifc
# intersection of the two set

# time O(m + n) * (m * n) -> upperbound O(m * n)
# space O(mn)
class Solution(object):
    def pacificAtlantic(self, matrix):
        
        if not matrix or not matrix[0]:
            return []
        
        p_set = set()
        a_set = set()
        m = len(matrix)
        n = len(matrix[0])
        
        for j in range(n):
            p_set.add((0, j))
            a_set.add((m - 1, j))
        
        for i in range(m):
            p_set.add((i, 0))
            a_set.add((i, n - 1))
            
        self.bfs(matrix, p_set)
        self.bfs(matrix, a_set)
        
        return p_set & a_set
    
    def bfs(self, matrix, r_set):
        q = collections.deque([])
        for x, y in r_set:
            q.append((x, y))
            
        while q:
            x, y = q.popleft()
            
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                new_x = x + dx
                new_y = y + dy
                if 0 <= new_x < len(matrix) and 0 <= new_y < len(matrix[0]) and matrix[new_x][new_y] >= matrix[x][y] and (new_x, new_y) not in r_set:
                    r_set.add((new_x, new_y))
                    q.append((new_x, new_y))
                    
        
            
