# idea: build graph, call dfs in each pair, we need to check if w1 can traverse to w2
# time: (m * (v + e)) m: len of pairs
# space O(v)

class Solution(object):
    def areSentencesSimilarTwo(self, words1, words2, pairs):
        """
        :type words1: List[str]
        :type words2: List[str]
        :type pairs: List[List[str]]
        :rtype: bool
        """
        if len(words1) != len(words2):
            return False
        
        # build graph
        self.graph = collections.defaultdict(set)
        for p1, p2 in pairs:
            self.graph[p1].add(p2)
            self.graph[p2].add(p1)
            
        
        for i in range(len(words1)):
            w1 = words1[i]
            w2 = words2[i]
            if w1 == w2:
                continue
            if not self.dfs(w1, w2, set([w1])):
                return False
        return True
    
    def dfs(self, w1, w2, visited):
        for nb in self.graph[w1]:
            if nb == w2:
                return True
            if nb not in visited:
                visited.add(nb)
                if self.dfs(nb, w2, visited):
                    return True
        return False
            
