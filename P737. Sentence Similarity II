# idea: build graph, call dfs in each pair, we need to check if w1 can traverse to w2
# time: (m * (v + e)) m: len of pairs
# space O(v)

class Solution(object):
    def areSentencesSimilarTwo(self, words1, words2, pairs):
        
        self.graph = collections.defaultdict(list)
        for w1, w2 in pairs:
            self.graph[w1].append(w2)
            self.graph[w2].append(w1)
        
        if len(words1) != len(words2):
            return False
        
        for i in range(len(words1)):
            if words1[i] == words2[i]:
                continue
            visited = set()
            if not self.dfs(words1[i], words2[i], visited):
                return False
        return True
    
    def dfs(self, node, target, visited):
        if node == target:
            return True
        
        for nb in self.graph[node]:
            if nb not in visited:
                visited.add(nb)
                if self.dfs(nb, target, visited):
                    return True
        return False
        
