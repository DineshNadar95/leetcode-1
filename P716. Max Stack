# two stacks
# time popMax O(n), others O(1)
# space O(n)

思路:
一个普通的栈可以支持前三种操作 push(x)，pop() 和 top()，所以我们需要考虑的仅为后两种操作 peekMax() 和 popMax()。
对于 peekMax()，我们可以另一个栈来存储每个位置到栈底的所有元素的最大值。在 push(x) 操作时，只需要将第二个栈的栈顶和 x 的最大值入栈

例如，如果当前第一个栈中的元素为 [2, 1, 5, 9, 3, 2]， -> [2, 1, 5, 3] ( popmax)  
那么第二个栈中的元素为         [2, 2, 5, 9, 9, 9]。 ->  [2, 2, 5, 5] 
tmp [2, 3]

class MaxStack(object):

    def __init__(self):
        self.s1 = []
        self.s2 = [] # max stack
        
    def push(self, x):
        self.s1.append(x)
        if not self.s2 or self.s2[-1] <= x:
            self.s2.append(x)
        else:
            self.s2.append(self.s2[-1])  

    def pop(self):
        val = self.s1.pop()
        self.s2.pop()
        return val

    def top(self):
        return self.s1[-1]
        
    def peekMax(self):
        return self.s2[-1]
        
    def popMax(self):
        
        val = self.s2.pop()

        tmp = []
        while self.s1 and self.s1[-1] != val:
            tmp.append(self.s1.pop())
            self.s2.pop()
            
        self.s1.pop()
        while tmp:
            self.push(tmp.pop())
        return val
            
