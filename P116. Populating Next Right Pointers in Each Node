# sol1 bfs
time O(n)
space O(n)
class Solution(object):
    def connect(self, root):
        
        if not root:
            return None
        queue = collections.deque([root])
        
        while queue:
            n = len(queue)
            pre_node = queue.popleft()
            if pre_node.left:
                    queue.append(pre_node.left)
            if pre_node.right:
                    queue.append(pre_node.right)
            
            for _ in range(n - 1):
                cur_node = queue.popleft()
                if cur_node.left:
                    queue.append(cur_node.left)
                if cur_node.right:
                    queue.append(cur_node.right)
                pre_node.next = cur_node
                pre_node = cur_node
            
        return root

 # sol2: bfs with no queue
 class Solution(object):
    def connect(self, root):
        """
        :type root: Node
        :rtype: Node
        """
        if not root or not root.left:
            return root 
        cur = root
        next_level = root.left
        
        while cur.left:
            cur.left.next = cur.right
            if cur.next:
                cur.right.next = cur.next.left
                cur = cur.next
            else:
                cur = next_level
                next_level = cur.left
        return root


树的问题一般都可以用递归解决。这个题中，同样可以使用dfs解决。

注意题目已经声明了是完全二叉树，从根节点开始找到任意节点，将其左孩子指向右孩子。
如果该节点已经指向了同层的其他节点，说明需要连接两个子树，比如例子中的2->3,那么不仅要把2的左孩子4指向右孩子5，
还要把2的右孩子5指向2的next节点的左孩子6。这样递归完成了，每层就是单链表了。

class Solution(object):
    def connect(self, root):
        """
        :type root: Node
        :rtype: Node
        """
        if not root or not root.left:
            return root
        root.left.next = root.right
        if root.next:
            root.right.next = root.next.left
        self.connect(root.left)
        self.connect(root.right)
        return root
