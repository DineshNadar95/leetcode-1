# time O(n^2)
# space O(n)

在计算斜率的时候需要用到技巧，因为如果两个点的横坐标重合了，那么斜率是无穷大；
如果斜率是浮点数，还会涉及到浮点数精度问题。所以使用了最大公约数这个技巧。
我们不要直接计算斜率，而是相当于最简分式的形式，
使用pair或者Python中的tuple，保存已经化为最简分数的两个数值，然后使用字典来统计这个pair出现了多少次。

最后的结果是共线并且不重合的点的最大个数+重叠的点的个数。

class Solution(object):
    def maxPoints(self, points):
        n = len(points)
        res = 0
        
        for i in range(n):
            dic = collections.defaultdict(int) # key: slope, value: count
            duplicates = 1 # 统计重复的点
            
            for j in range(i + 1, n):
                if points[i][0] == points[j][0] and points[i][1] == points[j][1]:
                    duplicates += 1
                    continue
                dx = points[i][0] - points[j][0]
                dy = points[i][1] - points[j][1]
                delta = self.gcd(dx, dy) # highest common divisor
                
                dic[(dx / delta, dy / delta)] += 1
            res = max(res, (max(dic.values()) if dic else 0) + duplicates)
        return res
                
    def gcd(self, x, y):
        return x if y == 0 else self.gcd(y, x % y)
