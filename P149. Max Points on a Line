# time O(n^2)
# space O(n)

首先简化这个问题：找出一条通过点 i 的直线，使它经过最多的点。
# maintain dic, key:slope, value counts 
# iterate each point, 
# for j in range(i + 1, n)
# take care of duplicate points


计算斜率: x1 == x2 斜率是无穷大；Decimal 解决浮点数精度问题；注意duplicate


from decimal import * 

class Solution(object):
    def maxPoints(self, points):
        
        if not points:
            return 0
        
        res = 0
        for i, p in enumerate(points):
            x1 = p[0]
            y1 = p[1]
            dic = collections.defaultdict(int) # key: slope, value: counts
            duplicates = 1
            for j in range(i + 1, len(points)):
                if points[j][0] == x1 and points[j][1] == y1:
                    duplicates += 1
                else:
                    if x1 == points[j][0]:
                        dic[sys.maxsize] += 1
                    else: # y2 - y1 / x2 - x1
                        slope = Decimal(points[j][1] - y1) / Decimal(points[j][0] - x1)
                        dic[slope] += 1
            local_res = 0
            if not dic:
                local_res = 0 + duplicates
            else:
                local_res = max(dic.values()) + duplicates
        
            res = max(res, local_res)
        return res
        
                        
                
                
                
                
