很显然这个问题是BFS的问题，只是把走迷宫问题的4个方向转变成了26个方向，直接BFS会超时，
所以我使用了个visited来保存已经遍历了的字符串，代表已经走过了的位置。
代码总体思路很简单，就是利用队列保存每个遍历的有效的字符串，然后对队列中的每个字符串再次遍历，保存每次遍历的长度即可。

时间复杂度是O(NL)，空间复杂度是O(N).其中N是wordList中的单词个数，L是其实字符串的长度。

class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        wordset = set(wordList)
        bfs = collections.deque()
        bfs.append((beginWord, 1))
        while bfs:
            word, length = bfs.popleft()
            if word == endWord:
                return length
            for i in range(len(word)):
                for c in 'abcdefghijklmnopqrstuvwxyz':
                    new_word = word[:i] + c + word[i + 1:]
                    if new_word in wordset and new_word != word:
                        wordset.remove(new_word)
                        bfs.append((new_word, length + 1))
        return 0
