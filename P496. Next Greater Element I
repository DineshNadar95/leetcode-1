# brute - foce (hashtable)
# time O(mn)
# space O(m + n) m: lenght of lookup nums

class Solution(object):
    def nextGreaterElement(self, nums1, nums2):
       
        dic = {}
        for i, num in enumerate(nums2):
            dic[num] = i
            
        res = []
        for i, num in enumerate(nums1):
            j = dic[num]
            if j == len(nums2) - 1:
                res.append(-1)
            else:
                for index in range(j + 1, len(nums2)):
                    if num < nums2[index]:
                        res.append(nums2[index])
                        break
                if index == len(nums2) - 1 and num >= nums2[index]:
                    res.append(-1)
        return res


2. stack + hashmap
time O(m + n)
space O(m + n)

# max stack
class Solution(object):
    def nextGreaterElement(self, nums1, nums2):
        
        # key : num, value: next greater num
        dic = {}
        # space O(n), time O(n)
        stack = []
        for num in nums2:
            while stack and stack[-1] < num:
                dic[stack.pop()] = num
            stack.append(num)
            
        # time O(m), space O(m)
        return [dic.get(num, -1) for num in nums1]
