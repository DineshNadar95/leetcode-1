# brute - foce 
# time O(mn)
# space O(m) res


2. stack + hashmap
time O(n)
space O(n)

# max stack
class Solution(object):
    def nextGreaterElement(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        stack = []
        # key:num , value: next greater num
        dic = {}
        
        for num in nums2:
            while stack and stack[-1] < num:
                dic[stack.pop()] = num
            stack.append(num)
        return [dic.get(x, -1) for x in nums1]
        
