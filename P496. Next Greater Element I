# brute - foce 
# time O(mn)
# space O(m) res


2. stack + hashmap
time O(m + n)
space O(m + n)

# max stack
class Solution(object):
    def nextGreaterElement(self, nums1, nums2):
        
        # key : num, value: next greater num
        dic = {}
        # space O(n), time O(n)
        stack = []
        for num in nums2:
            while stack and stack[-1] < num:
                dic[stack.pop()] = num
            stack.append(num)
            
        # time O(m), space O(m)
        return [dic.get(num, -1) for num in nums1]
