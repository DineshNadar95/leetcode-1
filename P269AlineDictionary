# BFS topo sort
# Time Complexity: build graph, two for loops O(len(words) * len(word))
Topological sort takes O(V + E). V <= n. E also can't be larger than n. So the overall time complexity is O(n).
# space O(V)



class Solution(object):
    def alienOrder(self, words):
        
        graph = collections.defaultdict(set)
        indegrees = collections.defaultdict(int)
        
        # node 1: add node:
        for word in words:
            for char in word:
                if char not in graph:
                    graph[char] = set()
                    indegrees[char] = 0
                    
        
        for i in range(len(words) - 1):
            w1 = words[i]
            w2 = words[i + 1]
            length = min(len(w1), len(w2))
            for j in range(length):
                if w1[j] != w2[j]: # w1[j] -> w2[j]
                    if w2[j] not in graph[w1[j]]:
                        graph[w1[j]].add(w2[j])
                        indegrees[w2[j]] += 1
                    break
            if w1[:length] == w2[:length] and len(w1) > len(w2): # 2. corner case
                return ''
                    
        q = collections.deque([])
        for node, indeg in indegrees.items():
            if indeg == 0:
                q.append(node)
        
        res = ''
        while q:
            cur_n = q.popleft()
            res += cur_n
            for nb in graph[cur_n]:
                indegrees[nb] -= 1
                if indegrees[nb] == 0:
                    q.append(nb)
        
        if len(res) == len(graph):
            return res
        return ''
            
        
        
                    
        
    
                    
                
            
                           
                                
                           
