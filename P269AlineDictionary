class Solution:
    """
    @param words: a list of words
    @return: a string which is correct order
    """
    def alienOrder(self, words):
        # Write your code here
        indegree = [0] * 26
        graph = self.build_graph(words)
        return self.topological_sort(graph)
        
        
    def build_graph(self, words):
        # key is node, value is neighbors
        graph = {}
        
        # initialize graph
        for word in words:
            for char in word:
                if char not in graph:
                    graph[char] = set()
                    
        # add egdes
        for i in range(len(words) - 1):
            first_word = words[i]
            second_word = words[i + 1]
            length = min(len(first_word), len(second_word))
            for j in range(length):
                if first_word[j] != second_word[j]:
                    graph[first_word[j]].add(second_word[j])
                    # break the inner loop
                    break 
        return graph
        
    def topological_sort(self, graph):
            
            # initialize indegree
        indegree = {node : 0 for node in graph}
            
            # calculate indegree
        for node in graph:
            for neighbor in graph[node]:
                indegree[neighbor] += 1
            
            # use heapq instead of regular  queue so that we can get the 
            # smallest order
        queue = [node for node in graph if indegree[node] == 0]
        heapq.heapify(queue)
            
            # regular bfs algo to do topo sorting
        order = ""
        while queue:
            node = heapq.heappop(queue)
            order += node
            for neighbor in graph[node]:
                indegree[neighbor] -= 1
                if indegree[neighbor] == 0:
                    heapq.heappush(queue, neighbor)
                        
        if len(order) == len(graph):
            return order
        return  ""
                
