# brute force is get best score among all kinds of division
# time O(combination of 0 to n, 1 to k, .... n to k)

# dfs + memo key, (n, k), value: max sum ave
# dfs # return the result for n first numbers to at most k groups.

# time O(kn ^ 2)
# space O(kn), dfs max depth is O(n)

class Solution(object):
    def largestSumOfAverages(self, A, K):
        
        self.memo = {} # key, (n, k), value: max sum ave
        return self.dfs(A, len(A), K)
    
    def dfs(self, A, n, k):
        
        if (n, k) in self.memo: 
            return self.memo[(n, k)]
        if n < k: 
            return 0
        if k == 1:
            self.memo[(n, k)] = sum(A[:n]) / float(n)
            return self.memo[(n, k)]
        
        cur_sum = 0
        res = 0
        
        # recursion part, 0 to i to k - 1 groups, and i + 1 to n is 1 group
        for i in range(n - 1, 0, -1):
            cur_sum += A[i]
            res = max(res, self.dfs(A, i, k - 1) + cur_sum / float(n - i))
            
        self.memo[(n, k)] = res
        return res
        
