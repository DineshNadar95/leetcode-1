# dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j]) # i < k < j
# 扎破 i+1 ～ j-1中气球获得最大的金币数量

We also need to start at one end, say from right side. 
We keep on increasing interval by considering one more element from left side at each iteration. 
This way, the max value in intervals are calculated before using it.

# time O(n^3), space O(n^2)

class Solution(object):
    def maxCoins(self, nums)：
        
        if not nums:
            return 0
        
        nums = [1] + nums + [1]
        n = len(nums)
        dp = [[0] * n for i in range(n)]
        
        for i in range(n-1, -1, -1):
            for j in range(i + 2, n):
                for k in range(i + 1, j):
                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])
        return dp[0][n-1]
