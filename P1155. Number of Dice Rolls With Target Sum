# dp 2 * 2, 行 

# dp[i][j], (d * (target + 1)) 前i次掷骰子的和为j的次数

# dp[0][0] = 1
# 转移方程 dp[i][j]=sum(dp[i−1][k] for k < j and k <= f)

k = j; k <= target

# time O(d * f * target)
# space O(d * target)

class Solution(object):
    def numRollsToTarget(self, d, f, target):
        """
        :type d: int
        :type f: int
        :type target: int
        :rtype: int
        """
        mod = 10 ** 9 + 7
        dp = [[0 for _ in range(target + 1)] for _ in range(d)]

        dp[0][0] = 0
        for j in range(1, f + 1): # 1, ... f
            if j <= target:
                dp[0][j] = 1
                    
        for i in range(1, d):
            for j in range(1, target + 1):
                k = 1
                while k < j and k <= f: # k 第i次掷的筛子数 <j 且 <= f
                    dp[i][j] += dp[i - 1][j - k]
                    k += 1
                    
        return dp[-1][-1] % mod


