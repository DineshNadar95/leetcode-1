# time complexity 
set O(1), get O(lg(snap_id))
# space complexity O(length)

class SnapshotArray(object):

    def __init__(self, length):
        """
        :type length: int
        """
        # self.cache list of list cache[index]: [(0, 0), [1, val1], ...]
        self.cache = [[(0, 0)] for _ in range(length)]
        self.snap_id = 0

    def set(self, index, val):
        """
        :type index: int
        :type val: int
        :rtype: None
        """
        self.cache[index] += [(self.snap_id, val)]
        

    def snap(self):
        """
        :rtype: int
        """
        s = self.snap_id
        self.snap_id += 1
        return s

    def get(self, index, snap_id):
        """
        :type index: int
        :type snap_id: int
        :rtype: int
        """
        # time complexity O(lg(snap_id))
        pos = bisect.bisect(self.cache[index], (snap_id, sys.maxsize)) - 1
        return self.cache[index][pos][1]
        


# Your SnapshotArray object will be instantiated and called as such:
# obj = SnapshotArray(length)
# obj.set(index,val)
# param_2 = obj.snap()
# param_3 = obj.get(index,snap_id)
