# dp
# dp[i][j] 到达i-1, j-1时最小sum
# 转移方程:f[i][j]=min{f[i-1][j],f[i][j-1]}+A[i][j]
  • 初始条件和边界情况:
  – f[0][0] = A[0][0]
  – i = 0 或 j = 0，则前一步只能有一个方向过来
  # time O(mn)
  # space O(mn)
  
 class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        if not grid  or len(grid) == 0 or len(grid[0]) == 0:
            return 0
        m = len(grid)
        n = len(grid[0])
        
        dp = [[0 for j in range(n)] for i in range(m)]
        dp[0][0] = grid[0][0]
        for j in range(1, n):
            dp[0][j] = dp[0][j - 1] + grid[0][j]
        for i in range(1, m):
            dp[i][0] = dp[i - 1][0] + grid[i][0]
        for x in range(1, m):
            for y in range(1, n):
                dp[x][y] = min(dp[x - 1][y], dp[x][y - 1]) + grid[x][y]
        return dp[m - 1][n - 1]
        
        
