# meeting room swipe line 
# time O(nlgn)
# space o(n)
class Solution(object):
    def carPooling(self, trips, capacity):
        
        points = []
        for num, s, e in trips:
            points.append((s, num))
            points.append((e, -num))
            
        points.sort()
        total = 0
        for t, delta in points:
            total += delta
            if total > capacity:
                return False
        return True
        
# time O(n)
# space O(1000)
# locations : number of people in the car when passing this location
class Solution(object):
    def carPooling(self, trips, capacity):
        """
        :type trips: List[List[int]]
        :type capacity: int
        :rtype: bool
        """
        locations = [0] * 1001
        for num, start, end in trips:
            locations[start] += num
            locations[end] -= num
           
        sum_ = 0
        for loc in locations:
            sum_ += loc
            if sum_ > capacity:
                return False
        return True
            
