# stack: the onging tasks ; also keep track of pre time 
# when there is an end, we pop out previous task from stack

# node: 
当一个函数start了之后，并不需要必须有end，可以直接被另一个程序start的时候强行关闭。

# time O(n) num of logs
# space O(n) 

class Solution(object):
    def exclusiveTime(self, n, logs):
        
        stack = []
        res = [0 for _ in range(n)]
        pre_t = 0
        
        for log in logs:
            fun, state, t = log.split(':')
            fun = int(fun)
            t = int(t)
            if state == 'start':
                if stack:
                    res[stack[-1]] += t - pre_t
                stack.append(fun)
                pre_t = t
            else:
                cur_fun = stack.pop()
                res[cur_fun] += t - pre_t + 1
                pre_t = t + 1     
        return res
                    
            
follow up如果invalid log怎么办，input还有哪些可能的format（我写的是list of string），以及multi thread会有什么问题

input我说可以是给file或者是iterator，

multi thread的话会有可能比如两个functions，
foo和bar， foo calls bar，但是foo returns before bar returns
就是说本来是foo这个function calls bar这个function嘛，所以肯定是bar return了之后stack frame回到foo，
foo才会return的，但是multithread的话在thread pool里就有可能foo已经return了，bar才return的
