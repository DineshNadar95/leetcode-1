当一个函数start了之后，并不需要必须有end，可以直接被另一个程序start的时候强行关闭。
而且，在某个时间点上调用end时，也不需要前面非得调用start，可以直接在某个时间点来个end，这样也算执行了1秒，

# stack: the onging tasks ; also keep track of pre time 
# when there is an end, we pop out previous task from stack
# node: 

#time O(num of logs)
# space O(n//2) 

class Solution(object):
    def exclusiveTime(self, n, logs):
        """
        :type n: int
        :type logs: List[str]
        :rtype: List[int]
        """
        res = [0] * n
        stack = []
        prev_time = 0
        for log in logs:
            func, wtype, time = log.split(':')
            cur_time = int(time)
            func = int(func)
            if wtype == 'start':
                if stack:
                    res[stack[-1]] += cur_time - prev_time
                stack.append(func)
                prev_time = cur_time
            else:
                res[stack[-1]] += cur_time - prev_time + 1
                prev_time = cur_time + 1
                stack.pop()
        return res
            
follow up如果invalid log怎么办，input还有哪些可能的format（我写的是list of string），以及multi thread会有什么问题

input我说可以是给file或者是iterator，

multi thread的话会有可能比如两个functions，
foo和bar， foo calls bar，但是foo returns before bar returns
就是说本来是foo这个function calls bar这个function嘛，所以肯定是bar return了之后stack frame回到foo，
foo才会return的，但是multithread的话在thread pool里就有可能foo已经return了，bar才return的
