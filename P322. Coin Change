需要构建一个长度是amount + 1的dp数组，其含义是能够成面额从0到amount + 1需要使用的最少硬币数量
for each coin, for i in range(amount + 1)
dp[i] = min(dp[i], dp[i - coin] + 1)

# ans = DP[amount]
# time O(n*amount)
# space O(amount)

class Solution(object):
    def coinChange(self, coins, amount):
        """
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """
        
        dp = [sys.maxsize] * (amount + 1)
        dp[0] = 0
        for coin in coins:
            for i in range(coin, amount + 1):
                if dp[i - coin] != sys.maxsize:
                    dp[i] = min(dp[i], dp[i - coin] + 1)
        if dp[amount] == sys.maxsize:
            return -1 
        else:
            return dp[amount]
        
        
        
