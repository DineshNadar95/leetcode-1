# dp (m + 1) * (n + 1), dp[i][j], the min edit distance bewteen first i chars in w1 and first j chars in w2
# initialize i == 0 and j == 0
transmation formula: 增加减少替换； 尾巴相等

# time O(m * n)
# space O(m * n)

# 1. word1[i-1] == word2[j-1]
    dpij = dpi-1,j-1
    else:
    增加 dpij = dp[i,j-1] + 1
    替换 dpij = dp[i - 1,j-1] + 1
    减少 dpij = dp[i-1, j] + 1

class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        m = len(word1)
        n = len(word2)
    
        dp = [[0 for j in range(n + 1)] for i in range (m + 1)]
        
        for j in range(n + 1):
            dp[0][j] = j
        for i in range(m + 1):
            dp[i][0] = i
            
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if word1[i - 1] == word2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1]
                else:
                    dp[i][j] = min(dp[i][j - 1] + 1, dp[i - 1][j] + 1, dp[i - 1][j - 1] + 1)
        return dp[-1][-1]
                
            
