# burte force
# time O(n * k)
# space O(n)

class Solution(object):
    def maxSlidingWindow(self, nums, k):
        
        if not nums:
            return []
        
        res = []
        
        for i in range(k - 1, len(nums)):
            res.append(max(nums[i - k + 1:i + 1]))
        return res
 
 
# monotonic queue
# time linear
# space O(n)
# maintain the index of decreasing values of windown k 
单调递减双端队列

逻辑怎么写清楚？要把不同的事分开，相同的事合并。请看这循环里的4件事：
把队列里比当前数小的顶出去。
把当前数(下标)放入队列。
队列里有足够多数，就开始输出。
队列头的数太老，就顶出去。

# Keep only the indexes of elements from the current sliding window.
# Remove indexes of all elements smaller than the current one, since they will not be the maximum ones.

class Solution(object):
    def maxSlidingWindow(self, nums, k):
        
        queue = collections.deque([])
        res = []
        for j, num in enumerate(nums):
            while queue and nums[queue[-1]] < num:
                queue.pop()
            queue.append(j)
            
            if j >= k - 1:
                res.append(nums[queue[0]])
            
            # check if the current window size is k
            if j - queue[0] + 1 == k:
                queue.popleft()
        return res
                
