# dp
# dp[i][j] Longest Palindromic Subsequence for s[i:j] include


dp[i][j] = dp[i + 1][j - 1] + 2           if s[i] == s[j]
dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])    otherwise


class Solution(object):
    def longestPalindromeSubseq(self, s):
        """
        :type s: str
        :rtype: int
        """
        n = len(s)
        dp = [[0] * n for _ in range(n)]
        
        for i in range(n):
            dp[i][i] = 1
            
        
        for i in range(n - 1, -1, -1):
            for j in range(i + 1, n):
                if s[i] == s[j]:
                    dp[i][j] = dp[i + 1][j - 1] + 2
                else:
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])
        return dp[0][n - 1]
        
 
# dp2

