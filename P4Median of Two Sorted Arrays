# binary search
# we do binary search on the shorter length nums and partition on A and B
# len of partition is (A + B + 1) //2 
# search i , i is the lenght in the left partition of A
i:0, 1, 2 ... m

 A:  1 2 3 4 ..  i - 1|i i+1 ... m - 1
 B:  1 2 3 4 ..  j - 1|j j+1 ... n - 1

# conditions : max Aleft <= min Bright, maxBleft <= min A right
# if not : 
# time O(lg(min(m,n ))
# space O(1)

class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        A = nums1
        B = nums2
        m = len(A)
        n = len(B)
        
        if m > n:
            return self.findMedianSortedArrays(B, A)
        
        imin = 0
        imax = m
        len_half = (m + n + 1) // 2
        
        while imin <= imax:
            i = (imin + imax) // 2
            j = len_half - i
            if i < m and A[i] < B[j - 1]:
                # shift right
                imin = i + 1
            elif i > 0 and A[i - 1] > B[j]:
                # shif left
                imax = i - 1
            else:
                # perfect i 
                
                # check 左半段 A B 是否为空
                if i == 0:
                    left_max = B[j - 1]
                elif j == 0:
                    left_max = A[i - 1]
                else:
                    left_max = max(A[i - 1], B[j - 1])
                
                if (m + n) % 2:
                    return left_max
                
                # check 右半段 A B 是否为空
                if i == m:
                    right_min = B[j]
                elif j == n:
                    right_min = A[i]
                    
                else:
                    right_min = min(A[i], B[j])
                    
                return (left_max + right_min) / 2.0
                






中位数的定义：如果数列有偶数个数，那么中位数为中间两个数的平均值；如果数列有奇数个数，那么中位数为中间的那个数。
比如{1，2，3，4，5}的中位数为3。{1，2，3，4，5，6}的中位数为（3+4）/ 2 = 3.5。
那么这题最直接的思路就是将两个数列合并在一起，然后排序，然后找到中位数就行了。可是这样最快也要O((m+n)log(m+n))的时间复杂度，
而题目要求O(log(m+n))的时间复杂度。这道题其实考察的是二分查找，是《算法导论》的一道课后习题，难度还是比较大的。

首先我们来看如何找到两个数列的第k小个数，即程序中getKth(A, B , k)函数的实现。用一个例子来说明这个问题：A = {1，3，5，7}；B = {2，4，6，8，9，10}；
如果要求第7个小的数，A数列的元素个数为4，B数列的元素个数为6；k/2 = 7/2 = 3，而A中的第3个数A[2]=5；B中的第3个数B[2]=6；
而A[2]<B[2]；则A[0]，A[1]，A[2]中必然不可能有第7个小的数。因为A[2]<B[2]，所以比A[2]小的数最多可能为A[0], A[1], B[0], B[1]这四个数，
也就是说A[2]最多可能是第5个大的数，由于我们要求的是getKth(A, B, 7)；
现在就变成了求getKth(A', B, 4)；即A' = {7}；B不变，求这两个数列的第4个小的数，因为A[0]，A[1]，A[2]中没有解，所以我们直接删掉它们就可以了。
这个可以使用递归来实现。




# time O(lg(m+n)), 提示用binary search, 注意two pointers O(m+n)
# 边界条件复杂

# O(lgm + lgn)) is same as O(lg(m+n))
# since, lg(m+n) <= lgm * lgn <= 2lg(m+2)

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        l = len(nums1) + len(nums2)
        if l % 2 == 1:
            return self.kth(nums1, nums2, l // 2)
        else:
            return (self.kth(nums1, nums2, l // 2) + self.kth(nums1, nums2, l //2 - 1)) / 2
        
    def kth(self, nums1, nums2, k):
        if not nums1:
            return nums2[k]
        if not nums2:
            return nums1[k]
        
        index1, index2 = len(nums1) // 2, len(nums2) // 2
        n1, n2 = nums1[index1], nums2[index2]
        
        # when k > index1 + index
        if index1 + index2 < k:
            # if a's median is bigger than b's, b's first half doesn't include k
            if n1 > n2:
                return self.kth(nums1, nums2[index2 + 1:], k - index2 - 1)
            else:
                return self.kth(nums1[index1 + 1:], nums2, k - index1 -1)
        else:
            # if a's median is bigger than b's, a's second half doesn't include k
            if n1 > n2:
                return self.kth(nums1[:index1], nums2, k)
            else:
                return self.kth(nums1, nums2[:index2], k)
        
        
