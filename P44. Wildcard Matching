# state variable, dp[i][j], first i in s, match first j in p

# s:''
# p:'**', p can't contain char which is not *
# initialize, dp[0][j] = True, if p[j - 1] == '*' # s is empty, p[j - 1] '*


# transmation formula: 1) p[j - 1] == s[j - 1] or p[j - 1] == '?', dp[i][j] = dp[i - 1][j - 1]
                       2) p[j - 1] == '*', dp[i][j - 1](empty)/dp[i-1][j](any string, s add char i, * add one more char)


class Solution(object):
    def isMatch(self, s, p):
        
        m = len(s)
        n = len(p)
        dp = [[False for _ in range(n + 1)] for i in range(m + 1)]
        dp[0][0] = True
        
        for j in range(1, n + 1):
            if p[j - 1] == '*':
                dp[0][j] = True
            else:
                break
                
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if p[j - 1] == '?' or p[j - 1] == s[i - 1]:
                    dp[i][j] = dp[i - 1][j - 1]
                elif p[j - 1] == '*':
                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1]
                    
        return dp[-1][-1]
                
