逆波兰表达式是更利于计算机运算的表达式形式, 需要用到栈(先进后出的数据结构).

遍历表达式:

碰到数字则入栈
碰到运算符则连续从栈中取出2个元素, 使用该运算符运算然后将结果入栈
最后栈中剩余一个数字, 就是结果.

# time O(n)
# space O(n)
class Solution(object):
    def evalRPN(self, tokens):
        
        stack = []
        for char in tokens:
            if char not in ['+', '-', '*', '/']:
                stack.append(int(char))
            else:
                n2 = stack.pop()
                n1 = stack.pop()
                if char == '+':
                    stack.append(n1 + n2)
                elif char == '-':
                    stack.append(n1 - n2)
                elif char == '*':
                    stack.append(n1 * n2)
                elif char == '/':
                    if n1 * n2 < 0:
                        stack.append(-(abs(n1) // abs(n2)))
                    else:
                        stack.append(n1 // n2)
                        
        return stack[-1]
