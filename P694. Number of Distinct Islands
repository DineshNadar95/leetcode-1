# idea:set shapes
# dfs + shapes set
# representation of island, relative coordinate to top left corner


# time O(mn)
# space O(mn)

class Solution(object):
    def numDistinctIslands(self, grid):
        
        shapes = set()
        self.visited = set()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1 and (i, j) not in self.visited:
                    shape = []
                    self.dfs(grid, i, j, shape, i, j)
                    shapes.add(tuple(shape))
        return len(shapes)
    
    def dfs(self, grid, x, y, shape, i, j):
        self.visited.add((x, y))
        shape.append((x - i, y - j))
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            new_x = x + dx
            new_y = y + dy
            if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and grid[new_x][new_y] == 1 and (new_x, new_y) not in self.visited:
                self.dfs(grid, new_x, new_y, shape, i, j)
            
