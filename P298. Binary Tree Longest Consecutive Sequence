1 dfs recursion 
# time O(n)
# space O(h)

class Solution(object):
    def longestConsecutive(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        
        self.res = 0
        self.dfs(root, 1)
        return self.res
    
    def dfs(self, node, cur_path):
        self.res = max(self.res, cur_path)
        
        if node.left:
            if node.left.val - 1 == node.val:
                self.dfs(node.left, cur_path + 1)
            else:
                self.dfs(node.left, 1)
                
        if node.right:
            if node.right.val -1 == node.val:
                self.dfs(node.right, cur_path + 1)
            else:
                self.dfs(node.right, 1)
                
                
                
                

class Solution(object):
    def longestConsecutive(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root: 
            return 0
        
        return self.dfs(root, None, 0)
        
    def dfs(self, node, parent, length):
        if not node:
            return length
        
        if parent and parent.val + 1 == node.val:
            length += 1
        else:
            length = 1
        
        return max(length, self.dfs(node.left, node, length), self.dfs(node.right, node, length))
                   
    # bfs
    # time O(n)
    # space O(n)
   class Solution(object):
    def longestConsecutive(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        
        queue = collections.deque([(root, 1)])
        ans = 0
        while queue:
            node, length = queue.popleft()
            ans = max(ans, length)
            for child in [node.left, node.right]:
                if child:
                    if node.val + 1 == child.val:
                        l = length + 1
                    else:
                        l = 1
                    queue.append([child, l])
        return ans
        
        
    # stack
    
    class Solution(object):
    def longestConsecutive(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        
        res = 0
        stack = [(root, 1)]
        while stack:
            node, length = stack.pop()
            res = max(res, length)
            for child in [node.left, node.right]:
                if child:
                    if child.val == node.val + 1:
                        l = length + 1
                    else:
                        l = 1
                    stack.append((child, l))
                    
        return res
            
            
