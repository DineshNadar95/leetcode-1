To find the validity of a given board, we could first think about the cases where the board is invalid

Since X starts first, x_count >= o_count. So if o_count > x_count, we can return False
Since the players take turns, we could also return False if x_count-o_count>1
After the corner cases, this is the algorithm used:

If player O has a winning condition, also check the following:
a) If player X also has a winning condition, return False
b) If x_count != o_count , return False (Since player O always plays second, it has to meet this condition always)
If player X has a winning condition, check the following:
a) If x_count != o_count + 1, return False (Since player X plays the first move, if player X wins,
the player X's count would be 1 more than player O)

class Solution(object):
    def validTicTacToe(self, board):
        
        c_x = 0
        c_o = 0
        
        for i in range(3):
            for j in range(3):
                if board[i][j] == 'X':
                    c_x += 1
                elif board[i][j] == 'O':
                    c_o += 1
                    
                    
        if not (c_x == c_o or c_x - c_o == 1):
            return False
        
        if self.check_win(board, 'X'):
            if self.check_win(board, 'O') or c_x - c_o != 1:
                
                return False
            
        if self.check_win(board, 'O'):
            if self.check_win(board, 'X') or c_x != c_o:
                return False
        
        return True
        
        
    def check_win(self, board, player):
        # check row
        for i in range(3):
            if board[i][0] == board[i][1] == board[i][2] == player:
                return True
            
        # check col
        for i in range(3):
            if board[0][i] == board[1][i] == board[2][i] == player:
                return True
        
        # check diag
        if board[0][0] == board[1][1] == board[2][2] == player:
            return True
        
        # check anti
        if board[0][2] == board[1][1] == board[2][0] == player:
            return True
        
        return False
        
        
        
        
        
        
        
        
        
        
        
