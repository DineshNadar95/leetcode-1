  # time O(n*m) n: wordlist length, m:word length
  # space O(n*m^2) distance or O(m)???

class Solution(object):
    def findLadders(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[List[str]]
        """
        wordSet = set(wordList)
        neighbor = collections.defaultdict(list)
        distance = collections.defaultdict(int)
        res = []
        
        def get_similar_words(word):
            similar_words = []
            for char in string.ascii_lowercase:
                for i in range(len(word)):
                    temp = word[:i] + char + word[i+1:]
                    if temp != word and temp in wordSet:
                        similar_words.append(temp)
            return similar_words
        
        def bfs():  # Populate neighbor and distance
            dq = collections.deque([(beginWord, 0)])
            distance[beginWord] = 0
            while dq:
                word, dist = dq.popleft()
                for similar_word in get_similar_words(word):
                    neighbor[word].append(similar_word)
                    if similar_word not in distance:
                        dq.append((similar_word, dist+1))
                        distance[similar_word] = dist + 1
        
        def dfs(temp, word):    # Find sequences based on neighbor and distance
            if word == endWord:
                res.append(temp + [word])
                return
            for next_word in neighbor[word]:
                if distance[next_word] == distance[word] + 1:
                    dfs(temp + [word], next_word)
       
        bfs()
        dfs([], beginWord)
        return res
        
