#time O(m*n*4^K)->upper boundO(mn*mn)
# space O(mn)

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        if len(word) == 0:
            return True
        if not board:
            return False
        
        visited = {}
        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.dfs(board, word, 0, i, j, visited):
                    return True
        return False
    
    def dfs(self, board, word, index, row, col, visited):
        if index == len(word):
            return True
        
        if row < 0 or row >= len(board) or col < 0 or col >= len(board[0]):
            return False
        if visited.get((row, col)) or board[row][col] != word[index]:
            return False
        
        visited[(row, col)] = True
        res = self.dfs(board, word, index + 1, row + 1, col, visited) \
        or self.dfs(board, word, index + 1, row - 1, col, visited) \
        or self.dfs(board, word, index + 1, row, col + 1, visited) \
        or self.dfs(board, word, index + 1, row, col - 1, visited) 
        visited[(row, col)] = False
        return res
    
