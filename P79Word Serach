#time O(m*n*4^K)->upper boundO(mn*mn)
# space O(mn)

class Solution:
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        if not board or not word:
            return False
        
        m = len(board)
        n = len(board[0])
        
        visited = set()
        for i in range(m):
            for j in range(n):
                if self.dfs(board, i, j, 0, word, visited):
                    return True
        return False
    
    
    def dfs(self, board, x, y, index, word, visited):
        注意1. if cur index == len(word), we return True,说明我们找到了单词
        if len(word) == index:
            return True
        if x < 0 or y < 0 or x >= len(board) or y >= len(board[0]) or word[index] != board[x][y] or (x, y) in visited:
            return False
        
        visited.add((x, y))
        if self.dfs(board, x + 1, y, index + 1, word, visited) or self.dfs(board, x - 1, y, index + 1, word, visited) or self.dfs(board, x, y + 1, index + 1, word, visited) or self.dfs(board, x, y - 1, index + 1, word, visited):
            return True
            
        注意2. backtracking, 把当前的char 从visited remove  
        visited.remove((x, y))
        
