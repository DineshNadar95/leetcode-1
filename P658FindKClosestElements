
# binary search to find start point
 # time O(log(N-k) + K)
 # space O(k)
Assume we are taking A[i] ~ A[i + k -1].
We can binary research i
We compare the distance between x - A[mid] and A[mid + k] - x

case 1: x - A[mid] < A[mid + k] - x, need to move window go left
-------x----A[mid]-----------------A[mid + k]----------

case 2: x - A[mid] < A[mid + k] - x, need to move window go left again
-------A[mid]----x-----------------A[mid + k]----------

case 3: x - A[mid] > A[mid + k] - x, need to move window go right
-------A[mid]------------------x---A[mid + k]----------

case 4: x - A[mid] > A[mid + k] - x, need to move window go right
-------A[mid]---------------------A[mid + k]----x------

If x - A[mid] > A[mid + k] - x,
it means A[mid + 1] ~ A[mid + k] is better than A[mid] ~ A[mid + k - 1],
and we have mid smaller than the right i.
So assign left = mid + 1.
     
class Solution(object):
    def findClosestElements(self, arr, k, x):
        
        l = 0
        r = len(arr) - k
        while l < r:
            m = (l + r) // 2
            if x - arr[m] > arr[m + k] - x:
                l = m + 1
            else:
                r = m
        return arr[l : l + k]


# sol1 heap
# time O(n + klogn), space O(n)
# step
heapify nodes with dis
pop k element 
sort


from heapq import * 
class Solution(object):
    def findClosestElements(self, arr, k, x):
       
        heap = [(abs(y - x), y) for y in arr]
        heapify(heap)
        res = []
        for _ in range(k):
            dis, y = heappop(heap)
            res.append(y)
        return sorted(res)
        


