# sol1 heap
# time O(n + klogn), space O(n)
# step
heapify nodes with dis
pop k element 
sort


from heapq import * 
class Solution(object):
    def findClosestElements(self, arr, k, x):
       
        heap = [(abs(y - x), y) for y in arr]
        heapify(heap)
        res = []
        for _ in range(k):
            dis, y = heappop(heap)
            res.append(y)
        return sorted(res)
        


# binary search to find start point, O(log(N-k) + K)
比较区间两端(m, m + k) 的数值和x的距离，如果左边离得远了，就向右边走；如果右边离得远了，就像左边走。这个对二分查找的理解必须很深刻了。
# 0      M...X...M+K      N-k     N
     
class Solution(object):
    def findClosestElements(self, arr, k, x):
        
        l = 0
        r = len(arr) - k
        while l < r:
            m = (l + r) // 2 # m means the start point of the res list
            if abs(arr[m] - x) > abs(arr[m + k] - x):
                l = m + 1
            else:
                r = m
            
        return arr[l : l + k]
