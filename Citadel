# OA1 Prefix Sum of Matrix (Or 2D Array)

def findBeforeMatrix(after):
    if not after or not after[0]:
        return []
    C = len(after[0])
    R = len(after)
    
    for i in range(0, R):
        for j in range(C - 1, 0, -1):
            after[i][j] -= after[i][j - 1];
 
    for i in range(R-1, 0, -1):
        for j in range(C - 1, -1, -1):
            after[i][j] -= after[i - 1][j]

    return after
    
a2 = []
a3 = [[]]
after = [[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]]
print(findBeforeMatrix(after))
print(findBeforeMatrix(a2))
print(findBeforeMatrix(a3))

def prefixSum2D(a) : 
    if not a or not a[0]:
        return []
    
    C = len(a[0])
    R = len(a)
    psa = [[0 for x in range(C)]  
              for y in range(R)]  
    psa[0][0] = a[0][0] 
  

    for i in range(1, C) : 
        psa[0][i] = (psa[0][i - 1] + 
                       a[0][i]) 
    for i in range(0, R) : 
        psa[i][0] = (psa[i - 1][0] + 
                       a[i][0]) 

    for i in range(1, R) : 
        for j in range(1, C) : 
            psa[i][j] = psa[i - 1][j] + psa[i][j - 1] - psa[i - 1][j - 1] +  a[i][j]
    return psa
  
# Driver Code 
a = [[ 1, 1, 1, 1, 1 ], 
     [ 1, 1, 1, 1, 1 ], 
     [ 1, 1, 1, 1, 1 ], 
     [ 1, 1, 1, 1, 1 ]] 
a2 = []
a3 = [[]]
  
print(prefixSum2D(a))
print(prefixSum2D(a2))
print(prefixSum2D(a3))
  

# Driver Code 
a = [[ 1, 1, 1, 1, 1 ], 
     [ 1, 1, 1, 1, 1 ], 
     [ 1, 1, 1, 1, 1 ], 
     [ 1, 1, 1, 1, 1 ]] 
a2 = []
a3 = [[]]
  
print(prefixSum2D(a))
print(prefixSum2D(a2))
print(prefixSum2D(a3))


# OA2 Consecutive sum
class Solution:
    def consecutiveNumbersSum(self, N: int) -> int:
        count = 0
        upper_limit = ceil((2 * N + 0.25)**0.5 - 0.5) + 1
        for k in range(1, upper_limit):
            if (N - k * (k + 1) // 2) % k == 0:
                count += 1
        return count - 1
  


def getUnallottedUsers(bids, totalShares):
    # Write your code here
    id_share = {}
    for bid in bids:
        id_share[bid[0]] = bid[1]
    
    bids.sort(key = lambda x : (-x[2], x[3]))

    for bid in bids:
        if totalShares == 0:
            break
        else:
            if bid[1] < totalShares:
                alloted = bid[1]
            else:
                alloted = totalShares
            bid[1] -= alloted
            totalShares -= alloted

    bids.sort(key = lambda x : x[0])

    res = []
    for bid in bids:
        if bid[1] == id_share[bid[0]]:
            res.append(bid[0])

    users = [0 for _ in range(len(res))]
    for i in range(0, len(res)):
        users[i] = res[i]
    return users
        
            

import collections
def getUnallottedUsers(bids, totalShares):
    # Write your code here

    id_share = {}
    price_id = collections.defaultdict(list)
    for bid in bids:
        id_share[bid[0]] = bid[1]
        price_id[bid[2]].append(bid[0])
    
    bids.sort(key = lambda x : (-x[2], x[3]))
    checked = set()

    for bid in bids:
        if bid[0] in checked:
            continue

        if totalShares <= 0:
            break
        else:
            if len(price_id[bid[2]]) == 1:
                checked.add(bid[0])
                if bid[1] < totalShares:
                    alloted = bid[1]
                else:
                    alloted = totalShares
                bid[1] -= alloted
                totalShares -= alloted
            else:
                min_share = min(id_share[x] for x in price_id[bid[2]])
                print(min_share)
                while totalShares > 0 and min_share != 0: 
                    min_share = min(id_share[x] for x in price_id[bid[2]])
                    print(min_share * len(price_id[bid[2]]))
                    if min_share * len(price_id[bid[2]]) <= totalShares:
                        print(min_share * len(price_id[bid[2]]))
                        #min_id = list(id_share.keys())[list(id_share.values()).index(min_share)]
                        print(price_id[bid[2]])
                        for i in price_id[bid[2]]:
                            print(bids[i - 1])
                            id_share[i] -= min_share
                            checked.add(i)
                        totalShares -= min_share * len(price_id[bid[2]])  
                        #print(
                    else:      
                        totalShares = -1
                        
    print(bids)
    bids.sort(key = lambda x : x[0])
    res = []
    for bid in bids:
        if bid[1] == id_share[bid[0]] or id_share[bid[0]] > 0:
            res.append(bid[0])
    return res

                 
            
# 1 2 
totalShares = 2
bids = [[1, 3, 1, 9866],
[2, 1, 2, 5258],
[3, 2, 4, 5788],
[4, 2, 4, 6536]]
print(getUnallottedUsers(bids, totalShares))















