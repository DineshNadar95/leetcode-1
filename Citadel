# OA1 Prefix Sum of Matrix (Or 2D Array)

def findBeforeMatrix(after):
    if not after or not after[0]:
        return []
    C = len(after[0])
    R = len(after)
    
    for i in range(0, R):
        for j in range(C - 1, 0, -1):
            after[i][j] -= after[i][j - 1];
 
    for i in range(R-1, 0, -1):
        for j in range(C - 1, -1, -1):
            after[i][j] -= after[i - 1][j]

    return after
    
a2 = []
a3 = [[]]
after = [[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]]
print(findBeforeMatrix(after))
print(findBeforeMatrix(a2))
print(findBeforeMatrix(a3))

def prefixSum2D(a) : 
    if not a or not a[0]:
        return []
    
    C = len(a[0])
    R = len(a)
    psa = [[0 for x in range(C)]  
              for y in range(R)]  
    psa[0][0] = a[0][0] 
  

    for i in range(1, C) : 
        psa[0][i] = (psa[0][i - 1] + 
                       a[0][i]) 
    for i in range(0, R) : 
        psa[i][0] = (psa[i - 1][0] + 
                       a[i][0]) 

    for i in range(1, R) : 
        for j in range(1, C) : 
            psa[i][j] = psa[i - 1][j] + psa[i][j - 1] - psa[i - 1][j - 1] +  a[i][j]
    return psa
  
# Driver Code 
a = [[ 1, 1, 1, 1, 1 ], 
     [ 1, 1, 1, 1, 1 ], 
     [ 1, 1, 1, 1, 1 ], 
     [ 1, 1, 1, 1, 1 ]] 
a2 = []
a3 = [[]]
  
print(prefixSum2D(a))
print(prefixSum2D(a2))
print(prefixSum2D(a3))
  

# Driver Code 
a = [[ 1, 1, 1, 1, 1 ], 
     [ 1, 1, 1, 1, 1 ], 
     [ 1, 1, 1, 1, 1 ], 
     [ 1, 1, 1, 1, 1 ]] 
a2 = []
a3 = [[]]
  
print(prefixSum2D(a))
print(prefixSum2D(a2))
print(prefixSum2D(a3))


# OA2 Consecutive sum
class Solution:
    def consecutiveNumbersSum(self, N: int) -> int:
        count = 0
        upper_limit = ceil((2 * N + 0.25)**0.5 - 0.5) + 1
        for k in range(1, upper_limit):
            if (N - k * (k + 1) // 2) % k == 0:
                count += 1
        return count - 1
  

