# divide and conquer
# time O(n)
# space O(h)

给定树中的一个结点，若其满足下面条件中的一个，则子树同值:
1. base case, None node or 该节点没有子结点 （基本情况）
2. recursion part 该节点的所有子结点都为同值子树，且结点与其子结点值相同。


class Solution(object):
    def countUnivalSubtrees(self, root):
        
        self.res = 0
        self.dfs(root)
        return self.res
    
    def dfs(self, node): # return true/false
    
        if not node:
            return True
        
        if not node.left and not node.right:
            self.res += 1
            return True
        
        res = True
        if node.left:
            l_uni = self.dfs(node.left)
            if not l_uni or node.val != node.left.val:
                res = False
        
        if node.right:
            r_uni = self.dfs(node.right)
            if not r_uni or node.val != node.right.val:
                res = False
                
        if res:
            self.res += 1
        return res
            
