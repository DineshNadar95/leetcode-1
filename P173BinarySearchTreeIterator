# 用stack: 用栈将遍历路径暂存起来
# 解题思路:
1. 最小节点应该从根节点递归遍历左节点，直到遍历的节点没有左节点，那么该节点就是二叉树中的最小节点。
2. 当访问了该节点后，剩余没有访问的树中最小的节点, 如果该节点有右子树，那么在它的右子树中（
 又回到了找一棵二叉搜索树的最小元素，不过这棵二叉搜索树变小了）；如果没有右子树，那么就是它的父节点。
 为了能够快速定位到父节点，我们可以用栈将遍历路径暂存起来，当进行next()操作时，我们弹出栈顶元素并进行访问，
 如果它有右子树的话就遍历它的右子树；如果没有右子树，当下次出栈操作时就是访问当前节点的父节点了。


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

在初始化的过程中，就使用中序遍历，把BST的中序遍历是有序的这个特点用上。再定义hasnext()和next()就很容易了。
class BSTIterator:
    # Initialize an empty array that will contain the nodes of the binary search tree in the sorted order.
    def __init__(self, root: TreeNode):
        self.stack = []
        self.push_left(root) # function to do the in order traversal to put the node into stack
        

    def next(self) -> int:
        """
        @return the next smallest number
        """
        node = self.stack.pop()
        self.push_left(node.right)
        return node.val
        

    def hasNext(self) -> bool:
        """
        @return whether we have a next smallest number
        """
        return self.stack
        
    def push_left(self, node):
        while node:
            self.stack.append(node)
            node = node.left
