# 用stack: 用栈将遍历路径暂存起来
# 解题思路:
1. 最小节点应该从根节点递归遍历左节点，直到遍历的节点没有左节点，那么该节点就是二叉树中的最小节点。
2. 当访问了该节点后，剩余没有访问的树中最小的节点, 如果该节点有右子树，那么在它的右子树中
 又回到了找一棵二叉搜索树的最小元素
 

class BSTIterator(object):

    def __init__(self, root):
        self.stack = []
        self.inorder(root)

    def next(self):
        node = self.stack.pop()
        self.inorder(node.right)
        return node.val
        

    def hasNext(self):
        if self.stack:
            return True
        return False
    
    def inorder(self, node):
        while node:
            self.stack.append(node)
            node = node.left
        

