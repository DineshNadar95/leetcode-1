# binary search
# Say dividend / divisor = N, The complexity will be O((logN)^2).
# Worst case we can do logn operations logn times in the two nested loops.
# space O(1)

  class Solution(object):
    def divide(self, dividend, divisor):
        """
        :type dividend: int
        :type divisor: int
        :rtype: int
        """
        sign = 0
        if dividend > 0 and divisor < 0 or dividend < 0 and divisor > 0:
            sign = -1
        else:
            sign = 1
        
        dividend = abs(dividend)
        divisor = abs(divisor)
        res = 0
        
        while dividend >= divisor:
            tmp = divisor 
            i = 1
            while dividend >= tmp + tmp:
                tmp += tmp
                i += i
            res += i
            dividend -= tmp
            
        res = sign * res
        if res > 2147483647:
            return 2147483647
        elif res < -2147483648:
            return -2147483648
        else:
            return res
        


# bit manipulation
# a << 1 a向左移动一位，等于a * 2， 左移n位，相当于 a * 2 ^ n
# 可以用被除数不断地减除数的1倍、2倍、4倍、8倍...这样就快了
#  O(log(answer)) = O(log(dividend // divisor)) 

class Solution(object):
    def divide(self, dividend, divisor):
        """
        :type dividend: int
        :type divisor: int
        :rtype: int
        """
        sign = 0
        if dividend > 0 and divisor < 0 or dividend < 0 and divisor > 0:
            sign = -1
        else:
            sign = 1
            
        dividend = abs(dividend)
        divisor = abs(divisor)
        
        res = 0
        while dividend >= divisor:
            tmp = divisor
            i = 1
            while dividend >= tmp:
                dividend -= tmp
                res += i
                i <<= 1
                tmp <<= 1
                
        res = sign * res
        if res > 2147483647:
            return 2147483647
        elif res < -2147483648:
            return -2147483648
        else:
            return res
        
        
        
  
