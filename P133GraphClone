"""
Definition for a undirected graph node
class UndirectedGraphNode:
    def __init__(self, x):
        self.label = x
        self.neighbors = []
"""


class Solution:
    """
    @param: node: A undirected graph node
    @return: A undirected graph node
    """
    def cloneGraph(self, node: 'Node') -> 'Node':
        if not node:
            return
        
        
        new_start_node = UndirectedGraphNode(node.label)
        # copy start node, store the old to new information in a hash map
        mapping = {node : new_start_node}
        
        # use bfs to traverse all the nodes and copy nodes and edges information
        queue = collections.deque([node])
        while queue:
            node = queue.popleft()
            new_node = mapping[node]
            for neighbor in node.neighbors:
                if neighbor not in mapping:
                    new_neighbor = UndirectedGraphNode(neighbor.label)
                    mapping[neighbor] = new_neighbor
                    queue.append(neighbor)
                else:
                    new_neighbor = mapping[neighbor]
                new_node.neighbors.append(new_neighbor)
        return new_start_node
        
