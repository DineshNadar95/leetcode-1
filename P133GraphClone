当我们遍历到一个新的节点的时候，需要判断这个节点是否在字典中出现过，
如果出现过就把它对应的复制出来的对象放到其neighboors里，
若没有出现过，那么就重新构造该节点，并把原节点和该节点放到字典中保存。

# BFS
# time O(v+e)
# space O(v)

class Solution:
    def cloneGraph(self, node):
        
        visited = {}
        queue = collections.deque([node])
        node_copy = Node(node.val, [])
        visited[node] = node_copy
        
        while queue:
            cur_node = queue.popleft()
            if not cur_node:
                continue
            for neighbor in cur_node.neighbors:
                if neighbor not in visited:
                    visited[neighbor] = Node(neighbor.val, [])
                    queue.append(neighbor) 
                visited[cur_node].neighbors.append(visited[neighbor])
        return node_copy      
        
# DFS

class Solution():
    def cloneGraph(self, node):
        """
        :type node: Node
        :rtype: Node
        """
        node_copy = self.dfs(node, dict())
        return node_copy
    
    def dfs(self, node, hashd):
        if not node: return None
        if node in hashd: return hashd[node]
        node_copy = Node(node.val, [])
        hashd[node] = node_copy
        for n in node.neighbors:
            n_copy = self.dfs(n, hashd)
            if n_copy:
                node_copy.neighbors.append(n_copy)
        return node_copy
