The Idea is simple, we use i to compare character from end of s and beginning of s. If it's equal, increment i by 1.

So we can use i-len(s) to divide s in two parts. The first part is that we don't know it's Palindrome. 
The second part its that we know for sure its the suffix of result and it may need reversed and insert at beginning of result.

The fun part is this: s[::-1][:len(s)-i]
if len(s)-i is 0, it will eliminate as '', otherwise it equals reversed(s[len(s) - i:])


# time O(n^2)
# space O(n)

class Solution(object):
    def shortestPalindrome(self, s):
        
        if not s or len(s) == 1:
            return s
        
        i = 0
        for j in range(len(s) - 1, -1, -1):
            if s[i] == s[j]:
                i += 1
        if i == len(s):
            return s
            
        # s[:i] s[i:]
        # ab cdba
        # abdc + ab + cdba
        return s[i:][::-1] + self.shortestPalindrome(s[:i]) + s[i:]
