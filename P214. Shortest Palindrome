# brute force
# find the longest palindrome begin from index 0, then reverser the other substring and add to the begining of s
# 从字符串开头找到最大的回文子串，然后反转剩余的子串并附加到开头。
# time O(n^2)
# space O(n)

class Solution(object):
    def shortestPalindrome(self, s):
        
        if len(s) == 1 or s == s[::-1]:
            return s
        
        res = ''
        for i in range(len(s)):
            if s[:i] == s[:i][::-1]:
                res = s[i:][::-1] + s
        return res
            
            
# sol2 divide and conquer
# time O(n^2)
# space O(n)

找最大回文子串。如果我们可以减小字符串的大小来搜索子字符串,而是不每次都检查完整的子字符串,就可以使该过程更加高效。

例如字符串 “abcbabcaba”。 考虑两个指针 i 和 j。初始化 i = 0。j 从 n-1 到 0 迭代，每当 s[i]==s[j] 时，将 i 增加 1。
现在，我们只需要在[0,i) 范围内搜索。这样，我们就缩小了从开头寻找最大回文子串的搜索长度。[0,i) 必然包括最大回文子串。
其正确性证明如下：若字符串全部为回文，则i会自增n次。若结尾有其他字符，i 会自增回文子串的长度。
于是，即使 [0,i) 并不总是紧界，但它总包含从开头开始的最长回文子串。

class Solution(object):
    def shortestPalindrome(self, s):

        
        if not s or len(s) == 1:
            return s
        
        i = 0
        for j in range(len(s) - 1, -1, -1):
            if s[i] == s[j]:
                i += 1
                
        if i == len(s):
            return s
            
        # abac
        # s[:i] s[i:]
        # aba c
        # c + aba + c
        return s[i:][::-1] + self.shortestPalindrome(s[:i]) + s[i:]
