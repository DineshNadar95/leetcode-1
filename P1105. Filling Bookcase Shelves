# dp
# time O(n^2)
# space O(n)

对于每一个新来的书，他只有两个选择：

1. 如果当前层宽度允许，将这本书放在当前层
2. 如果当前层宽度不允许，只能将该书放在下一层

遍历每一本书，把当前这本书作为书架最后一层的最后一本书，
将这本书之前的书向后调整，看看是否可以减少之前的书架高度。
状态转移方程为 dp[i] = min(dp[i] , dp[j - 1] + h)，其中 j 表示最后一层所能容下书籍的索引，h 表示最后一层最大高度
https://leetcode-cn.com/problems/filling-bookcase-shelves/solution/dong-tai-gui-hua-python3-by-smoon1989/


# dp[i], min height to place first i books
# init dp[i] = sys.maxsize, dp[0] = 0
# dp[j] = min(dp[i - 1] + H), 0 < i <= j
# return dp[-1]

# time O(n^2)
# space O(n)

class Solution(object):
    def minHeightShelves(self, books, shelf_width):
        
        dp = [sys.maxsize for _ in range(len(books) + 1)]
        dp[0] = 0
        n = len(books)
        
        for i in range (1, n + 1):
            max_width = shelf_width
            max_height = 0
            j = i-1
            # 将前i - 1本书从第i - 1本开始放在与i同一层，直到这一层摆满或者所有的书都摆好
            while j >= 0 and max_width - books[j][0] >= 0:
                max_width -= books[j][0] 
                max_height = max(max_height, books[j][1]) // 每层的高度由最高的那本书决定
                dp[i] = min(dp[i], dp[j] + max_height)
                j -= 1
        return dp[n]
