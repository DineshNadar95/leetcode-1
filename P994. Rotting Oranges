# time O(m*n)
# space O(m*n)

class Solution(object):
    def orangesRotting(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        
        #if not grid:
            #return 0
        
        count_fresh = 0
        queue = collections.deque([])
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    count_fresh += 1
                if grid[i][j] == 2:
                    queue.append((i, j))
                    
        if count_fresh == 0:
            return 0
        
        step = 0
        while queue:
            for _ in range(len(queue)):
                x, y = queue.popleft()
                for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                    new_x = x + dx
                    new_y = y + dy
                    
                    if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and grid[new_x][new_y] == 1:
                        grid[new_x][new_y] = 2
                        count_fresh -= 1
                        queue.append((new_x, new_y))
            step += 1
            
            
        if count_fresh != 0:
            return -1
        return step - 1
            
                    
            
            
