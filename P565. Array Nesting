# dfs
# time O(v + e), e is n
# space O(v)

class Solution(object):
    def arrayNesting(self, nums):
        
        res = 0
        self.memo = {} # key: i, value : count
        for i in range(len(nums)):
            if i in self.memo:
                res = max(res, self.memo[i])
            else:
                self.visited = set()
                self.visited.add(i)
                self.count = 1
                self.dfs(nums, i)
                res = max(res, self.count)
        return res
    
    def dfs(self, nums, index):
        if nums[index] in self.memo:
            self.count += self.memo[nums[index]]
            return
            
            
        if nums[index] not in self.visited:
            self.visited.add(nums[index])
            self.count += 1
            self.dfs(nums, nums[index])
            self.memo[nums[index]] = self.count
        
