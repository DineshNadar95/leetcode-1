# dfs
# time O(v + e), e is n
# space O(v)

class Solution(object):
    def arrayNesting(self, nums):
        
        self.dic = {} # key : start index, value: longest length 
        res = 0
        for i in range(len(nums)):
            cur_len = self.dfs(nums, i, set()) 
            res = max(res, cur_len)
        return res
    
    
    def dfs(self, nums, i, visited):
        if i in self.dic:
            return self.dic[i]

        visited.add(i)
        # recursion 1, don't have nb
        if nums[i] in visited:
            self.dic[i] = 1
            return 1
        
        # recursion, call dfs for nb
        res = 1 + self.dfs(nums, nums[i], visited)
        self.dic[i] = res
        return res
        
