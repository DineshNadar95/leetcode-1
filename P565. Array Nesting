# dfs
# time O(v + e), e is n
# space O(v)

class Solution(object):
    def arrayNesting(self, nums):
        
        self.dic = {} # key : start index, value: longest length 
        res = 0
        for i in range(len(nums)):
            cur_len = self.dfs(nums, i, set())
            res = max(cur_len, res)
        return res
    
    def dfs(self, nums, index, visited): # 
        if index in self.dic:
            return self.dic[index]
        
        visited.add(index)
        if nums[index] in visited:
            self.dic[index] = 1
            return 1
        
        res = 1 + self.dfs(nums, nums[index], visited)
        self.dic[index] = res
        return res
        
        
        
        
        
        
            
