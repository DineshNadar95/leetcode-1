# time O(n)
# space O(n)

# '(‘ stack.append(i)
# ')', if empty last = i
  not empty,配对，empty, i-last; not empty i - stack[-1]
  
class Solution(object):
    def longestValidParentheses(self, s):
        
        stack = []
        res = 0
        start = 0
        
        for i, ele in enumerate(s):
            if ele == '(':
                stack.append(i)
            else:
                if not stack:
                    start = i + 1 # invalid
                else:
                    stack.pop()
                    if not stack:
                        # start : last + 1, end:i, i - last + 1
                        res = max(res, i - start + 1)
                    else:
                        # start : stack[-1] + 1, end i
                        res = max(res, i - stack[-1])
        return res
        
  1. follow up:return longest substring
  
  class Solution(object):
    def longestValidParentheses(self, s):
        """
        :type s: str
        :rtype: int
        """
        stack = []
        last = -1
        max_len = 0
        max_string = ''
        
        for i, ele in enumerate(s):
            if ele == '(':
                stack.append(i)
                
            else:
                if not stack:
                    last = i
                    
                else:
                    stack.pop()
                    if not stack:
                        if i - last > max_len:
                            max_len = max(max_len, i - last)
                            max_string = s[last + 1 : i + 1]
                        
                    else:
                        if i - stack[-1] > max_len:
                            max_len = max(max_len, i - stack[-1])
                            max_string = s[stack[-1] + 1: i + 1]
                         
        return max_len, max_string
    
    
    
test = Solution()
print(test.longestValidParentheses("(()"))

2. without extra space 

# two pointers
class Solution(object):
    def longestValidParentheses(self, s):
        """
        :type s: str
        :rtype: int
        """
        # two pointers
        max_length = 0
        left = 0
        right = 0
        for i in range(len(s)):
            if s[i] == '(':
                left += 1
            else:
                right += 1
            
            if left == right:
                max_length = max(max_length, right * 2)
            elif left < right:
                left = 0
                right = 0
                
                
        
        # scan from right
        left = 0
        right = 0
        for j in range(len(s) - 1, - 1, -1):
            if s[j] == '(':
                left += 1
            else:
                right += 1
            
            if left == right:
                max_length = max(max_length, left * 2)
            elif left > right:
                left = 0
                right = 0
        return max_length
                
                
