# sol1 build graph + dfs q:query; e:equation
# time O(e + q*e^2)
# space O(e)

import collections

class Solution(object):
    def calEquation(self, euqations, values, queries):
        # build graph
        graph = collections.defaultdict(dict)
        for (x,y), value in zip(equations, values):
            graph[x][y] = value
            graph[y][x] = 1.0 / value
        
        res  = []
        for i, j in queries:
            res.append(self.dfs(graph, i, j, set(), 1.0))
        return res
                       
    def dfs(self, graph, i, j, visited, value):
        if i not in graph or j not in graph or i in visited:
            return -1.0
        if i == j:
            return value
        
        visited.add(i)
        temp = 0
        for n in graph[i]:
            temp = self.dfs(graph, n,j, visited, value * graph[i][n])
            if temp != -1.0:
                return temp
        return -1.0


if __name__ == '__main__':
    equations = [['a','b'],['b','c']]
    values = [2, 3]
    queries = [['a','c'], ['x','a']]
    test = Solution()
    res = test.calEquation(equations, values, queries)
    print(res)
            
            
        
            
            
# sol2 union find
# time (e + q)
# space (e)


