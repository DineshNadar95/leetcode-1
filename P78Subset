# dfs + recursiom
# time  O(n*2^n)
# space O(n)

class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        if not nums:
            return 
    
        result = []
        self.dfs(nums, 0, [], result)
        return result
    
    def dfs(self, nums, index, cur_subset, result):
        # 递归的出口
        if index == len(nums):
            result.append(list(cur_subset))
            return 
        
        #递归的拆解
        # 选nums【index】
        cur_subset.append(nums[index])
        self.dfs(nums, index + 1, cur_subset, result)
        
        # 不选nums[index]
        cur_subset.pop()
        self.dfs(nums, index + 1, cur_subset, result)
        
        
# combination 
# time O(2^n)
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        result = []
        if not nums:
            return result
        
        self.dfs(nums, 0, [], result)
        return result
        
    def dfs(self, nums, start_index, cur_subset, result):
        result.append(list(cur_subset))
        
        for i in range(start_index, len(nums)):
            cur_subset.append(nums[i])
            self.dfs(nums, i+ 1, cur_subset, result)
            cur_subset.pop()
