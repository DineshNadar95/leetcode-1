1.	Get top K

我拿到的是说会有一个（公司名，值）的数据流，让你实现加值进去（如果公司已经存在了就把值加上去）和返回topK股票价值的公司
第一个是add vol 给的 ticker 和 vol， 比如amzn 本来是 300，给amzn 500后 amzn 得对应 800， 第二个接口是返还 top k 要求sorted

思路:
'''
# sol1: heap + hashmap
# initial heapify, time O(n)
# time: update : pop stock from heap, add new to heap, O(n), if not in dic, update O(lgn) 

# sol2 : hashtable + double linked list
# initial hashtable, sort by values, and build k size linked list, smallest is head, O(nlgn)  
# update: O(k)
case 1: update one in top k      
    remove the node from linked list
    compare from smallest
    insert/add
    
    2. not in top k
    compare from smallest O(k)
    insert/add O(1)
'''
# sol1: heap + hashtable, # key: name, val: stock node in heap

from heapq import * 
import collections
class StockSystem(object):
    def __init__(self, stocks):
        self.dic = {}  # key: name, val: stock node in heap
        self.heap = []
        for (stock, vol) in stocks:
            entry = [-vol, stock]
            self.heap.append(entry)
            self.dic[stock] = entry
            
        heapify(self.heap)
                
    def update(self, stock, vol):
        if stock in self.dic:
            self.dic[stock][0] -= vol
            heapify(self.heap)    
        else:
            new = [-vol, stock]
            heappush(self.heap, new)
            self.dic[stock] = new
                     
        
    def get_top_k(self, k):
        res = self.heap[:k]
        res = [[x[1], -x[0]] for x in res]
        return res
    

test = StockSystem([('Amazon', 500), ('Facebook',800), ('Google', 1000)])
print(test.get_top_k(2))
test.update('Amazon', 700)
print(test.get_top_k(2))
test.update('Microsoft', 2000)
print(test.get_top_k(2))

# sol2, two hashtable + linked list
# dic1: key: stock, val: vol
# dic2: key: stock, val: linked list node 
# initialize :time O(nlgn)
# update: time O(k)

from heapq import * 
import collections

class ListNode(object):
    def __init__(self, stock, vol):
        self.stock = stock
        self.vol = vol
        self.prev = None
        self.next = None
        
class StockSystem(object):
    def __init__(self, stocks, k):
        self.dic = {}  # key: name, val: stock node in heap
        self.dic_node = {} # key: stock, val: list node 
        self.heap = []
        self.dummy_head = ListNode('', 0)      
        self.dummy_tail = ListNode('', 0)
        self.dummy_head.next = self.dummy_tail
        self.dummy_tail.prev = self.dummy_head
        
        
        l = []
        for s, v in stocks:
            self.dic[s] = v
            l.append([s, v])
            
        l.sort(key = lambda x:-x[1])
        cur = self.dummy_head
        
        for i in range(k):
            stock, vol = l[i]
            node = ListNode(stock, vol)
            node.prev = cur
            cur.next = node
            cur = cur.next
            self.dic_node[stock] = node
        cur.next = self.dummy_tail # tail is smallest
        self.dummy_tail.prev = cur
        
            
    def update(self, stock, vol):
        if stock in self.dic_node:
            self.delete[self.dic_node[stock]]
            
        prev_val = self.dic[stock]
        cur_val = prev_val + vol
        self.dic[stock] = cur_val
        
        
        if cur_val > self.dummy_tail.prev.vol:
            # find first node such that cur_val > node.val
            node = ListNode(stock, cur_val)
            cur = self.dummy_head.next
            while cur.next.vol > cur_val:
                cur = cur.next
            self.insert(cur, node)
            self.dic[stock] = node
    
        
    def get_top_k(self, k):
        res = []
        cur = self.dummy_head.next
        
        for _ in range(k):
            res.append([cur.stock, cur.vol])
            cur = cur.next
        return res
            
    
    def delete(self, node): # remove tail
        prev = node.prev
        nxt = node.next
        prev.next = nxt
        nxt.prev = prev
        
    def insert(self, node, new):
        nxt = node.next
        node.next = new
        new.prev = node
        new.next = nxt
        nxt.prev = new
        
        
        

test = StockSystem([('Amazon', 500), ('Facebook',800), ('Google', 1000)], 2)
print(test.get_top_k(2))
test.update('Amazon', 700)
print(test.get_top_k(2))


2. # 找括号深度最深的元素e.g. (((ab))(c)) return ab, 

# stack 
# '(' , depth + 1
# ')' , depth - 1
# dic: key, depth , value:char

class Solution(object):
    def findDeepstChars(self, s):
        dic = {} # key: depth, value: char
        depth = 0
        for char in s:
            if char == '(':
                depth += 1

            elif char == ')':
                depth -= 1
            
            else: 
                dic[depth] = dic.get(depth, '') + char
                
        max_depth = max(dic.keys())
        print(dic)
        return dic[max_depth]
    
test = Solution()
print(test.findDeepstChars('(((ab))(c))'))
        
                
3. '''
6.    UDP那个题前人写过。就是写一个函数，输入是一个数据包，比如1 -> A, 2 -> B, 4->C, 3->D。数字是UDP数据包的标号，字母是内容。如果新接收到的数据包是下个期待的包,就打印出来，如果不是就存下来，等期待的包到之后一起打印。上面例子打印. 输出应该是1 -> A, 2 -> B, 3 -> D, r->C。
就是如果遇见1就输出，如果没遇见1，只遇2，就得等遇到1再同时输出1，2，依次类推按序输出。
比如input:(2,x) (1,x) (3,x)
output: (1,x) (2,x) (3,x)

就用了hashmap存储和一个index记录需要print的package id.
follow up: 如果某一个package被drop了该怎么处理
'''

from heapq import *
class Solution(object):
    def print(self, seq):
        self.cur_print = 1
        self.q = []
        for time, char in seq:
            if time == self.cur_print:
                print((time, char))
                while self.q and self.q[0][0] == self.cur_print + 1:
                    print(heappop(self.q))
                    self.cur_print += 1
                self.cur_print += 1
            else:
                heappush(self.q, (time, char))
                
                         
test = Solution()
test.print([(2, 'x'), (1, 'x'), (3, 'x')])
       
4.'''
3.    马拉松
Assume racers passing through diff gates... we design to track the record, that when the racers passed the gates.. and an API to return the ordering of runners when called.
e.g
G0       G1        G2       G3
R1       R3        R4       R5
         R2

When get order is called, return R5, R4, R3, R2, R1

just LRU 變種，用LinkedList and hashmap to make tracking O(1), get order is then just iterate through the List of  LinkedList (each gate a doubly linkedlist)

设计一个马拉松class，包括一个运动员跑过marker的function以及随时可能被调用的return top k players的function. 用dictionary 和double linked list 做的
'''

import collections
class ListNode(object):
    def __init__(self, gate):
        self.gate = gate
        self.prev = None
        self.next = None


class Solution(object):
    def __init__(self, gates):
        self.dic1 = collections.defaultdict(list) # key: gate, value: list of racers
        self.dummy_head = ListNode(-1)
        self.dummy_tail = ListNode(-1)
        self.dummy_head.next = self.dummy_tail
        self.dummy_tail.prev = self.dummy_head
        cur = self.dummy_head
        
        for i, players in gates:
            node = ListNode(i)
            cur.next = node
            node.prev = cur
            self.dic1[node] = players
            cur = cur.next
        cur.next = self.dummy_tail
        self.dummy_tail.prev = cur
        
    def get_order(self):
        
        cur = self.dummy_tail
        res = []
        
        while cur.prev.gate >= 0:
            res += self.dic1[cur.prev]
            cur = cur.prev
        return res
    
test = Solution([(0, ['R0']),(1, ['R3', 'R2']), (2, ['R4']), (3, ['R5'])])           
print(test.get_order())
        
        
        
        
