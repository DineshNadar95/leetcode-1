# dp[i][j]  len(s) + 1, len(p) + 1
# if s[:i] match p[:j] s[i - 1] p[j -1]

# dp[0][0] = 1 True 
# empty s , p[j - 1] = *, then dp[0][j] = dp[0][j - 2]

# tansmation formula:
# 1. p[j - 1] == '.', we dp[i][j] = dp[i - 1][ j -1]
# 2. p[j - 1] == '*', 清除前一个或者重复多次

    当匹配多个时，如 abbb 和 ab*，或者 abbb 和 a.*，我们需要将 s[i] 前面的与 p 重新比较，即 dp[i][j] = dp[i-1][j]
    
# 3. not 1 and 2  = dp[i - 1][j - 1] and s[i - 1] == p[j -1]

# time O(len(s) * len(p))
# space O(len(s) * len(p))
class Solution(object):
    def isMatch(self, s, p):
        dp = [[False for j in range(len(p) + 1)] for i in range(len(s) + 1)]
        
        # initialize 
        dp[0][0] = True
        
        # empty s 
        for j in range(2, len(p) + 1):
            if p[j - 1] == '*':
                dp[0][j] = dp[0][j - 2]
                
        for i in range(1, len(s) + 1):
            for j in range(1, len(p) + 1):
                if p[j - 1] == '.':
                    dp[i][j] = dp[i - 1][j - 1]
                elif p[j - 1] == '*':
                    # did not work or remove prev or p[j - 2] appear more than once (例子 s:aa, p:a*)
                    # "aaa" ".*"
                    if p[j - 2] == s[i - 1] or p[j - 2] == '.':
                        dp[i][j] = dp[i - 1][j] or dp[i][j - 2]
                    else:                       
                        dp[i][j] = dp[i][j - 2]
                else:
                    dp[i][j] = dp[i - 1][j - 1] and s[i - 1] == p[j - 1]
                    
                    
        return dp[-1][-1]


   
        
        
 
