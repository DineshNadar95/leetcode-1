# dfs(backtracking)

# 一个状态需要记录的有: 当前字符串本身, 左括号数量, 右括号数量.
# 左括号数量等于括号对数 n, 那么当前字符串后续填充满右括号, 即是一种组合
# 如果当前左括号数量 < n:
  # 如果左括号多于右括号, 那么此时可以添加一个左括号或右括号, 递归进入下一层
  # 如果左括号 = 右括号, 那么此时只能添加一个左括号, 递归进入下一层
  
  class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        if n == 0:
            return []
        self.result = []
        self.helper('', 0, 0, n)
        return self.result
    
    def helper(self, temp, left, right, n):
        if right == n:
            self.result.append(temp)
        if left < n:
            self.helper(temp + '(', left + 1, right, n)
        if right < left:
            self.helper(temp + ')', left, right + 1, n)
