# BFS time O(r*c), space O(r*c)


# DFS time(h * n^2), h is the depth of recursion
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        # sanity check
        if not grid:
            return 0
        
        count = 0
        rows = len(grid)
        cols = len(grid[0])
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == '1':
                    count += 1
                    self.dfs(grid, i, j, rows, cols)
        return count 
    
    def dfs(self, grid, x, y, rows, cols):
        # base case
        if x < 0 or x >= rows or y < 0 or y >= cols or grid[x][y] == '0':
            return
        # recursive rule
        grid[x][y] = '0'
        directions = [[-1, 0], [1, 0], [0, 1], [0, -1]]
        for direction in directions:
            neighbor_x = direction[0] + x
            neighbor_y = direction[1] + y
            self.dfs(grid, neighbor_x, neighbor_y, rows, cols)
            
            
    # BFS
    class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        # sanity check
        if not grid:
            return 0
        
        count = 0
        rows, cols = len(grid), len(grid[0])
        location_set = set([(i, j) for i in range(rows) for j in range(cols) if grid[i][j] == '1'])
        directions = [[-1, 0], [1, 0], [0, 1], [0, -1]]
        while location_set:
            count += 1
            queue = collections.deque([location_set.pop()])
            while queue:
                i, j = queue.popleft()
                for direction in directions:
                    neighbor_i = i + direction[0]
                    neighbor_j = j + direction[1]
                    if (neighbor_i, neighbor_j) in location_set:
                        location_set.remove((neighbor_i, neighbor_j))
                        queue.append((neighbor_i, neighbor_j))
        return count
        
# BFS
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        # sanity check
        if not grid:
            return 0
        
        count = 0
        visited = set()
        rows = len(grid)
        cols = len(grid[0])
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == '1' and (i, j) not in visited:
                    self.bfs(grid, i, j, visited)
                    count += 1
        return count
    
    def bfs(self, grid, x, y, visited):
        queue = collections.deque([(x, y)])
        visited.add((x, y))
        while queue:
            x, y = queue.popleft()
            for delta_x, delta_y in [(1, 0), (-1, 0),  (0, 1), (0, -1)]:
                neighbor_x = x + delta_x
                neighbor_y = y + delta_y
                if not self.is_valid(grid, neighbor_x, neighbor_y, visited):
                    continue
                queue.append((neighbor_x, neighbor_y))
                visited.add((neighbor_x, neighbor_y))
    def is_valid(self, grid, x, y, visited):
        n, m = len(grid), len(grid[0])
        return 0 <= x < n and 0 <= y < m and (x, y) not in visited and grid[x][y] == '1'
