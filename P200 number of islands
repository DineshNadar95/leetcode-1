思路：用dfs去遍历graph, 从1开始，若遇到1则染成0， 数dfs的次数
# DFS time(n^2),因为有剪枝，空间复杂度是递归的深度
# worst case O(M * N) in case that the grid map is filled with 
lands where DFS goes by M×N deep.

class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid:
            return 0
        
        visited = set()
        count = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1' and (i, j) not in visited:
                    self.dfs(grid, i, j, visited)
                    count += 1
        return count
    
    
    def dfs(self, grid, x, y, visited):
        # exit case
        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or (x, y) in visited or grid[x][y] == '0':
            return 
        
        visited.add((x, y))
        for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:
            new_x = x + dx
            new_y = y + dy
            self.dfs(grid, new_x, new_y, visited)
            
        
 
# bfs 遍历图，对于任何一个未访问过的1，进行一次bfs，把她周围的1放入visited里面
# BFS time O(r*c), space O(r*c)   
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        # sanity check
        if not grid:
            return 0
        
        count = 0
        visited = set()
        rows = len(grid)
        cols = len(grid[0])
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == '1' and (i, j) not in visited:
                    self.bfs(grid, i, j, visited)
                    count += 1
        return count
    
    def bfs(self, grid, x, y, visited):
        queue = collections.deque([(x, y)])
        visited.add((x, y))
        while queue:
            x, y = queue.popleft()
            for delta_x, delta_y in [(1, 0), (-1, 0),  (0, 1), (0, -1)]:
                neighbor_x = x + delta_x
                neighbor_y = y + delta_y
                if not self.is_valid(grid, neighbor_x, neighbor_y, visited):
                    continue
                queue.append((neighbor_x, neighbor_y))
                visited.add((neighbor_x, neighbor_y))
    def is_valid(self, grid, x, y, visited):
        n, m = len(grid), len(grid[0])
        return 0 <= x < n and 0 <= y < m and (x, y) not in visited and grid[x][y] == '1'
        
    # visited set可以从2d变成1d（用string来表示每个坐标）。
