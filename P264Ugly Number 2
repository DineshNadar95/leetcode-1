sol1: dynamic programming

# i2, i3, i5, to mark the last ugly number need to be used to produce new one
# choose the smallest ugly number among 2 * nums[i2], 3 * nums[i3], 5 * nums[i5]

# time O(1) 
# space O(1) 

# node: 1 , ugly = min(2 * nums[i2], 3 * nums[i3], 5 * nums[i5])
# node: 2, if ugly == 2 * nums[i2]:
                i2 += 1
            if ugly == 3 * nums[i3]:
                i3 += 1
            if ugly == 5 * nums[i5]:
                i5 += 1

class Solution(object):
    def nthUglyNumber(self, n):
        
        if n == 1:
            return 1
        
        nums = [1]
        
        i2 = 0
        i3 = 0
        i5 = 0
        
        for _ in range(n):
            u2 = nums[i2] * 2
            u3 = nums[i3] * 3
            u5 = nums[i5] * 5
            
            ugly = min(u2, u3, u5)
            if ugly == u2:
                i2 += 1
            if ugly == u3:
                i3 += 1
            if ugly == u5:
                i5 += 1
                
            nums.append(ugly)
        return nums[n - 1]
            

# time O(n), space O(n)
import heapq
class Solution:
    def nthUglyNumber(self, n: int) -> int:
        heap = [1]
        visited = set([1])
        
        val = None
        for i in range(n):
            val = heapq.heappop(heap)
            for factor in [2, 3, 5]:
                if val * factor not in visited:
                    visited.add(val * factor)
                    heapq.heappush(heap, val * factor)
        return val
            
