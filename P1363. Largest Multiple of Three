(计数，枚举) O(n)
我们都知道如果一个数字能够整除3，那么各位数字之和也可以整除3。我们先计算出所有数字的和，然后分三种情况讨论：

数组和恰好是3的倍数，那么我们只需要将所有的数字从大到小拼接起来即可。
数组和除以3余1，为了使得数字最大，我们需要删除一个[1,4,7]当中的数字，如果找不到，我们就删除两个[2,5,8]当中的数字。
数组和除以3余2，为了使得数字最大，我们需要删除一个[2,5,8]当中的数字，如果找不到，我们就删除两个[1,4,7]当中的数字。

class Solution(object):
    def largestMultipleOfThree(self, digits):
        
        counts = [0 for _ in range(10)]
        mod = [0 for _ in range(3)]
        s = 0
        for dig in digits:
            counts[dig] += 1
            mod[dig % 3] += 1
            s += dig
            
    
        
        rem_mod = 0
        rem_c = 0
        if s % 3 == 1: # 1 1 or 2 2
            if mod[1] >= 1:
                rem_mod = 1
                rem_c = 1
            else:
                rem_mod = 2
                rem_c = 2
        elif s % 3 == 2: # 1 2 or 2 1
            if mod[2] >= 1:
                rem_mod = 2
                rem_c = 1
            else:
                rem_mod = 1
                rem_c = 2
        
        res = ''
        for i in range(10):
            for j in range(counts[i]):
                if rem_c > 0 and i % 3 == rem_mod:
                    rem_c -= 1
                else:
                    res += str(i)
        if len(res) > 0 and res[-1] == '0':
            return '0'
        
        return res[::-1]
                
                
            
            
