
class Solution(object):
    def boundaryOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return []
        
        self.res = [root.val]
        if not root.left and not root.right:
            return self.res
        
        self.dfs_l(root.left)
        self.dfs_leaves(root)
        self.dfs_r(root.right)
        return self.res
    
    def dfs_l(self, node):
        if not node or (not node.left and not node.right):
            return 
        self.res.append(node.val)
        if node.left:
            self.dfs_l(node.left)
        elif node.right:
            self.dfs_l(node.right)
            
    def dfs_leaves(self, node):
        if not node:
            return
        
        if not node.left and not node.right:
            self.res.append(node.val)
        
        self.dfs_leaves(node.left)
        self.dfs_leaves(node.right)
        
        
    def dfs_r(self, node):
        if not node or (not node.left and not node.right):
            return 
        if node.right:
            self.dfs_r(node.right)
        elif node.left:
            self.dfs_r(node.left)
        self.res.append(node.val)
            
        
        
        
    
