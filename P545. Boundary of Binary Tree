
class Solution(object):
    def boundaryOfBinaryTree(self, root):
        
        if not root:
            return None
        if not root.left and not root.right:
            return [root.val]
        
        self.res = [root.val]
        self.l_dfs(root.left)
        self.leaves(root)
        self.r_dfs(root.right)
        return self.res
    
    def l_dfs(self, node):
        if not node or not node.left and not node.right:
            return 
        
        self.res.append(node.val)
        if node.left:
            self.l_dfs(node.left)
        elif node.right:
            self.l_dfs(node.right)
            
    def r_dfs(self, node):
        if not node or not node.left and not node.right:
            return 
        
        if node.right:
            self.r_dfs(node.right)
        elif node.left:
            self.r_dfs(node.left)
        self.res.append(node.val)
        
    def leaves(self, node):
        if not node:
            return 
        if not node.left and not node.right:
            self.res.append(node.val)
            
        self.leaves(node.left)
        self.leaves(node.right)
