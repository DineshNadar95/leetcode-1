# brute force:
# time 0(mn)
# space O(mn)  copy orig grid and keep track of new status for each cell



ideas:

# live -> dead -1
# dead -> live 2
# traverse twice and update

# time O(mn)
# space O(1)
class Solution(object):
    def gameOfLife(self, board):
        
        if not board or not board[0]:
            return board
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == 1: # live
                    count = self.count(board, i, j)
                    if count < 2 or count > 3:
                        board[i][j] = -1
                elif board[i][j] == 0:
                    count = self.count(board, i, j)
                    if count == 3:
                        board[i][j] = 2
                        
        self.update(board)
        return board
    
    def count(self, board, x, y):
        count = 0
        dirs = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, -1), (1, -1), (-1, 1)]
        
        for dx, dy in dirs:
            new_x = x + dx
            new_y = y + dy
            if 0 <= new_x < len(board) and 0 <= new_y < len(board[0]) and board[new_x][new_y] in [1, -1]:
                count += 1
        return count
    
    def update(self, board):
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == -1:
                    board[i][j] = 0
                elif board[i][j] == 2:
                    board[i][j] = 1
                
                        
       

 # 3 follow up:
 # In principle, the board is infinite, which would cause problems when the active area 
 # encroaches the border of the array. How would you address these problems?
 
 # In order for us to update a particular cell, we only have to look at its 8 neighbors 
 # which essentially lie in the row above and below it. 
 # So, for updating the cells of a row, we just need the row above and the row below. 
 # Thus, we read one row at a time from the file and at max we will have 3 rows in memory. 
 # We will keep discarding rows that are processed and then we will keep reading new rows from the file, one at a time.
 
 
