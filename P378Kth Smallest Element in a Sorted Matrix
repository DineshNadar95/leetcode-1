首先将矩阵的左上角（下标0,0）元素加入堆
然后执行k次循环：
弹出堆顶元素top，记其下标为i, j
将其下方元素matrix[i + 1][j]，与右方元素matrix[i][j + 1]加入堆（若它们没有加入过堆）

# time O(klgk)
# space O(k)
 缺点，当k -> n ^2, time complexity很大


from heapq import * 
class Solution(object):
    def kthSmallest(self, matrix, k):
        
        heap = []
        heappush(heap, (matrix[0][0], 0, 0))
        
        res = None
        for _ in range(k):
            val, x, y = heappop(heap)
            if x == 0 and y + 1 < len(matrix[0]):
                heappush(heap, (matrix[x][y + 1], x, y + 1))
            if x + 1 < len(matrix):
                heappush(heap, (matrix[x + 1][y], x + 1, y))
        return val
        
        
        
# binary search
# time O(Nlg(max - min))
二分过程查找区间中点 mid 在矩阵中的排名, 假设为 t , since the array is sorted, we can do it in O(N)
then find the count that <= mid, and smaller: largest value <= mid, lagest: smallest value > mid

# count the value that <= mid,
# start from the left bottom row compare with mid
# >, row -= 1
# <= col += 1, c += row + 1

若 c == k, return smaller
若 c > k, 区间变成 right = smaller
若 c < k, 区间变成 left = larger


class Solution(object):
    def kthSmallest(self, matrix, k):
        """
        :type matrix: List[List[int]]
        :type k: int
        :rtype: int
        """
        left = matrix[0][0]
        right = matrix[-1][-1]
        
        while left < right:
            mid = (left + right) // 2
            smaller = matrix[0][0]
            larger = matrix[-1][-1]
            count, smaller, larger = self.count_less_equal(matrix, mid, smaller, larger)
            
            if count == k:
                return smaller
            elif count < k:
                left = larger
            else:
                right = smaller
                
        return left
      
    
    def count_less_equal(self, matrix, mid, smaller, larger):
        count = 0
        row = len(matrix) - 1
        col = 0
        
        while row >= 0 and col < len(matrix[0]):
            if matrix[row][col] > mid:
                larger = min(larger, matrix[row][col])
                row -= 1
            else:
                smaller = max(smaller, matrix[row][col])
                count += row + 1
                col += 1
        return count, smaller, larger
                
                            
            

