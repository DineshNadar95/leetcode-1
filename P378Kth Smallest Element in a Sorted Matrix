首先将矩阵的左上角（下标0,0）元素加入堆
然后执行k次循环：
弹出堆顶元素top，记其下标为i, j
将其下方元素matrix[i + 1][j]，与右方元素matrix[i][j + 1]加入堆（若它们没有加入过堆）

# time O(klgk)
# space O(k)


class Solution:
    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        n = len(matrix)
        m = len(matrix[0])
        if m == 0 or n == 0:
            return None
        
        heapmin = [(matrix[0][0], 0, 0)]
        visited = set([])
        num = None
        
        for _ in range(k):
            num, x, y = heapq.heappop(heapmin)
            if x + 1 < n and (x + 1) * m + y not in visited:
                heapq.heappush(heapmin, (matrix[x + 1][y], x + 1, y))
                visited.add((x + 1) * m + y)
            if y + 1 < m and x * m + y + 1 not in visited:
                heapq.heappush(heapmin, (matrix[x][y + 1], x, y + 1))
                visited.add(x * m + y + 1)
        return num
