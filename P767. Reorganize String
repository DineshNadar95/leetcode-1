# counter 
# max counter * 2 - 1 > len(s)
# heap reorganize
# time O(nlgA) 
# space O(A)

# 可以用heap加速
# 每次选取次数最多的char去添加到新的res里面
# time O(nAlgA) -> O(nlgA)

from heapq import *
class Solution(object):
    def reorganizeString(self, S):
        
        n = len(S)
        counter = collections.Counter(S)
        if counter.most_common()[0][1] > n//2 + 1:
            return ''
        
        heap = [(-c, ele) for ele,c in counter.items()]
        heapify(heap)
        
        res = ''
        prev_c = 0
        prev_char = ''
        while heap:
            c, ele = heappop(heap)
            c += 1
            res = res + ele
            if prev_c < 0:
                heappush(heap, (prev_c, prev_char))
            prev_c = c
            prev_char = ele
        if len(res) == len(S):
            return res
        return ''
            
# greedy
# time O(nAlgA) A:size of alphebet
# space O(n)

将字母按照出现次数从大到小排序。
每次优先选择剩余次数最多，且与新字符串末尾字符串不重复的字符，排在末尾。
若某次选择无法找出这样的字符，则返回空串。
class Solution(object):
    def reorganizeString(self, S):
        """
        :type S: str
        :rtype: str
        """
        res = '#'
        count = collections.Counter(S)
        
        if count.most_common(1)[0][1] > (len(S) + 1) / 2:
            return ''
                    
        while True:
            stop = True
            for ele, c in count.most_common():
                
                if ele != res[-1]:
                    count[ele] -= 1
                    res += ele
                    if count[ele] == 0:
                        del count[ele]
                    stop = False
                    break
            if stop == True:
                break
        if len(res) == len(S) + 1:
            return res[1:]
        else:
            return ''


        
     
