# brute force method
# shuffle, copy 数组，每次取出一个不放回，知道copy为空
# time O(n^2)
# space O(n)

class Solution(object):

    def __init__(self, nums):
        
        self.nums = nums
        self.orig = list(nums)

    def reset(self):
        
        self.nums = self.orig
        self.orig = list(self.orig)
        return self.nums

    def shuffle(self):
        
        copy = list(self.nums)
        
        for i in range(len(self.nums)):
            index = random.randint(0, len(copy) - 1)
            self.nums[i] = copy[index]
            copy.remove(copy[index])
            
        return self.nums
        

# time O(n)
# space O(n)

Fisher-Yates algorithm
在每次迭代中，生成一个范围在当前下标到数组末尾元素下标之间的随机整数。
接下来，将当前元素和随机选出的下标所指的元素互相交换 - 这一步模拟了每次从 “帽子” 里面摸一个元素的过程，
其中选取下标范围的依据在于每个被摸出的元素都不可能再被摸出来了。


class Solution(object):

    def __init__(self, nums):
       
        self.nums = nums
        self.orig = list(nums)

    def reset(self):
        
        self.nums = self.orig
        self.orig = list(self.orig)
        return self.nums

    def shuffle(self):
        
        for i in range(len(self.nums)):
            rand_int = random.randint(i, len(self.nums) - 1)
            self.nums[i], self.nums[rand_int] = self.nums[rand_int], self.nums[i]
        return self.nums
