# brute force 遍历每一个数字，如果既不等于左边也不等于右边，则返回， 注意corner cases
time O(n)
class Solution(object):
    def singleNonDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 
        
        if len(nums) == 1:
            return nums[0]
        
        if nums[0] != nums[1]:
            return nums[0]
        
        for i in range(1, len(nums) - 1):
            if nums[i] != nums[i - 1] and nums[i] != nums[i + 1]:
                return nums[i]
        return nums[-1]
        
        
# 遍历数组，index increase by 2
# time O(lgn)
class Solution(object):
    def singleNonDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) == 1:
            return nums[0]
        
        for i in range(0, len(nums) - 1, 2):
            if nums[i] != nums[i + 1]:
                return nums[i]
        return nums[-1]
 
 # binary search 
 这个二分查找的思路很奇特。如果i是个偶数，如果nums[i] == nums[i + 1]，
 那么，说明那个单独出现的元素在i的右边；如果nums[i] != nums[i + 1]，那么说明单独出现的元素在i的左边。
 所以这个题其实考的lower_bound的写法。
 参考sol2, 如果没有single value, i 为偶数，则num[i] == num[i + 1]
 
 class Solution(object):
    def singleNonDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        N = len(nums)
        left, right = 0, N - 1 #[left, right]
        while (left < right):
            mid = left + (right - left) / 2
            if mid % 2 == 1: 
              mid -= 1
              # value is on the left 
            if nums[mid] != nums[mid + 1]:
                right = mid
              # value is on the right
            else:
                left = mid + 2
        return nums[left]

