
# idea: bfs travsesal, but we need to travse all the different paths to each point

# time O(m*n * max(m, n)), each points, max road length is max(m, n)
# space O(mn)

class Solution(object):
    def shortestDistance(self, maze, start, destination):
        
        q = collections.deque([])
        dis = collections.defaultdict(int)
        
        dis[(start[0], start[1])] = 0
        q.append((start[0], start[1], 0))
        
        while q:
            x, y, step = q.popleft()
            for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:
                new_x = x
                new_y = y
                new_s = step
                while 0 <= new_x + dx < len(maze) and 0 <= new_y + dy < len(maze[0]) and maze[new_x + dx][new_y + dy] == 0:
                    new_x += dx
                    new_y += dy
                    new_s += 1
                    
                if (new_x, new_y) not in dis or dis[(new_x, new_y)] > new_s:
                    dis[(new_x, new_y)] = new_s
                    if [new_x, new_y] != destination:
                        q.append((new_x, new_y, new_s))
                    
        return dis.get((destination[0], destination[1]), -1)
