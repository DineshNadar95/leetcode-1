
# 求最短路径的题目一般还是BFS比DFS靠谱
# idea: bfs travsesal, but we need to travse all the different paths to each point
# put point and steps into queue, while queue, pop out, try four directions, if x + dx and y + dy is 0, continue roll, else
stop, check the current step, put current point into visited, if the current is not destination, put into queue again

# time O(m*n * max(m, n)), each points, max road length is max(m, n)
# space O(mn)

class Solution(object):
    def shortestDistance(self, maze, start, destination):
        
        queue = collections.deque([(start[0], start[1], 0)]) # points that have been visited
        visited = collections.defaultdict(int)
        
        while queue:
            x, y, step = queue.popleft()
            for dx, dy in [(-1, 0), (1,0), (0, 1), (0, -1)]:
                new_x = x
                new_y = y
                d = step
                while 0 <= new_x + dx < len(maze) and 0 <= new_y + dy < len(maze[0]) and maze[new_x + dx][new_y + dy] == 0:
                    new_x += dx
                    new_y += dy
                    d += 1
                    
                if (new_x, new_y) not in visited or visited[(new_x, new_y)] > d:
                    visited[(new_x, new_y)] = d 
                    if [new_x, new_y] != destination:
                        queue.append((new_x, new_y, d))
                    
        return visited.get((destination[0], destination[1]), -1)
