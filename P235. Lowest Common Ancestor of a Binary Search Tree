1. recursion 
 time O(n), space O(n)

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        while root:
          # p q are in the left subtree
            if max(p.val, q.val) < root.val:
                return self.lowestCommonAncestor(root.left, p, q)
           # p q are in the right subtree
            elif min(p.val, q.val) > root.val:
                return self.lowestCommonAncestor(root.right, p, q)
           # p q in different subtree
            else:
                return root
2. iteration
 time O(n), space O(1)

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        pointer = root
        while pointer:
            if max(p.val, q.val) < pointer.val:
                pointer = pointer.left
            elif min(p.val, q.val) > pointer.val:
                pointer = pointer.right
            else:
                return pointer
  
