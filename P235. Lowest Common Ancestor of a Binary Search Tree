1. recursion 
 time O(n), space O(n)

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        if not root:
            return None
        
        if min(p.val, q.val) <= root.val <= max(p.val, q.val):
            return root
        
        if min(p.val, q.val) > root.val:
            return self.lowestCommonAncestor(root.right, p, q)
        
        if max(p.val, q.val) < root.val:
            return self.lowestCommonAncestor(root.left, p, q)
            
2. iteration
 time O(n), space O(1)

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        pointer = root
        while pointer:
            if max(p.val, q.val) < pointer.val:
                pointer = pointer.left
            elif min(p.val, q.val) > pointer.val:
                pointer = pointer.right
            else:
                return pointer
  
