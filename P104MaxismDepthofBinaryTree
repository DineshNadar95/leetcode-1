注意对比binary tree traverse and divide conquer 两种方法

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        
        # base case 
        if not root:
            return 0
        
        # if not base, recursively solve the bigger problem
        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1
        
 # method 2, traverse
 
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        self.depth = 0
        self.traverse(root, 1)
        return self.depth
    
    def traverse(self, current_node, current_depth):
        if not current_node:
            return
         # base case 
        self.depth = max(self.depth, current_depth)
        
        # not 
        self.traverse(current_node.left, current_depth + 1)
        self.traverse(current_node.right, current_depth + 1)
