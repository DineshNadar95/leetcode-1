注意对比binary tree traverse and divide conquer 两种方法

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        
        # base case 
        if not root:
            return 0
        
        # if not base, recursively solve the bigger problem
        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1
        
 # method 2, traverse
 
class Solution(object):
    def maxDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        self.res = 0
        self.dfs(root, 0)
        return self.res
    
    def dfs(self, node, cur_depth):
        if not node:
            self.res = max(cur_depth, self.res)
            return 
        
        self.dfs(node.left, cur_depth + 1)
        self.dfs(node.right, cur_depth + 1)
