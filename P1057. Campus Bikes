# 本质是排序问题

# 优化，桶排序，bucket sort
# since 0 <= workers[i][j], bikes[i][j] < 1000, max distance is 2000
# 每一个桶是distance, 桶里面的list是在这个distance下的(word, bike) index

# 算法
# 遍历 每一个distance
# 如果w,b未被分配，分配，count += 1, 如果分配完w, break并且return res


# m, len(worders)
# n, len(bikes)
# time O(mn)
# space O(m + n)

class Solution(object):
    def assignBikes(self, workers, bikes):
        
        dis = [[] for _ in range(2000)]
        m = len(workers)
        n = len(bikes)
        res = [-1 for _ in range(m)]
        bike_s = set()
        
        for i in range(m):
            for j in range(n):
                d = abs(workers[i][0] - bikes[j][0]) + abs(workers[i][1] - bikes[j][1])
                dis[d].append((i, j))
        
        for ls in dis:
            for w, b in ls:
                if res[w] == -1 and b not in bike_s:
                    res[w] = b
                    bike_s.add(b)
                    if len(bike_s) == m:
                        break
        return res
        
            
                



# brute force, sort
# time O(mn * lg mn)
# space O(mn)

class Solution(object):
    def assignBikes(self, workers, bikes):
        
        dis = []
        m = len(workers)
        n = len(bikes)
        res = [-1 for _ in range(m)]
        bike_s = set()
        
        for i in range(m):
            for j in range(n):
                d = abs(workers[i][0] - bikes[j][0]) + abs(workers[i][1] - bikes[j][1])
                dis.append([d, i, j])
        dis.sort()
        
        for dis, i, j in dis:
            if res[i] == -1 and j not in bike_s:
                res[i] = j
                bike_s.add(j)
                if len(bike_s) == m:
                    break
        return res
