# sol1 set
# time O(m) + O(n)
# space O(m) + O(n)

class Solution(object):
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        nums1 = set(nums1)
        nums2 = set(nums2)
        return list(nums1 & nums2)
        
# sol2 two pointers, this method can save space 
# time (O(nlgn) + O(mlogm)), search O(m + n): linear 
# space O(1)
class Solution(object):
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        nums1.sort()
        nums2.sort()
        
        i = j = 0
        res = []
        while i < len(nums1) and j < len(nums2):
            if nums1[i] < nums2[j]:
                i += 1
            elif nums1[i] > nums2[j]:
                j += 1
            else:
                if not res or (not nums1[i] == res[-1]):
                    res.append(nums1[i])
                i += 1
                j += 1
        return res
        
  1. follow up：如果数组一个长一个短怎么办。答：用二分搜索， mlog(n)
  小array ele m去二分搜索大array n
 def intersection(nums1, nums2):
    # len(nums1) < len(nums2)
    nums1.sort()
    nums2.sort()
    res = []
    
    for i in range(len(nums1)):
        ele = nums1[i]
        left = 0
        right = len(nums2)
        while left + 1 < right:
            middle = (left + right) // 2
            if nums2[middle] == ele and (not res or (res and res[-1] != ele)):
                res.append(ele)
            elif nums2[middle] < ele:
                left = middle + 1
            else:
                right = middle - 1
        if nums2[left] == ele and (not res or (res and res[-1] != ele)):
            res.append(ele)
        if nums2[right] == ele and (not res or (res and res[-1] != ele)):
            res.append(ele)
            
    return res
    
2. 再follow up： 如果两个数组一样长，且一会儿sparse一会dense怎么办。
可以在two pointer的扫描中内置一个切换二分搜索的机制，条件应该是什么
于是说如果找到了，一个元素，那就用这次的index作为下次binary search的开始。可以节约掉之前的东西，不用search了。
然后问，如果找不到呢，如何优化。
折腾了一会儿，说如果找不到，也返回上次search 结束的index，然后下次接着search。终于时间到了。
