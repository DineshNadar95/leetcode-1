# queue
# time O(n), space O(n)
class Solution(object):
    def connect(self, root):
        
        if not root:
            return None
        q = collections.deque([root])
        
        while q:
            n = len(q)
            cur = q.popleft()
            if cur.left:
                q.append(cur.left)
            if cur.right:
                q.append(cur.right)
            
            for _ in range(n - 1):
                node = q.popleft()
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
                cur.next = node
                cur = node
                
        return root
                
        

# iterative
# time O(n), space O(1)
idea:
一旦在某层的节点之间建立了 next 指针，那这层节点实际上形成了一个链表。基于该想法，提出降低空间复杂度的思路：
第 N 层节点之间建立 next 指针后，再建立第 N+1 层节点的 next 指针。
因为可以通过 next 指针访问同一层的所有节点，所以使用第 N 层的 next 指针可以为第 N+1 层节点建立 next 指针。

class Solution(object):
    def connect(self, root):
        
        if not root:
            return None
        
        parent = root
        child_pointer = ListNode(0)
        
        while parent:
            cur = parent
            cur_c = child_pointer
            
            while cur:
                if cur.left:
                    cur_c.next = cur.left
                    cur_c = cur_c.next
                
                if cur.right:
                    cur_c.next = cur.right
                    cur_c = cur_c.next
                
                cur = cur.next
            
            parent = child_pointer.next
            child_pointer.next = None
        return root
            
            
        
            
        
       
