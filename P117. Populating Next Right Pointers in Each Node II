# queue
# time O(n), space O(n)
class Solution(object):
    def connect(self, root):
        
        if not root:
            return None
        q = collections.deque([root])
        
        while q:
            n = len(q)
            cur = q.popleft()
            if cur.left:
                q.append(cur.left)
            if cur.right:
                q.append(cur.right)
            
            for _ in range(n - 1):
                node = q.popleft()
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
                cur.next = node
                cur = node
                
        return root
                
        
        

# iterative
# time O(n), space O(1)
class Solution(object):
    def connect(self, root):
        
        node = root 
        levelHead = Node(0)
        
        while node:  # loop for each level
            needle = levelHead
            
            while node:  # loop for current level
                if node.left:
                    
                    needle.next = node.left     # since needle and levelHead points to the same object. That means after needle.next = node.left. 
                    needle = needle.next        # Same for levelHead.next = node.left. 
                                                # this is how levelHead move to next level
                    
                    
                if node.right:
                    needle.next = node.right
                    needle = needle.next

                node = node.next
            
            node = levelHead.next       # this is key part. as said before, levelHead.next = node.left
            levelHead.next = None        # so that node moves to its upper level's leftmost node's left child. meaning the head of this next level
            
        return root
     
     
     
     
 class Solution(object):
    def connect(self, root):
        
        if not root:
            return None
        
        node = root
        level_head = Node(0)
        
        while node:
            needle = level_head
            
            while node:
                if node.left:
                    needle.next = node.left
                    needle = needle.next
                
                if node.right:
                    needle.next = node.right
                    needle = needle.next
                
                node = node.next
            node = level_head.next
            level_head.next = None
        return root
