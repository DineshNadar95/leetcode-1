# brute-force method time o(nlgn) space O(n), 思路：hash key: elemts, value: frequency

class Solution(object):
    def topKFrequent(self, words, k):
        
        # time O(n)
        count = collections.Counter(words)
        # space O(n)
        word = count.keys()
        
        # time O(nlgn)
        word.sort(key = lambda x : (-count[x], x))
        return word[:k]

# heap size(n)
# time O(n + klgn)
# space O(n)

from heapq import *
class Solution(object):
    def topKFrequent(self, words, k):
        """
        :type words: List[str]
        :type k: int
        :rtype: List[str]
        """
        count = collections.Counter(words)
        heap = [(-freq, word) for word, freq in count.items()]
        heapify(heap)
        res = []
        for _ in range(k):
            res.append(heappop(heap)[1])
        return res
        



                             
