class Solution(object):
    def shortestPathBinaryMatrix(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m = len(grid)
        n = len(grid[0])
        if len(grid) == 0 or len(grid[0]) == 0:
            return -1
        
        queue = collections.deque([(0, 0, 1)])
        visited = set([])
        visited.add((0, 0))
        while queue:
            x, y, step = queue.popleft()
            if x == m - 1 and y == n - 1:
                return step 
            for dx, dy in [(1, 0), (-1, 0), (0,1), (0, -1), (1, 1), (-1, -1), (1, -1), (-1, 1)]:
                new_x  = x + dx
                new_y = y + dy
                new_step = step + 1
                if 0 <= new_x < m and 0 <= new_y < n and grid[new_x][new_y] == 0 and (new_x, new_y) not in visited:
                    queue.append((new_x, new_y, new_step))
                    visited.add((new_x, new_y))
        return -1
