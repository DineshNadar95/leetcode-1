class Solution(object):
    def shortestPathBinaryMatrix(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        n = len(grid)
        if not grid[0][0] == 0 or not grid[n - 1][n - 1] == 0:
            return -1
        
        queue = collections.deque([])
        queue.append([0, 0, 1])
        visited = set([(0, 0)])
        while queue:
            x, y, step = queue.popleft()
            if x == n - 1 and y == n - 1:
                return step
            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]:
                i = x + dx
                j = y + dy
                if 0 <= i < n and 0 <= j < n and grid[i][j] == 0 and (i, j) not in visited:
                    queue.append((i, j, step + 1))
                    visited.add((i, j))
                
        return -1
            
