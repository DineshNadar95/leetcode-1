# dfs + memo (top down dp)
# Time complexity: O(n^3). Size of recursion tree can go up to n^2. The creation of the 'res' List takes n time.
# space complexity is also O(n ^ 3)

# memo: key: start index of substring, value: valid path

class Solution(object):
    def wordBreak(self, s, wordDict):
        
        self.words = set(wordDict)
        self.memo = {} # key, start index, value: valid paths
        return self.dfs(s, 0)
    
    def dfs(self, s, start):
        if start in self.memo:
            return self.memo[start]
        
        if start == len(s):
            self.memo[start] = []
            return []
        
        res = []
        for j in range(start + 1, len(s) + 1):
            if s[start : j] in self.words:
                if j == len(s):
                    res.append(s[start : j])
                else:
                    rests = self.dfs(s, j)
                    for rest in rests:
                        res.append(s[start : j] + ' ' + rest)
        self.memo[start] = res
        return res
        
# follow up  输出最小的分割次数
# time O(n^2)
# space O(n^2)

import sys
class Solution(object):
    def wordBreak(self, s, words):
        self.memo = {}
        self.words = words
        res = self.dfs(s, 0, len(s) - 1)
        if res != sys.maxsize:
            return res
        return -1
        
    def dfs(self, s, start, end):
        if (start, end) in self.memo:
            return self.memo[(start, end)]
        
        if s[start : end + 1] in self.words:
            self.memo[(start, end)] = 1
            return 1
        
        res = sys.maxsize
        for j in range(start + 1, end + 1):
            if s[start : j] in self.words:
                res = min(res, 1 + self.dfs(s, j, end))
        self.memo[(start, end)] = res
        return res
                          
                          

s = "pineapplepenapple"
dic =["apple", "pen", "applepen", "pine", "pineapple"]

test = Solution()
print(test.wordBreak(s, dic))

s2 = 'catsanddog'
dic2 = ['cat']
print(test.wordBreak(s2, dic2))
                                       
