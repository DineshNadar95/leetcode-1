# bfs
我们可以将 0000 到 9999 这 10000 状态看成图上的 10000 个节点，两个节点之间存在一条边，
那么最终的答案即为 0000 到 target 的最短路径。
从 0000 开始搜索。对于每一个状态，它可以扩展到最多 8 个状态，

# time O(v + e + d), (10000 + 10000 * 8 + d)
# space O(v + d)     (10000 + d)

class Solution(object):
    def openLock(self, deadends, target):
        
        if '0000' in deadends:
            return -1
    
        deads = set(deadends)
        seen = set()
        q = collections.deque([('0000', 0)])
        seen.add('0000')
        
        while q:
            node, step = q.popleft()
            if node in deads:
                continue
            if node == target:
                return step
            
            for nb in self.get_neighbors(node):
                nb = str(nb)
                if nb not in seen:
                    q.append([nb, step + 1])
                    seen.add(nb)
        return -1      
                
    def get_neighbors(self, node):
        nbs = []
        for i in range(4):
            cur_d = int(node[i])
            nbs.append(node[:i] + str((cur_d + 1) % 10) + node[i + 1:])
            nbs.append(node[:i] + str((cur_d - 1) % 10) + node[i + 1:])
        return nbs





