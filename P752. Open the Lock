# bfs
我们可以将 0000 到 9999 这 10000 状态看成图上的 10000 个节点，两个节点之间存在一条边，
那么最终的答案即为 0000 到 target 的最短路径。
从 0000 开始搜索。对于每一个状态，它可以扩展到最多 8 个状态，

# time O(v + e + d), (10000 + 10000 * 8 + d)
# space O(v + d)     (10000 + d)

class Solution(object):
    def openLock(self, deadends, target):
        
        if '0000' in deadends:
            return -1
        
        seen = set()
        q = collections.deque([('0000', 0)])
        seen.add('0000')
        self.deads = set(deadends)
        

        while q:
            cur_num, step = q.popleft()
            if cur_num == target:
                return step
            for nb in self.get_nbs(cur_num):
                if nb not in seen:
                    seen.add(nb)
                    q.append([nb, step + 1])
        return -1
                    

    def get_nbs(self, s):
        nbs = []
        for i, char in enumerate(s):
            new_nb1 = s[:i] + str((int(char) + 1) % 10) + s[i + 1:]
            new_nb2 = s[:i] + str((int(char) - 1) % 10) + s[i + 1:]
            if new_nb1 not in self.deads:
                nbs.append(new_nb1)
            if new_nb2 not in self.deads:
                nbs.append(new_nb2)
        return nbs
        
