     
  # time O(max(m,n), space O(max(m,n))  ï¼ˆwe need O(n) to hold our res)
   Let's consider the numbers bit by bit starting from the lowest one and compute the carry this bit will add.
   
class Solution:
    def addBinary(self, a: str, b: str) -> str:
        m = len(a)
        n = len(b)
        
        if m > n:
            b = '0' * (m - n) + b
        elif m < n:
            a = '0' * (n - m) + a
            
        res = ''
        carry = 0
        for i in range(max(m, n) - 1, -1, -1):
            add = int(a[i]) + int(b[i]) + int(carry)
            if add >= 2:
                carry = 1
                add -= 2
            else:
                carry = 0
            res = str(add) + res
            
        if carry:
            res = str(carry) + res
        return res
        
 # recursion
# time O(min(m,n)*min(m,n)) since we have to copy each string at each function call
# space same O(min(m,n)

class Solution(object):
    def addBinary(self, a, b):
        """
        :type a: str
        :type b: str
        :rtype: str
        """
        if len(a) == 0:
            return b
        if len(b) == 0:
            return a
        if a[-1] == '1' and b[-1] == '1':
            return self.addBinary(self.addBinary(a[:-1], b[:-1]), '1') + '0'
        elif a[-1] == '0' and b[-1] == '0':
            return self.addBinary(a[:-1], b[:-1]) + '0'
        else:
            return self.addBinary(a[:-1], b[:-1]) + '1'
            
            
            
            
        
        
        
