# sol1 two pointers (TLE)
# time O(n^2)
# space O(1)
# idea: two pointer + prefixt sum, if num == 0, sum += -1, until sum == 0

class Solution(object):
    def findMaxLength(self, nums):
        
        res = 0
        for i in range(len(nums) - 1):
            cur_sum = 0
            for j in range(i, len(nums)):
                if nums[j] == 0:
                    cur_sum += -1
                else:
                    cur_sum += 1
                    
                if cur_sum == 0: 
                    res = max(res, j - i + 1)
        return res

# sol2 hash table
# time O(n)
# space O(n)

# idea: hash table, key: prefix_sum, value: first appear index
# find continuous subarray sum is 0 == two prefix sum is the same
class Solution(object):
    def findMaxLength(self, nums):
       
        dic = {0: -1}
        pre_sum = 0
        ans = 0
        for i, num in enumerate(nums):
            if num == 0:
                pre_sum -= 1
            else:
                pre_sum += 1
            
            if pre_sum not in dic:
                dic[pre_sum] = i
            else: # i + 1, j : j - i - 1 + 1
                ans = max(ans, i - dic[pre_sum])
        return ans

