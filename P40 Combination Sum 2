# step1 : sort candidates list
# step2 : do dfs
# step3 :注意，remove duplidate; if candidates[i] > target, break 省时间

class Solution(object):
    def combinationSum2(self, candidates, target):
        
        if not candidates:
            return []
            
        candidates.sort()
        
        self.res = []
        self.dfs(candidates, target,  0, 0, [])
        return self.res
    
    def dfs(self, candidates, target, cur_sum, index, cur_path):
        if target == cur_sum:
            self.res.append(cur_path)
            return 
        
        if target < cur_sum:
            return 
        
        for i in range(index, len(candidates)):
              # 注意1， remove duplicate
            if i > index and candidates[i] == candidates[i - 1]:
                continue
              # 注意2， 省时间提前break
            #if candidates[i] > target:
                #break
            else:
                self.dfs(candidates, target, cur_sum + candidates[i], i + 1, cur_path + [candidates[i]] )
