# step1 : sort candidates list
# step2 : do dfs
# step3 :注意，remove duplidate

# time O(n * 2 ^ n)

class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        self.res = []
        candidates.sort()
        self.dfs(candidates, 0, 0, target, [])
        return self.res
    
    def dfs(self, nums, cur_index, cur_sum, target, cur_path):
        if cur_sum == target:
            self.res.append(cur_path[:])
            return 
        
        if cur_sum > target:
            return 
        
        for i in range(cur_index, len(nums)):
            if i > cur_index and nums[i] == nums[i - 1]:
                continue
            self.dfs(nums, i + 1, cur_sum + nums[i], target, cur_path + [nums[i]])
