class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        result = []
        self.dfs(candidates, 0, [], result, target)
        return result
    
    def dfs(self, nums, start, path, result, target):
        if not target:
            result.append(path)
            
        # Very important here! We don't use `i > 0` because we always want 
        # to count the first element in this recursive step even if it is the same 
        # as one before. To avoid overcounting, we just ignore the duplicates
        # after the first element.
        for i in range(start, len(nums)):
            if i > start and nums[i] == nums[i - 1]:
                continue
        
        # If the current element is bigger than the assigned target, there is 
        # no need to keep searching, since all the numbers are positive
            if nums[i] > target:
                break
            
        # We change the start to `i + 1` because one element only could
        # be used once
            self.dfs(nums, i + 1, path + [nums[i]], result, target - nums[i])
