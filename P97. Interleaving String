# dp (m + 1) * (n + 1) , dp[i][j], if first i chars in s1, first j chars in s2 can interleaving form first i + j chars in s3
# True/False
# transmation formula dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i + j - 1] or dp[i][j - 1] and s2[j - 1] == s3[i + j - 1]
# dp[i][j] comes from first i - 1 in s1, first j in s2, and s1[i - 1] == s3[i + j - 1]
or first i in s1, first j - 1 in s2 and s2[j - 1] == s3[i + j - 1]

# time O(m*n)
# space O(m * n)

# dp[0][0] = True

class Solution(object):
    def isInterleave(self, s1, s2, s3):
        if len(s1) + len(s2) != len(s3):
            return False
        
        m = len(s1)
        n = len(s2)
        dp = [[False for _ in range(n + 1)] for _ in range(m + 1)]
        dp[0][0] = True
        
        for j in range(1, n + 1):
            dp[0][j] = dp[0][j -1] and s3[j - 1] == s2[j - 1]
        
        for i in range(1, m + 1):
            dp[i][0] = dp[i - 1][0] and s3[i - 1] == s1[i - 1]
            
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i + j - 1] or dp[i][j - 1] and s2[j - 1] == s3[i + j - 1]
                
        return dp[-1][-1]
