# burte foce , emurate all kinds of candidates
# time O(n^2 * k)
# space O(n^2 * k)

class Solution(object):
    def palindromePairs(self, words):
       
        pairs = []

        for i, word_1 in enumerate(words):
            for j, word_2 in enumerate(words):
                if i == j:
                    continue
                combined_word = word_1 + word_2
                if combined_word == combined_word[::-1]:
                    pairs.append([i, j])

        return pairs

# sol2 
# time O(n * k^2)
# space O((n + k) ^ 2)
# resverse = n * k
# res O(n ^ 2) 

对于示例1的一个单词 lls，如何找其他单词把它拼成回文串。
两种方式，一种是在左边加，比如有个单词s，那么可以拼车 slls；一种右边加，单词为sssll，拼成 llssssll
由上面简单想法，可以把单词分成两部分考虑，看代码很好理解！

class Solution(object):
    def palindromePairs(self, words):
        
        palid_str = [] # store index
        reverse = {}
        
        for i, word in enumerate(words):
            reverse[word[::-1]] = i
            if word[::-1] == word:
                palid_str.append(i)
                
                
        # iterate each words
        res = []
        for idx, word in enumerate(words):
            if word:
                for i in range(len(word)):
                    l = word[:i]
                    r = word[i:]
                
                    # add before l
                    if l == l[::-1] and r in reverse and reverse[r] != idx:
                        res.append([reverse[r], idx])
                    
                    # add after r
                    if r == r[::-1] and l in reverse and reverse[l] != idx:
                        res.append([idx, reverse[l]])
            else:
                for j in palid_str:
                    if j != idx:
                        res.append([idx, j])
        return res
            
