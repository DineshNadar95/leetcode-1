## DFS
## time O(n)
## space O(h)

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def invertTree(self, root: TreeNode) -> TreeNode:
        if not root:
            return None
        self.invertTree(root.left)
        self.invertTree(root.right)
        root.left, root.right = root.right, root.left
        return root

# bfs time O(n), space O(n)
class Solution:
    def invertTree(self, root: TreeNode) -> TreeNode:
        if not root:
            return 
        queue = collections.deque([root])
        while queue:
            node = queue.popleft()
            temp = node.left
            node.left = node.right
            node.right = temp
            
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        return root
            
