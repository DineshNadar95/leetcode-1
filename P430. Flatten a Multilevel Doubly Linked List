# dfs, 把child 看作左子树，把next看作右子树，pre-order travsesal
# time O(n)
# space O(n)

class Solution(object):
    def flatten(self, head):
        
        if not head:
            return None
        
        dummy = Node(0, None, head, None)
        self.dfs(dummy, head)
        head.prev = None
        return dummy.next
    
    def dfs(self, prev, cur): # return tail
        if not cur:
            return prev
        
        prev.next = cur
        cur.prev = prev
        
        # call for child
        tmp_next = cur.next
        tail_child = self.dfs(cur, cur.child)
        cur.child = None
        return self.dfs(tail_child, tmp_next) # call for next
        
        
        
# stack 
# time O(n)
# space O(n)

"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""
class Solution(object):
    def flatten(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        
        if not head:
            return 
        
        dummy = Node(0, None, head, None)
        stack = [head]
        prev = dummy
        while stack:
            node = stack.pop()
            
            node.prev = prev
            prev.next = node
            
            if node.next:
                stack.append(node.next)
            if node.child:
                stack.append(node.child)
                node.child = None
                
            prev = node
            
        dummy.next.prev = None # 断开dummy
        return dummy.next
        
            
