# brute force O(n)
# two pass
# one pass find total number of nodes
# second pass remove n - k + 1 the node
# need to add dummy node, to take care of [1], 1 situation
class Solution(object):
    def removeNthFromEnd(self, head, n):
        dummy = ListNode(0)
        dummy.next = head
        
        c = 0
        cur = head
        while cur:
            c += 1
            cur = cur.next
            
        m = c - n
        c2 = m
    
        cur2 = dummy
        while c2 > 0:
            c2 -= 1
            cur2 = cur2.next
        cur2.next = cur2.next.next
        return dummy.next

# optimal method
# two pointers
# move fast to n steps, then move fast and slow together until fast to the end, 
# fast: m steps (m total num of node)
# slow: m - n steps slow.next is the node that we should delete.

class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        dummy = ListNode(0)
        dummy.next = head
        
        fast = dummy
        slow = dummy
        
        for i in range(0, n):
            fast = fast.next
        while fast.next:
            fast = fast.next
            slow = slow.next
        slow.next = slow.next.next
        return dummy.next
        
