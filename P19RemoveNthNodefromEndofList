# brute force O(n)
# two pass
# one pass find total number of nodes
# second pass remove n - k + 1 the node
# need to add dummy node, to take care of [1], 1 situation

class Solution(object):
    def removeNthFromEnd(self, head, n):
        
        # count all nodes c, remove c + 1 - n from begin
        # go to c - n, remove
        
        c = 0
        cur = head
        while cur:
            c += 1
            cur = cur.next
            
        n = c + 1 - n
        
        i = 0
        dummy = ListNode(0)
        dummy.next = head
        cur = dummy
        
        
        while i < n - 1: # go to n - 1
            cur = cur.next
            i += 1
        
        cur.next = cur.next.next
        return dummy.next
        
           
            
# optimal method
# two pointers
# move fast to n steps, then move fast and slow together until fast to the end, 
        #   remove n from the end, means remove m - n + 1 from begin
        #   need to find m - n th node by moving from dummy move m - n steps
        
        # fast move n steps
        # fast and slow move together until the tail (slow move m - n)
        

class Solution(object):
    def removeNthFromEnd(self, head, n):
        
        dummy = ListNode(0)
        dummy.next = head
        
        fast = slow = dummy
        for _ in range(n):
            fast = fast.next
            
        while fast.next:
            fast = fast.next
            slow = slow.next 
            
        slow.next = slow.next.next
        return dummy.next
        
