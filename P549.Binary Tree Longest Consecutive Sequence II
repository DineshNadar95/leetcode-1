# dfs
# time O(n)
# space O(n)

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def longestConsecutive(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
         
        if not root:
            return 0
        
        self.res = -sys.maxsize
        self.dfs(root)
        return self.res 
    
    def dfs(self, node):
        if not node:
            return [0, 0]
        
        inc = 1
        dec = 1
        
        left_inc, left_dec = self.dfs(node.left)
        right_inc, right_dec = self.dfs(node.right)
        
        if node.left:
            if node.left.val + 1 == node.val:
                dec = max(dec, left_dec + 1)
            elif node.left.val - 1 == node.val:
                inc = max(inc, left_inc + 1)
                
        if node.right:
            if node.right.val + 1 == node.val:
                dec = max(dec, right_dec + 1)
            elif node.right.val - 1 == node.val:
                inc = max(inc, right_inc + 1)
                
        self.res = max(self.res, (inc + dec - 1))
        return [inc, dec]
        
