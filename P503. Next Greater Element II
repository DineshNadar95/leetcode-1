# time O(n)
# space O(n)
# stack 和496思路类似

# expand num by 2 times
# iterate from right most point
# if cur_num >= top in the stack, pop stack

class Solution(object):
    def nextGreaterElements(self, nums):
        
        if not nums:
            return []
        
        stack = []
        m = len(nums)
        n2 = nums + nums
        n = len(n2)
        res = [-1 for _ in range(n)]
        
        
        for i in range(n - 1, -1, -1):
            num = n2[i]
            while stack and stack[-1] <= num:
                stack.pop()
                
            if not stack:
                res[i] = -1
            else:
                res[i] = stack[-1]
                
            stack.append(num)
            
        return res[:m]
                
            
            
            

        
        
# brute force 
# time O(n^2)
# space O(n)

class Solution(object):
    def nextGreaterElements(self, nums):
        
        new_num = nums + nums
        n = len(nums)
        res = []
        
        for i in range(len(nums)):
            cur_num = nums[i]
            j = i
            for j in range(i, i + n): # 1, n - 1
                if new_num[j] > cur_num:
                    res.append(new_num[j])
                    break
            if j == i + n - 1 and new_num[j] <= cur_num:
                res.append(-1)
        return res
        
        
 # twice pass
 Loop once, we can get the Next Greater Number of a normal array.
Loop twice, we can get the Next Greater Number of a circular array


            
           
