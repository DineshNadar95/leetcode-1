# brute force 
# time O(n^2)
# space O(n)

class Solution(object):
    def nextGreaterElements(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        res = [-1] * len(nums)
        for i in range(len(nums)):
            for j in range(i + 1, i + len(nums)):
                if nums[j % len(nums)] > nums[i]:
                    res[i] = nums[j % len(nums)]
                    break
        return res
        
 # twice pass
 Loop once, we can get the Next Greater Number of a normal array.
Loop twice, we can get the Next Greater Number of a circular array

# time O(n)
# space O(n)
class Solution(object):
    def nextGreaterElements(self, nums):
        
        n = len(nums)
        stack = []
        res = [-1] * n
        
        for i in range(2 * n):
            while stack and nums[stack[-1]] < nums[i % n]:
                res[stack.pop()] = nums[i % n]
            stack.append(i % n)
        return res
            
           
