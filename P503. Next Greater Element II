# brute force 
# time O(n^2)
# space O(n)

class Solution(object):
    def nextGreaterElements(self, nums):
        
        new_num = nums + nums
        n = len(nums)
        res = []
        
        for i in range(len(nums)):
            cur_num = nums[i]
            j = i
            for j in range(i, i + n): # 1, n - 1
                if new_num[j] > cur_num:
                    res.append(new_num[j])
                    break
            if j == i + n - 1 and new_num[j] <= cur_num:
                res.append(-1)
        return res
        
        
 # twice pass
 Loop once, we can get the Next Greater Number of a normal array.
Loop twice, we can get the Next Greater Number of a circular array

# time O(n)
# space O(n)
class Solution(object):
    def nextGreaterElements(self, nums):
        
        n = len(nums)
        stack = []
        res = [-1] * n
        
        for i in range(2 * n):
            while stack and nums[stack[-1]] < nums[i % n]:
                res[stack.pop()] = nums[i % n]
            stack.append(i % n)
        return res
            
           
