# greedy + hashtable key: digit in num, value: last index
# time O(n)
# space O(1)

# At each digit, if there is a larger digit that occurs later, 
# we want the swap it with the largest such digit that occurs the latest.

class Solution(object):
    def maximumSwap(self, num):
        
        nums = [int(x) for x in str(num)]
        dic = {}
        for i, digit in enumerate(nums):
            dic[digit] = i
        
        for i, d in enumerate(nums):
            for digit in range(9, d, -1):
                if dic.get(digit, -1) > i:
                    nums[dic[digit]], nums[i] = nums[i], nums[dic[digit]]
                    s = ''
                    for n in nums:
                        s += str(n)
                    return int(s)
        return num
                
