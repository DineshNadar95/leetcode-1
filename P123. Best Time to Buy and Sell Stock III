# dp
只允许做两次交易，这道题就比前两道要难多了。解法很巧妙，有点动态规划的意思：开辟两个数组dp1和dp2，
dp1[i]表示在max profit for current day i that transaction complete before or on day i
dp2[i]表示在max profit for current day i that transaction complete after or on day i

dp1[i]+dp2[i]的最大值就是所要求的最大值

class Solution(object):
    def maxProfit(self, prices):
        
        if not prices:
            return 0
        n = len(prices)
        
        dp1 = [0 for _ in range(n)]
        dp2 = [0 for _ in range(n)]
        
        min_price = prices[0]
        max_profit1 = -sys.maxsize
        
        for i in range(1, n):
            min_price = min(prices[i], min_price)
            max_profit1 = max(max_profit1, prices[i] - min_price)
            dp1[i] = max_profit1
            
        
        max_price = prices[-1]
        max_profit2 = -sys.maxsize
        
        for j in range(n - 2, -1, -1):
            max_price = max(prices[j], max_price)
            max_profit2 = max(max_profit2, max_price - prices[j])
            dp2[j] = max_profit2

        
        res = 0
        for i in range(n):
            res = max(res, dp1[i] + dp2[i])
        return res
