# idea: 无向图寻找联通快
# step: 构建图，对每个点dfs, triger dfs的个数(类似num of islands)
# time O(n ^ 2) (O(v + e))
# space O(n)

class Solution(object):
    def countComponents(self, n, edges):
        
        # build graph {node : nbs}
        # iterative each node, not visited, triger dfs, res  + 1
        # return res
        
        self.graph = {i : [] for i in range(n)}
        for x, y in edges:
            self.graph[x].append(y)
            self.graph[y].append(x)
            
        self.visited = set()
        res = 0
        for node in range(n):
            if node not in self.visited:
                self.dfs(node)
                res += 1
        return res 
    
    def dfs(self, node):
        self.visited.add(node)
        for nb in self.graph[node]:
            if nb not in self.visited:
                self.dfs(nb)
                
        
