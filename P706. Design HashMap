- idea: The key problems are
	1) hash function design 
The purpose of hash function is to map a key to an address in the storage space 
	2) collision handling 
	
	Modulo + Array
1.	Use modulo as hash function, to reduce potential collisions, we can use a prime number as the base of modulo, e.g.  2069
Storage space is array, each element is indexed with the output value of hash function 

Bucket to hold collision values. We can use LinkedList or Array

Steps: 1) key -> calculate hash key -> find address in storage
	      2) iterate through the bucket to check if (key, value) pair does exist


# time O(N/K), N: number of possible keys, K, number of buckets
# space O(K + M), M: number of unique keys, K: number of buckets

class Bucket(object):
    def __init__(self):
        self.bucket = []
        
    def put(self, key, value):
        
        exist = False
        for i, item in enumerate(self.bucket):
            if item[0] == key:
                self.bucket[i][1] = value
                exist = True
                break
        if not exist:
            self.bucket.append([key, value])
        
    def get(self, key):
        for i, item in enumerate(self.bucket):
            if item[0] == key:
                return self.bucket[i][1]
        return -1
    
    def remove(self, key):
        for i, item in enumerate(self.bucket):
            if item[0] == key:
                del self.bucket[i]
                #self.bucket.remove(item)
        
        
class MyHashMap(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.hash_table = [Bucket() for _ in range(self.size)]
        self.size = 2069
        
    def put(self, key, value):
        """
        value will always be non-negative.
        :type key: int
        :type value: int
        :rtype: None
        """
        hash_key = key % self.size
        bucket = self.hash_table[hash_key]
        bucket.put(key, value)
        

    def get(self, key):
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        :type key: int
        :rtype: int
        """
        hash_key = key % self.size
        bucket = self.hash_table[hash_key]
        return bucket.get(key)

    def remove(self, key):
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        :type key: int
        :rtype: None
        """
        
        hash_key = key % self.size
        bucket = self.hash_table[hash_key]
        return bucket.remove(key)

    
