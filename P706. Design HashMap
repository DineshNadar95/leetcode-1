- idea: The key problems are
	1) hash function design 
The purpose of hash function is to map a key to an address in the storage space 
	2) collision handling 
	
	Modulo + Array
1.	Use modulo as hash function, to reduce potential collisions, we can use a prime number as the base of modulo, e.g.  2069
Storage space is array, each element is indexed with the output value of hash function 

Bucket to hold collision values. We can use LinkedList or Array

Steps: 1) key -> calculate hash key -> find address in storage
	      2) iterate through the bucket to check if (key, value) pair does exist


# time O(N/K), N: number of possible keys, K, number of buckets
# space O(K + M), M: number of unique keys, K: number of buckets

class Bucket(object):
    def __init__(self):
        self.bucket = []
        
    def put(self, key, value):
        exist = False
        for i, (k, v) in enumerate(self.bucket):
            if key == k:
                self.bucket[i][1] = value
                exist = True
                break
        if not exist:
            self.bucket.append([key, value])
        
        
    def get(self, key):
        for i, (k, v) in enumerate(self.bucket):
            if k == key:
                return self.bucket[i][1]
        return -1
        
    def remove(self, key):
        for i, (k, v) in enumerate(self.bucket):
            if key == k:
                self.bucket.remove([k, v])
                

class MyHashMap(object):

    def __init__(self):
        
        self.space = 2069
        self.hash_t = [Bucket() for _ in range(self.space)]

    def put(self, key, value):
        
        hash_key = key % self.space
        bucket = self.hash_t[hash_key]
        bucket.put(key, value)

    def get(self, key):
        
        hash_key = key % self.space
        bucket = self.hash_t[hash_key]
        return bucket.get(key)

    def remove(self, key):
        
        hash_key = key % self.space
        bucket = self.hash_t[hash_key]
        bucket.remove(key)
