# 二分法的模版
# 先判断mid在左半段还是右半段,通过middle和left. right的关系判断
# 在判断target在左半段还是右半段
# time O(lgn)
# space O(1)

class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        if not nums:
            return -1
        
        l = 0
        r = len(nums) - 1
        while l + 1 < r:
            m = (l + r) // 2
        
            if nums[m] > nums[l]: # l to m is increasing
                if nums[l] <= target <= nums[m]:
                    r = m
                else:
                    l = m
            else:
                if nums[m] <= target <= nums[r]: # m to r is increasing
                    l = m
                else:
                    r = m
                    
        if nums[l] == target:
            return l
        elif nums[r] == target:
            return r
        return -1
        
 
class Solution(object):
    def search(self, nums, target):
        
        if not nums:
            return -1
        

        l = 0
        r = len(nums) - 1
        
        while l + 1 < r:
            m = (l + r) // 2
            if target == nums[m]:
                return m
            if target == nums[l]:
                return l
            if target == nums[r]:
                return r
            
            if nums[m] > nums[l]: # left half
                if nums[l] < target < nums[m]:
                    r = m - 1
                else:
                    l = m + 1
            else: # right half
                if nums[m] < target < nums[r]:
                    l = m + 1
                else:
                    r = m - 1
        
        if target == nums[l]:
            return l
        elif target == nums[r]:
            return r
        return -1
                
        
            
                    
                
                
        
