# dfs
# time m * n^n
# space O(n)

class Solution(object):
    def findAllConcatenatedWordsInADict(self, words):
        """
        :type words: List[str]
        :rtype: List[str]
        """
        words = set(words)
        
        def isConcad(word):
            for i in range(1, len(word)):
                if word[:i] in words and (word[i:] in words or isConcad(word[i:])):                 
                                          return True
            return False
                                          
        return [word for word in words if isConcad(word)]    
        

class Solution(object):
   
    def findAllConcatenatedWordsInADict(self, words):
       
        s = set(words)
        
        memo = {}
        def isConcatenatedWord(w):
            if w in memo: return memo[w]
            
            for i in range(1, len(w)):
                if w[:i] not in s: continue
                
                r = w[i:]
                if r in s or isConcatenatedWord(r):
                    memo[w] = True
                    return True
                
            memo[w] = False
            return False
        
        return filter(isConcatenatedWord, words)
