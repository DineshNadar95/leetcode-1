# idea: dfs, 根据题意进行recursion
# time O(mn)
# space O(mn)
# node '='

class Solution(object):
    def updateBoard(self, board, click):
        
        self.dfs(board, click[0], click[1])
        return board
    
    def dfs(self, board, x, y):
        if board[x][y] == 'M':
            board[x][y] = 'X'
        
        elif board[x][y] == 'E':
            adj = []
            count = 0
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, 1), (1, -1), (-1, -1), (1, 1)]:
                new_x = x + dx
                new_y = y + dy
                if 0 <= new_x < len(board) and 0 <= new_y < len(board[0]):
                    if board[new_x][new_y] == 'E':
                        adj.append([new_x, new_y])
                    elif board[new_x][new_y] == 'M':
                        count += 1
                        
            if count == 0:
                board[x][y] = 'B'
                for nb in adj:
                    self.dfs(board, nb[0], nb[1])
            else:
                board[x][y] = str(count)
                
