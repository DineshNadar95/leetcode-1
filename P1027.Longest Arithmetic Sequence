# dp 
# dp[diff][idx]表示等差为diff，以系数idx结尾的最长子序列长度。
# time O(n^2)
# space O(n^2)

class Solution(object):
    def longestArithSeqLength(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        # state: dp[i] = longestArithSeqLength for A[:i] (i: 3, len(A))
        
        dp = {}
        for i in range(len(A)):
            for j in range(i + 1, len(A)):
                dp[j, A[j] - A[i]] = dp.get((i, A[j] - A[i]), 1) + 1
        return max(dp.values())

# follow up
# print one sequence 
import collections
class Solution(object):
    def longestArithSeqLength(self, A):
        
        # dp[i][j] i : diff, j index
        
        dp = collections.defaultdict(int)
        l = collections.defaultdict(list) # key : diff, value : sequence
        
        for i in range(len(A)):
            for j in range(i + 1, len(A)):
                diff = A[j] - A[i]
                dp[(diff, j)] = dp.get((diff, i), 1) + 1
                if not l[diff]:
                    l[diff].append(A[i])
                    l[diff].append(A[j])
                else:
                    l[diff].append(A[j])
        
        max_diff = max(dp.values())
        return l[max_diff]

    
A = [9,4,7,2,10]
test = Solution()
print(test.longestArithSeqLength(A))
