# inorder traversal, BST 非减序列

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def kthSmallest(self, root: TreeNode, k: int) -> int:
        value = []
        self.dfs(root, value)
        return value[k - 1]
    
    def dfs(self, node, value):
        if not node:
            return 
        
        self.dfs(node.left, value)
        value.append(node.val)
        self.dfs(node.right, value)


## 非递归实现中序遍历，防止stack overflow

# follow up
# 在 TreeNode 中增加一个 counter，代表整个树的节点个数
#在增删查改的过程中记录不断更新受影响节点的 counter
#在 kthSmallest 的实现中用类似 Quick Select 的算法去找到 kth smallest element 时间复杂度为 O(h)，h 为树的高度。

