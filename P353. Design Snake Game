# keep track of snake path
# move head to new
# check boundry and new in snake (new can be in the tail)


# node: new head can be the loc of tail



class SnakeGame(object):

    def __init__(self, width, height, food):
        self.w = width
        self.h = height
        self.food = collections.deque(food)
        self.cur_food = []
        if self.food:
            self.cur_food = self.food.popleft()
        self.snake = collections.deque([(0, 0)])
        self.score = 0

    def move(self, direction):
        cur_head = self.snake[-1]
        if direction == 'R':
            new_head = [cur_head[0], cur_head[1] + 1]
        elif direction == 'L':
            new_head = [cur_head[0] , cur_head[1] - 1]
        elif direction == 'U':
            new_head = [cur_head[0] - 1, cur_head[1]]
        else:
            new_head = [cur_head[0] + 1, cur_head[1]]
            
        # check if hit boundry
        if new_head[0] < 0 or new_head[0] >= self.h or new_head[1] < 0 or new_head[1] >= self.w:
            return -1
	
	# check hit itself
        if new_head in self.snake and new_head != self.snake[0]:
            return -1
        
	# eat food, don't need to pop tail
        if new_head == self.cur_food:
            self.score += 1
            self.snake.append(new_head)
            
            if self.food:
                self.cur_food = self.food.popleft()
            else:
                self.cur_food = []
        else:
            self.snake.append(new_head)
            self.snake.popleft()
	    
	return self.score
            
