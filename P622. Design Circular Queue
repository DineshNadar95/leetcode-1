# 用array实现
# no need to remove element from the front
# keep front, rear pointer
# all the time complexity for each method is O(1)

class MyCircularQueue(object):

    def __init__(self, k):
        self.k = k
        self.arr = [None for _ in range(k)]
        self.front = 0
        self.rear = 0

    def enQueue(self, value):
        if not self.isFull():
            self.arr[self.rear] = value
            self.rear = (self.rear + 1) % self.k
            return True
            
        return False
        

    def deQueue(self):
        if not self.isEmpty():
            self.arr[self.front] = None
            self.front = (self.front + 1) % self.k
            return True
        return False
        

    def Front(self):
        
        if not self.isEmpty():
            return self.arr[self.front]
        return -1

    def Rear(self):
        if not self.isEmpty():
            return self.arr[self.rear - 1]
        return -1

    def isEmpty(self):
        return self.front == self.rear and self.arr[self.front] == None

    def isFull(self):
        return self.front == self.rear and self.arr[self.front] != None
            
       



class MyCircularQueue(object):

    def __init__(self, k):
        """
        Initialize your data structure here. Set the size of the queue to be k.
        :type k: int
        """
        self.queue = []
        self.size = 0
        self.capacity = k

    def enQueue(self, value):
        """
        Insert an element into the circular queue. Return true if the operation is successful.
        :type value: int
        :rtype: bool
        """
        if not self.isFull():
            self.queue.append(value)
            self.size += 1
            return True
        return False
        

    def deQueue(self):
        """
        Delete an element from the circular queue. Return true if the operation is successful.
        :rtype: bool
        """
        if not self.isEmpty():
            self.queue.pop(0)
            self.size -= 1
            return True
        return False

    def Front(self):
        """
        Get the front item from the queue.
        :rtype: int
        """
        if not self.isEmpty():
            return self.queue[0]
        return -1

    def Rear(self):
        """
        Get the last item from the queue.
        :rtype: int
        """
        if not self.isEmpty():
            return self.queue[self.size - 1]
        return -1

    def isEmpty(self):
        """
        Checks whether the circular queue is empty or not.
        :rtype: bool
        """
        if self.size == 0:
            return True
        return False

    def isFull(self):
        """
        Checks whether the circular queue is full or not.
        :rtype: bool
        """
        if self.size == self.capacity:
            return True
        return False
        
