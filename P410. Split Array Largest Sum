
# binary search
# lower_bound = max(nums), upper_bound = sum(nums)
# max sum of subarray increase, then the num of groups decrease 

# if k >= m, r = m else l = m + 1
# time O(log(sum(nums)) * n)
# space O(1)

class Solution(object):
    def splitArray(self, nums, m):
        
        left = max(nums)
        right = sum(nums)
        
        while left < right:
            mid = (left + right) // 2
            if self.split(nums, mid, m): # if true, 
                right = mid
            else:
                left = mid + 1
        return left
        
        
        
    def split(self, nums, subsum, m): # if we can split nums into at most m sub-groups so, each subarray sum <= subsum
        # num of subarray(k) >= m
        # subsum 小了
        current = 0
        count = 0
        for n in nums:
            current += n
            if current > subsum:
                count += 1
                if count >= m:
                    return False
                current = n
        return True
            
# dp dp[i][j] 前j个元素最多分成i组的最大和
# time O(m* n^2)
#  dp[i][j] = min(max(dp[i-1][k], sum[k+1, j])) 0 <=k<j
      
        
        
        
        
