# time O(m ^ 2 + n ^ 2 + m * n), space O(n)
# preorder root, left, right
class Solution(object):
    def isSubtree(self, s, t):
       
        self.vals_s = []
        self.vals_t = []
        self.dfs(s, self.vals_s)
        self.dfs(t, self.vals_t)
 
        return  ',' + ','.join(self.vals_t) in  ',' + ','.join(self.vals_s)
    
    
    def dfs(self, node, vals):
        if not node:
            vals.append('#')
            return 
        
        vals.append(str(node.val))
        self.dfs(node.left, vals)
        self.dfs(node.right, vals)
        
            


# time O(m*n)
# space O(n)

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSubtree(self, s, t):
        """
        :type s: TreeNode
        :type t: TreeNode
        :rtype: bool
        """
        if not s and not t:
            return True
        
        if not s or not t:
            return False
        
        return self.isSameTree(s, t) or self.isSubtree(s.left, t) or self.isSubtree(s.right, t)
        
    def isSameTree(self, s, t):
        if not s and not t:
            return True
        
        if not s or not t:
            return False
        
        return s.val == t.val and self.isSameTree(s.left, t.left) and self.isSameTree(s.right, t.right)
