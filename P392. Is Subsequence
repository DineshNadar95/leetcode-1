# two pointers
# time O(n)
# space O(1)

class Solution(object):
    def isSubsequence(self, s, t):
        
        if len(s) > len(t):
            return False
        
        i = 0
        j = 0
        
        while i < len(s) and j < len(t):
            if s[i] == t[j]:
                i += 1
                j += 1
            else:
                j += 1
                
        if i == len(s):
            return True
        return False


# follow up: 大量的s
# time O(n + mlng)
# space O(n)

# dic, key: ele, values: indexes 
# interate each ele in s, binary search first index > cur index in s
Binary search:

record the indexes for each character in t, if s[i] matches t[j], then s[i+1] 
should match a character in t with index bigger than j. 
This can be reduced to find the first element larger than a value in an sorted array (find upper bound), 
which can be achieved using binary search.

# [2, 3, 5, 7]  # prev = 4
import bisect
class Solution(object):
    def isSubsequence(self, s, t):
        
        dic = collections.defaultdict(list)
        for i, char in enumerate(t):
            dic[char].append(i)

        prev = -1
        for i, char in enumerate(s):
            j = self.binary_search(dic[char], prev) # binary search index for i
            if j == -1:
                return False
            prev = dic[char][j] 
        return True
    
    def binary_search(self, l, target):
        if not l:
            return -1
        i = 0
        j = len(l) - 1
        while i + 1 < j:
            m = (i + j) // 2
            if l[m] <= target:
                i = m + 1
            else:
                j = m
                
        #print(l, i, j, target)
        if l[i] > target:
            return i
        if l[j] > target:
            return j
        return -1
                
