# brute force 
# O(n^3)
# iterate each subarray pair and check if arithematic

# dp:
# time O(n)
# space O(n)
# dp[i], num of arithemetic slices end with num[i]
# transmation formula, for i in range(2, len(dp)), if n[i] - n[i - 1] == n[i - 1] - n[i - 2], dp[i] = dp[i - 1] + 1
# sum += dp[i]
class Solution(object):
    def numberOfArithmeticSlices(self, A):
        
        dp = [0 for _ in range(len(A))]
        res = 0
        for i in range(2, len(dp)):
            if A[i] - A[i - 1] == A[i - 1] - A[i - 2]:
                dp[i] = dp[i - 1] + 1
                res += dp[i]
        return res
        
# dp
# time O(n)
# space O(1)

# iterate each end element, check if arithemetic, count += 1, sum += count (arithmetic subarray end with this num)
class Solution(object):
    def numberOfArithmeticSlices(self, A):
        
        res = 0
        count = 0
        for i in range(2, len(A)):
            if A[i] - A[i - 1] == A[i - 1] - A[i - 2]: # arithmetic subarray end with this element 
                count += 1
                res += count
            else:
                count = 0
        return res
