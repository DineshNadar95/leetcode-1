# sol1
# hashtable
# time O(n), space O(1)
class Solution(object):
    def singleNumber(self, nums):
       
        counter = collections.Counter(nums)
        for key, value in counter.items():
            if value == 1:
                return key


Intuition
Now let's discuss O(1) space solution by using three bitwise operators

^ : x ^ x = 0, x ^ 0 = x
& : 1 & 7 = 1, 1 & 0 = 0
~ : 


To separate number that appears once from a number that appears three times 
let's use two bitmasks instead of one: seen_once and seen_twice.

The idea is to
change seen_once only if seen_twice is unchanged
change seen_twice only if seen_once is unchanged

class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        seen_once = seen_twice = 0
        
        # [2,2,3,2]
        for num in nums:
            # first appearance: 
            # add num to seen_once ^
            # don't add to seen_twice because of presence in seen_once ~
            
            # second appearance: 
            # remove num from seen_once ~
            # add num to seen_twice ^
            
            # third appearance: ~
            # don't add to seen_once because of presence in seen_twice ^
            # remove num from seen_twice
            seen_once = ~seen_twice & (seen_once ^ num)
            seen_twice = ~seen_once & (seen_twice ^ num)

        return seen_once

 # [2,2,3,2]
 # once 0 
 # twice 0 
 # for 2  once , 1 & 2-> 01 & 10->0
 # 
seen_once = ~seen_twice & (seen_once ^ num)
seen_twice = ~seen_once & (seen_twice ^ num)
