# greedy
# time O(nlgn)
# space O(1)

idea:
    # all people to B, choose N from them then fly to A, addtional cost is (costA - costB)
algorithm:
    # sort cost by (price A - priceB)
    # first N people to A, last N people to B

class Solution(object):
    def twoCitySchedCost(self, costs):
        
        costs.sort(key = lambda x : (x[0] - x[1]))
        
        n = len(costs) // 2
        
        res = 0
        for i in range(len(costs)):
            if i < n:
                res += costs[i][0]
            else:
                res += costs[i][1]
        return res
                
