# clarity: traverse all the edges, one only one time
从示例可以看出每个行程都必须用到且只用一次

# step: build graph, sort edges (reverse), call dfs(pop edge one by one until empty), return revserse
# 如果第一个访问的节点是 “孤岛节点”，最先添加道res, then reverse

# dfs
#先pop出字母序最小的点，最先没有edge的点，最先加入res
#这样既保证了字母序，又可以确保添加所有的行程(edges)


# time O(elge + v)
# space O(v + e)

# dfs
class Solution(object):
    def findItinerary(self, tickets):
        # build graph
        self.graph = collections.defaultdict(list)
        for fro, to in tickets:
            self.graph[fro].append(to)
           
        # sort
        for fro, tos in self.graph.items():
            #sorted(tos)[::-1]
            tos.sort(reverse = True)
        
        # call dfs
        self.res = []
        self.dfs('JFK')
        return self.res[::-1]
    
    def dfs(self, port):
        while self.graph[port]:
            nxt = self.graph[port].pop()
            self.dfs(nxt)
        
        self.res.append(port)
        
  # non-recursion
  class Solution(object):
    def findItinerary(self, tickets):
        """
        :type tickets: List[List[str]]
        :rtype: List[str]
        """
        collect = collections.defaultdict(list)
        for depart, to in sorted(tickets)[::-1]:
            collect[depart].append(to)
            
        rout = []
        stack = ['JFK']
        while stack:
            while collect[stack[-1]]:
                stack.append(collect[stack[-1]].pop())
            rout.append(stack.pop())
        return rout[::-1]
        
