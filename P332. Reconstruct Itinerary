# 首先肯定是要把路径保存成链表法表示的图的。
# 然后对每个顶点的所有邻接顶点进行排序，这样我们每次都优先选择字典序最小的那个顶点作为下次遍历的节点。
# 我们做了后序遍历即可。最后还要把后序遍历的结果再翻转，才是从根节点出发到每个位置的路径。

# dfs
class Solution(object):
    def findItinerary(self, tickets):
        """
        :type tickets: List[List[str]]
        :rtype: List[str]
        """
        self.collection = collections.defaultdict(list)
        for depart, to in sorted(tickets)[::-1]:
            self.collection[depart].append(to)
            
        self.rout = []
        self.traverse('JFK')
        return self.rout[::-1]
    
    def traverse(self, depart):
        while self.collection[depart]:
            self.traverse(self.collection[depart].pop())
        self.rout.append(depart)
    
  # non-recursion
  class Solution(object):
    def findItinerary(self, tickets):
        """
        :type tickets: List[List[str]]
        :rtype: List[str]
        """
        collect = collections.defaultdict(list)
        for depart, to in sorted(tickets)[::-1]:
            collect[depart].append(to)
            
        rout = []
        stack = ['JFK']
        while stack:
            while collect[stack[-1]]:
                stack.append(collect[stack[-1]].pop())
            rout.append(stack.pop())
        return rout[::-1]
        
