two methods:
1. bfs
2. dfs
# serilization: object to string
# deserilization: string to object

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

from collections import deque

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return []
        
        queue = deque([root])
        bfs_order = []
        
        while queue:
            node = queue.popleft()
            bfs_order.append(str(node.val) if node else '#')
            
            if node:
                queue.append(node.left)
                queue.append(node.right)
            
        return ' '.join(bfs_order)
        

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if not data:
            return None
        
        bfs = [
            TreeNode(int(val)) if val != '#' else None
            for val in data.split()
        ]
        
        root = bfs[0]
        queue = collections.deque([root])
        
        index = 1
        while queue:
            node = queue.popleft()
            node.left = bfs[index]
            if bfs[index]:
                queue.append(bfs[index])
            index += 1
            
            node.right = bfs[index]
            node.right = bfs[index]
            if bfs[index]:
                queue.append(bfs[index])
            index += 1
            
        return root


# dfs

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return []
        self.res = []
        self.dfs(root)
        return ' '.join(self.res)
        
        
    def dfs(self, root):
        if not root:
            self.res.append('#')
        else:
            self.res.append(str(root.val))
            self.dfs(root.left)
            self.dfs(root.right)
        
    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if not data:
            return None
        self.dfs = collections.deque(
            TreeNode(int(val)) if val != '#' else None
            for val in data.split()
        )
        
        return self.build()
    def build(self):
        if self.dfs:
            node = self.dfs.popleft()
            if not node:
                return 
            root = node
            root.left = self.build()
            root.right = self.build()
            return root
