sol:
bfs, 从门开始出发，bfs, 记录step, 碰到room, 更新step
node: 遇到过的room不加入q里面
# time O(mn)
# space O(mn)

class Solution(object):
    def wallsAndGates(self, rooms):
        
        if not rooms or not rooms[0]:
            return rooms
        
        q = collections.deque()
        for i in range(len(rooms)):
            for j in range(len(rooms[0])):
                if rooms[i][j] == 0:
                    q.append((i, j, 0))
        
        
        while q:
            x, y, step = q.popleft()
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                new_x = x + dx
                new_y = y + dy
                new_s = step + 1
                if 0 <= new_x < len(rooms) and 0 <= new_y < len(rooms[0]):
                    if rooms[new_x][new_y] > 2**30: # 表示遇到没遇到过的room
                        rooms[new_x][new_y] = new_s
                        q.append([new_x, new_y, new_s])
                        
                 
















bfs and dfs
# worst case O((mn)^2)
# space O(mn)

# sol1 : bfs
# bfs start with 0:gates
class Solution(object):
    def wallsAndGates(self, rooms):
        
        q = collections.deque([])
        visited = set()
        for i in range(len(rooms)):
            for j in range(len(rooms[0])):
                if rooms[i][j] == 0:
                    visited.add((i, j))
                    q.append([i, j, 0])
                    
        while q:
            x, y, step = q.popleft()
            for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:
                new_x = x + dx
                new_y = y + dy
                if 0 <= new_x < len(rooms) and 0 <= new_y < len(rooms[0]) and rooms[new_x][new_y] not in [-1, 0] and (new_x, new_y) not in visited:
                    visited.add((new_x, new_y))
                    rooms[new_x][new_y] = step + 1
                    q.append([new_x, new_y, step + 1])
        return rooms
 
 # sol2:
 dfs
                 
这道题类似一种迷宫问题，规定了-1表示墙，0表示门，让求每个点到门的最近的曼哈顿距离
那么我们先考虑用DFS来解，思路是，我们搜索0的位置，每找到一个0，以其周围四个相邻点为起点，开始DFS遍历，
并带入深度值1，如果遇到的值大于当前深度值，我们将位置值赋为当前深度值，并对当前点的四个相邻点开始DFS遍历，
注意此时深度值需要加1，这样遍历完成后，所有的位置就被正确地更新了，

class Solution(object):
    def wallsAndGates(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: None Do not return anything, modify rooms in-place instead.
        """
        if not rooms:
            return 
        
        for i in range(len(rooms)):
            for j in range(len(rooms[0])):
                if rooms[i][j] == 0:
                    self.dfs(rooms, i, j, 0)
                    
    
    def dfs(self, rooms, x, y, dis):
        # rooms[x][y] < dis代表是墙-1或者是已经找到了最近距离的点
        if x < 0 or x >= len(rooms) or y < 0 or y >= len(rooms[0]) or rooms[x][y] < dis:
            return
        rooms[x][y] = dis
        self.dfs(rooms, x + 1, y, dis + 1)
        self.dfs(rooms, x - 1, y, dis + 1)
        self.dfs(rooms, x, y + 1, dis + 1)
        self.dfs(rooms, x, y - 1, dis + 1)
            
            


        
                    
        
