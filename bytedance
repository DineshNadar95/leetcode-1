# 水塘抽样

当内存无法加载全部数据时，如何从包含 未知大小的数据流中 随机选取k个数据，并且要保证每个数据被抽取到的概率相等

抽样策略：
从S中抽取首k项放入「水塘」中
对于每一个S[j]项（j ≥ k）：
   随机产生一个范围0到j的整数r (include)
   若 r < k 则把水塘中的第r项换成S[j]项
   
   
 # 当i>k, 被替换掉的概率，k/i * 1/k = 1/i, 不被替换掉，k/k + 1

import random
def sample(nums, k):
    res = nums[:k]
    
    for i in range(k + 1, len(nums)):
        rand = random.randint(0, i - 1)
        if rand < k:
            res[rand] = nums[i]
    return res

print(sample([2, 4, 7, 9, 3, 5, 11], 4))


# 水塘抽样
# time O(n)
# space O(1)
遇到1，概率为1，保留第一个数。
遇到2，概率为1/2，这个时候，1和2各1/2的概率被保留
遇到3，3被保留的概率为1/3，(之前剩下的数假设1被保留)，2/3的概率 1 被保留，(此时1被保留的总概率为 2/3 * 1/2 = 1/3)
遇到4，4被保留的概率为1/4，(之前剩下的数假设1被保留)，3/4的概率 1 被保留，(此时1被保留的总概率为 3/4 * 2/3 * 1/2 = 1/4)

class Solution(object):

    def __init__(self, nums):
        self.nums = nums
            
    def pick(self, target):
        
        res = None
        count = 0
        for i, num in enumerate(self.nums):
            if num == target:
                count += 1
                chance = random.randint(1, count)
                if chance == count:
                    res = i
        return res


k = 1
p = 1/ i * (i/i + 1) * (i + 1/i + 2) *** ( n - 1/n) = 1/ n

k > 1, nth ele in N (select k) 选中n,n + 1 ... N 所有都未选中
p = k/n * (n/n + 1) * (n + 1) / (n + 2) **** (N - 1) / N = k/N




'''       
给定一个字符串，对该字符串进行删除操作，保留k个字符且相对位置不变，使字典序最小。如k=2,fskacsbi->ab；k=3,fsakbacsi->aac。字典序，abc>aad
设个指针记录第一个lexically smallest letter的index, 然后接着往后比，可以O(n)做。

start = 0
for i in range(k):
    cur = min(s[start : len(k) - i])
    res.append(s.index(cur))
    
'''    

class Solution(object):
    def deleteString(self, s, k): 
        self.res = ''
        self.start = 0
        self.dfs(s, 0, k) # string, ith char in res, k
        return self.res 
    
    def dfs(self, s, i, k):
        if i == k:
            return 
        
        cur_s = min(s[self.start: len(s) - (k - i)]) 
        cur_index = s.index(cur_s, self.start)
        self.start = cur_index + 1
        self.res += cur_s
        self.dfs(s, i + 1 , k)
        
    
test = Solution()
print(test.deleteString('fsakbacsi', 3))
        
'''       
1.    给一个tree，每个node标注出以该node为跟的子树的大小，问怎么输出inorder traverse里的k-th node。
'''    
    
class Node(object):
    def __init__(self, val, c):
        self.val = val
        self.left = None
        self.right = None
        self.c = c
        
# left, root, right

#              2
             1    1       2
           2   3
        
        
class Solution(object):
    def find_k(self, root, k):
        self.cur_c = 0
        self.k = k
        return self.dfs(root)
    
    def dfs(self, node):
        if not node:
            return  
        
        self.dfs(node.left)
        
        self.cur_c += node.c
        if node.c == k:
            return node
        
        self.dfs(node.right)
        
       
        
一个数组和target，找出最长的subarray && sum==target， O(n)
class Solution(object):
    def largest_sub(self, nums, target):
        res = 0
        
        dic = {0 : -1} # key, subarray, value: index
        
        cur_sum = 0
        for i in range(len(nums)):
            cur_sum += nums[i]
            if cur_sum - target in dic:
                res = max(res, i - dic[cur_sum - target])
            
            if cur_sum not in dic:
                dic[cur_sum] = i
                
        return res
    
    
test = Solution()
print(test.largest_sub([1, -1, 1], 1))
                
        
