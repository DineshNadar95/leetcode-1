# graph
# dfs 
# find component then sort each component

# time O(vlgv)
# space O(v)
# dfs 找联通分量 O(v + e)

steps:
# build graph
# dfs search from component
# build string
        

class Solution(object):
    def smallestStringWithSwaps(self, s, pairs):
        
        graph = collections.defaultdict(list)
        for c1, c2 in pairs:
            graph[c1].append(c2)
            graph[c2].append(c1)
            
        self.visited = [False for _ in range(len(s))]
        res = list(s)
        
        for i in range(len(s)):
            if not self.visited[i]:
                component_chars = [s[i]]
                component_idx = [i]
                self.visited[i] = True
                self.dfs(component_chars, component_idx, s, graph, i)
                print(i, component_chars, component_idx)
                component_chars.sort()
                component_idx.sort()
                for index, j in enumerate(component_idx):
                    res[j] = component_chars[index]
            
        return ''.join(res)
    
    
    def dfs(self, component_chars, component_idx, s, graph, i):
        for nb in graph[i]:
            if not self.visited[nb]:
                self.visited[nb] = True
                component_idx.append(nb)
                component_chars.append(s[nb])
                self.dfs(component_chars, component_idx, s, graph, nb)
                
