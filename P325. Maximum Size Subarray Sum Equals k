# hash
# time O(n)
# space o(n)

可以用hash表来保存前n个数的和,然后每次去查是否当前和与目标值之差已经存在, 
是的话说明我们找到了一个序列,然后更新最大长度大小. 
哦, 还有就是如果有相同的和, 那就不管了, 因为我们要的最长的子串, 肯定是留着前面的一个值更优.

class Solution(object):
    def maxSubArrayLen(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        # key: prefix sum, value:index
        dic = {0 : -1}
        pre_sum = 0
        res = 0
        
        for i, num in enumerate(nums):
            pre_sum += num
            if pre_sum - k in dic:
                res = max(res, i - dic[pre_sum - k])
            if pre_sum not in dic:
                dic[pre_sum] = i
        return res
            
            
