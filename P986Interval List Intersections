双指针法, 当A和B的区间不相交时, 有两种情况, 
A在B后面或者B在A后面, 此时我们需要把处在后面的区间的指针向前进一位. 
当A和B相交时, 区间的起点为A, B区间的起点的较大值, 终点为两个区间终点的较小值, 然后将较后面的指针向前进一位即可.


# We use 2 pointers i and j. T
# the steps are:

# if no overlap: increment the index of the lesser interval
# if overlap: overlap interval = bigger start index + lower end index.
# increment the index of the lesser interval

# time o(m + n)
# space o(m + n)

class Solution(object):
    def intervalIntersection(self, A, B):
        """
        :type A: List[List[int]]
        :type B: List[List[int]]
        :rtype: List[List[int]]
        """
        i = 0
        j = 0
        res = []
        while i < len(A) and j < len(B) :
            start = max(A[i][0], B[j][0])
            end = min(A[i][1], B[j][1])
            if start <= end:
                res.append([start, end])
            if A[i][1] < B[j][1]:
                i += 1
            else:
                j += 1
        return res
