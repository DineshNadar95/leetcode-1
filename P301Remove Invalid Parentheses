# first, need to find the number of remaining left and right bracket that we need to remove
# then use dfs recursion, iterate from left most to right for each ele in string
# for recursion, exit case left == right == 0, and is_valid(s) append to res return 
                then, iterate each ele, if i > 0 and s[i] == s[i - 1] skip duplicate
                check left > 0 and cur ele == '(', then call dfs
                check right > 0 and cur ele == ')', the call dfs

# time O(2^n)
# space O(n)

class Solution(object):
    def removeInvalidParentheses(self, s):
        
        left, right = self.count_l_r(s)
        self.res = []
        self.dfs(s, left, right, 0)
        return self.res
    
    def dfs(self, s, l, r, start):
        if l == r == 0:
            if self.check_valid(s):
                self.res.append(s)
            return 
        
        for i in range(start, len(s)):
            if i > start and s[i] == s[i - 1]:
                continue
            if s[i] == '(' and l > 0:
                self.dfs(s[:i] + s[i + 1:], l - 1, r, i)
            elif s[i] == ')' and r > 0:
                self.dfs(s[:i] + s[i + 1:],  l , r - 1, i)
    
    def check_valid(self, s):
        l, r = self.count_l_r(s)
        return l == r == 0
    
    def count_l_r(self, s):
        l = 0
        r = 0
        
        for char in s:
            if char == '(':
                l += 1
            elif char == ')':
                if l:
                    l -= 1
                else:
                    r += 1
        return l, r
                
  # BFS
这道题首先可以用BFS来解，我们先把给定字符串排入队中，然后取出检测其是否合法，若合法直接返回，
不合法的话，我们对其进行遍历，对于遇到的左右括号的字符，我们去掉括号字符生成一个新的字符串，如果这个字符串之前没有遇到过，
将其排入队中，我们用哈希集合记录一个字符串是否出现过。我们对队列中的每个元素都进行相同的操作，直到队列为空还没找到合法的字符串的话，那就返回空集

              
                
        
        
