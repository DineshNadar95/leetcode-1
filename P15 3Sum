## sort + two sum
# time O(n^2) （sort: O(nlgn), algo: O(n^2))
# space O(1)
# 思路： 枚举第一个数，然后进行two sum, 若第一个数和前一个数相同则跳过
# 固定第一个数，对于two sum,当找到一个triple时，则继续进行search，再次判断当前的数是否和前一个数相同

class Solution:
    def threeSum(self, nums):
        # write your code here
        nums.sort()
        result = []
        length = len(nums)
        for i in range(0, length - 2):
            if i and nums[i] == nums[i - 1]:
                continue
            self.find_two_sum(nums, i + 1, length - 1, -nums[i], result)
        return result
        
    def find_two_sum(self, nums, left, right, target, result):
        while left < right:
            if nums[left] + nums[right] == target:
                result.append([-target, nums[left], nums[right]])
                right -= 1 
                left += 1 
                while left < right and nums[left] == nums[left - 1]:
                    left += 1 
                while left < right and nums[right] == nums[right + 1]:
                    right -= 1 
            elif nums[left] + nums[right] > target:
                right -= 1 
            else:
                left += 1 
