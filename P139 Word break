# brute force 
# time (n^n)
# spce O(n)

class Solution(object):
    def wordBreak(self, s, wordDict):
        return self.word_break(s, set(wordDict), 0)
    
    def word_break(self, s, wordDict, start):
        if start == len(s):
            return True
        
        for i in range(start, len(s)):
            if s[start : i + 1] in wordDict and self.word_break(s, wordDict, i + 1):
                    return True
            
        return False
        
# sol2 recursion time O(n^2), space O(n)
 # memo if s[start:end] can be segmented into a space-separated sequence of one or more dictionary words.
 
class Solution(object):
    def wordBreak(self, s, wordDict):
        return self.dfs(s, 0, len(s), set(wordDict), {})
    
    def dfs(self, s, start, end, wordDict, memo):
        if (start, end) in memo:
            return memo[(start, end)]
        if s[start:end] in wordDict:
            memo[(start, end)] = True
            return True
        for j in range(start, end):
            if s[start : j + 1] in wordDict and self.dfs(s, j + 1, end, wordDict, memo):
                memo[(start, end)] = True
                return True
                
        memo[(start, end)] = False
        return False

# sol3: dp
# dp[i] means s[:i+1] can be segmented into words in the wordDicts
# time O(n^2)
# space O(n)

class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
       
        dp = [False] * (len(s) + 1)
        dp[0] = True
        
        for i in range(len(s)):
            if dp[i]:  
                for j in range(i + 1, len(dp)):
                    if s[i:j] in wordDict:
                        dp[j] = True
        return dp[-1]
        
        
  # follow up:return one possible solution
 class Solution:
    def wordBreak(self, s, wordDict):
    
        dp = [False] * (len(s) + 1)
        dp[0] = True
        word = ''
        for i in range(len(s)):
            if dp[i]:
                word += s[:i]
                for j in range(i + 1, len(dp)):
                    if s[i : j] in wordDict:
                        dp[j] = True
                        if word:
                            word = word + ',' + s[i : j]
                        break
        return word
    
    
test = Solution()
print(test.wordBreak('leetcode',['leet','code', 'leetcode']))        

       
