# sol1: brute force 
# iterate every possible pair, find min height, calculate area
# time O(n^3), space O(1)

# sol2: better brute force
# time O(n^2), space O(1) min = min(min, height[j]
class Solution(object):
    def largestRectangleArea(self, heights):
        """
        :type heights: List[int]
        :rtype: int
        """
        if not heights:
            return 0
        
        res = -sys.maxsize
        
        for i in range(len(heights)):
            min_height = sys.maxsize
            for j in range(i, len(heights)):
                min_height = min(min_height, heights[j])
                area = min_height * (j - i + 1)
                res = max(res, area)
        return res


# 单调栈(stack)。
# time O(n)  # n 个数字每个会被压栈弹栈各一次。
# space O(n)

单调递增stack, stack保存index

如果后面新来的元素高度比栈里最后的元素高，那么需要入栈，因为面积最大的元素会出现在后面。
如果后面新来的元素高度比栈里的最后的元素小，那么需要弹出栈里的元素，并且，每次弹出的时候都要对计算目前的宽度，相乘得到面积。
我们用弹出元素作为高形成的最大面积矩形的宽是当前元素与 stack[top-1] 之间的那些柱子。

# 如果都是递增的怎么办？可以在数组最后面加一个0作为结束的标志。

# time O(n), n numbers are pushed and popped.
# space O(n)
class Solution(object):
    def largestRectangleArea(self, heights):
        
        stack = [] # height 
        heights.append(0)
        res = 0
        
        for i, height in enumerate(heights):
            if not stack or heights[stack[-1]] <= height:
                stack.append(i)
            else:
                while stack and heights[stack[-1]] > height:
                    h = heights[stack.pop()]
                    if not stack:
                        w = (i - 1) - 0 + 1
                    else:
                        w = (i - 1) - (stack[-1] + 1) + 1
                    res = max(res, h * w)
                stack.append(i)
        
        return res
        

