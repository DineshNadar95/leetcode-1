# dp (dfs + memorization)
# 利用dfs来扫描所有可能的路径
# 用dp数组记录从(i, j)出发的最长递增路径，以此防止重复计算

# 时间复杂度：O(nm)
# space O(mn)
# 因为每个点都只访问了一遍
class Solution(object):
    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        if len(matrix) == 0 or len(matrix[0]) == 0:
            return 0
    
        res = 0
        memo = {}
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                path = self.dfs(matrix, i, j, memo)
                res = max(res, path)
        return res
    
    def dfs(self, matrix, i, j, memo):
        if (i,j) in memo:
            return memo[(i, j)]
        res = 1
        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            x = i + dx
            y = j + dy
            if x < 0 or x >= len(matrix) or y < 0 or y >= len(matrix[0]) or matrix[x][y] <= matrix[i][j]:
                continue
            path = self.dfs(matrix, x, y, memo)
            res = max(res, path + 1)
        memo[(i, j)] = res
        return res
