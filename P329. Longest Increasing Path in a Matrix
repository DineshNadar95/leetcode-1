# dp (dfs + memorization)
# 利用dfs来扫描所有可能的路径
# 用dp数组记录从(i, j)出发的最长递增路径，以此防止重复计算

# 时间复杂度：O(nm)
# 因为每个点都只访问了一遍
class Solution(object):
    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        if len(matrix) == 0 or len(matrix[0]) == 0:
            return 0
        m = len(matrix)
        n = len(matrix[0])
        res = 0
        dp = [[0 for j in range(n + 1)] for i in range(m + 1)]
        for i in range(m):
            for j in range(n):
                path = self.dfs(matrix, m, n, i, j, dp)
                res = max(res, path)
        return res
    
    def dfs(self, matrix, m, n, i, j, dp):
        if dp[i][j] != 0:
            return dp[i][j]
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        res = 1
        for dx, dy in directions:
            x = i + dx
            y = j + dy
            if x < 0 or x >= m or y < 0 or y >= n or matrix[x][y] <= matrix[i][j]:
                continue
            path = self.dfs(matrix, m, n, x, y, dp)
            dp[x][y] = path
            res = max(res, path + 1)
            
        return res
            
