# dp (dfs + memorization)
# 利用dfs来扫描所有可能的路径
# 用dp数组记录从(i, j)出发的最长递增路径，以此防止重复计算

# 时间复杂度：O(nm)
# space O(mn)
# 因为每个点都只访问了一遍
class Solution(object):
    def longestIncreasingPath(self, matrix):
        
        self.memo = {}
        res = 0
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                path = self.dfs(matrix, i, j)
                res = max(res, path)
        return res
    
    def dfs(self, matrix, x, y):
        if (x, y) in self.memo:
            return self.memo[(x, y)]
        
        res = 1
        for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:
            new_x = x + dx
            new_y = y + dy
            if 0 <= new_x < len(matrix) and 0 <= new_y < len(matrix[0]) and matrix[new_x][new_y] > matrix[x][y]:
                res = max(res, self.dfs(matrix, new_x, new_y) + 1)
                
        self.memo[(x, y)] = res
        
        return res
                
