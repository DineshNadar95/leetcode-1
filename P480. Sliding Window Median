# brute force 
# time O((n - k + 1)klgk), space O(k)


# time O(nlgk)
# space O(k)

from heapq import *
class Solution(object):
    def medianSlidingWindow(self, nums, k):
   
        small_heap = []
        large_heap = []
        res = []
        
        # size of small k//2, large k//2 + 1
        # large heap (val)
        # small heap (-val)
        
        # create the initial left and right heap
        for i,n in enumerate(nums[:k]): 
            heappush(small_heap, (-n,i))
            
        for i in range(k - k // 2):
            heappush(large_heap, (-small_heap[0][0], small_heap[0][1]))
            heappop(small_heap)
            
        for i,n in enumerate(nums[k:]):
            if k%2:
                res.append(large_heap[0][0]/1.)  
            else:
                res.append((large_heap[0][0] - small_heap[0][0])/2.)
        
        
            if n >= large_heap[0][0]:
                heappush(large_heap,(n,i+k))        # large_heap +1
                if nums[i] <= large_heap[0][0]:     # small_heap-1, unbalanced ->small_heap + 1
                    heappush(small_heap, (-large_heap[0][0], large_heap[0][1]))
                    heappop(large_heap)
                # else: pass                # large_heap-1, balanced
            else:
                heappush(small_heap,(-n,i+k))        # small_heap +1
                if nums[i] >= large_heap[0][0]:     # large_heap-1, unbalanced -> large_heap + 1
                    heappush(large_heap, (-small_heap[0][0], small_heap[0][1]))
                    heappop(small_heap)
                    
                # else: pass                # small_heap-1, balanced
                
            while(small_heap and small_heap[0][1] <= i): 
                heappop(small_heap)  # lazy-deletion
            while(large_heap and large_heap[0][1] <= i): 
                heappop(large_heap)  # lazy-deletion
                
        if k%2:
            res.append(large_heap[0][0]/1.)  
        else:
            res.append((large_heap[0][0] - small_heap[0][0])/2.)
        return res
