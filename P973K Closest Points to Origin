# brute-foce
# time O(nlgn)
# space O(n)
Sort the points by distance, then take the closest K points.
class Solution(object):
    def kClosest(self, points, K):
        points.sort(key = lambda P: P[0]**2 + P[1]**2)
        return points[:K]


# We keep a min heap of size K.
# For each item, we insert an item to our heap.
# If inserting an item makes heap size larger than k, then we immediately pop an item after inserting ( heappushpop ).

# Runtime:
# Inserting an item to a heap of size k take O(logK) time.
# And we do this for each item points.
# So runtime is O(N * logK) where N is the length of points.

# Space: O(K) for our heap.
# time O(n*lgk)
# space O(k)

import heapq

class Solution:
    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:
        heap = []
        
        for (x, y) in points:
            dist = -(x * x + y * y)
            if len(heap) == K:
                heapq.heappushpop(heap, (dist, x, y))
            else:
                heapq.heappush(heap, (dist, x, y))
                
        return [(x, y) for (dist, x, y) in heap]
    
# heap size n
# time O(n + klgn)
# space O(n)
from heapq import *
class Solution(object):
    def kClosest(self, points, K):
        """
        :type points: List[List[int]]
        :type K: int
        :rtype: List[List[int]]
        """
        
        # heap size n
        heap = [(x ** 2 + y ** 2, x, y) for x, y in points]
        heapify(heap)
        res = []
        for _ in range(K):
            dis, x, y = heappop(heap)
            res.append((x, y))
        return res
