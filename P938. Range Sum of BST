# dfs traverse
# time O(n)
# space O(h)

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def rangeSumBST(self, root, L, R):
        """
        :type root: TreeNode
        :type L: int
        :type R: int
        :rtype: int
        """
        self.res = 0
        self.dfs(root, L, R)
        return self.res
    
    def dfs(self, root, L, R):
        if not root:
            return 
        
        if L <= root.val and root.val <= R:
            self.res += root.val

        self.dfs(root.left, L, R)
        self.dfs(root.right, L, R)
        
 
class Solution(object):
    def rangeSumBST(self, root, L, R):
        self.sum_ = 0
        self.dfs(root, L, R)
        return self.sum_
    
    def dfs(self, node, L, R):
        if not node:
            return 
        
        if node.val < L:
            self.dfs(node.right, L, R)
        elif node.val > R:
            self.dfs(node.left, L, R)
        else:
            self.sum_ += node.val
            self.dfs(node.left, L, R)
            self.dfs(node.right, L, R)
