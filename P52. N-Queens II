# we only need to iterate over the columns and assume that we add per queen a line.

# backtracking
# time O(n!)
# space O(n)

class Solution(object):
    def totalNQueens(self, n):
        """
        :type n: int
        :rtype: int
        """
        self.res = 0
        self.dfs([-1] * n, 0)
        return self.res
    
    def dfs(self, cols, cur_queen):
        if cur_queen == len(cols):
            self.res += 1
            return 
        
        for i in range(len(cols)):
            cols[cur_queen] = i
            if self.is_valid(cols, cur_queen):
                self.dfs(cols, cur_queen + 1)
                
    def is_valid(self, cols, cur_queen):
        for i in range(cur_queen):
            if cols[i] == cols[cur_queen] or abs(cols[i] - cols[cur_queen]) == cur_queen - i:
                return False
        return True
