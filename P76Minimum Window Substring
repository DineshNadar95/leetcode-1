#  sliding window

# time O(n + m) n:len(s)
# space O(n + m)

from collections import *
class Solution(object):
    def minWindow(self, s, t):
        
        cT = collections.Counter(t)
        cS = collections.defaultdict(int)
        need_match = len(cT)
        cur_match = 0
        i_start = 0
        res = ''
        min_length = sys.maxsize
        
        for i, char in enumerate(s):
            cS[char] += 1
            if cS[char] == cT[char]:
                cur_match += 1
            if cur_match == need_match:
                while cur_match == need_match:
                    if cS[s[i_start]] == cT[s[i_start]]:
                        cur_match -=1
                    cS[s[i_start]] -= 1
                    i_start += 1
                    
                if i - i_start + 2 < min_length:
                    min_length = i - i_start + 2
                    res = s[i_start - 1 : i + 1]
                    
        return res
                 
                 
                
                        
                    
                
