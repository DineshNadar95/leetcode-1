# Divide and Conquer

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        if root is None:
            return True
        return self.is_valid_helper(root, None, None)
        
    def is_valid_helper(self, root, maximum, minimum):
        if root is None:
            return True
        if maximum != None and root.val >= maximum or minimum != None and root.val <= minimum:
            return False
        left = self.is_valid_helper(root.left, root.val, minimum)
        right = self.is_valid_helper(root.right, maximum, root.val)
        return left and right# Definition for a binary tree node.
