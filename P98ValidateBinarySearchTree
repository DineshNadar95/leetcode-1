一：递归。（当前节点值比他左子树大，比右子树小）

1. 为空返回true

2.左子树返回的合法性。考虑左子树不空的时候，那么根结点要比所有左子树上的结点大，即根结点大于左子树的最大值----左子树的右下角的结点。

3. 左子树返回为真且右子树也为真则返回真。考虑右子树时，根要比右子树的最小值小---最左左下角的结点。


# Divide and Conquer

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        if not root:
            return True
        return self.helper(root, sys.maxsize, -sys.maxsize)
    
    def helper(self, node, maximum, minimum):
        if not node:
            return True
        if node.val >= maximum or node.val <= minimum:
            return False
        return self.helper(node.left, node.val, minimum) and self.helper(node.right, maximum, node.val)
        
