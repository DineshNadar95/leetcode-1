# stack
# time O(n)
# space O(n)
# stack is decreaseing, maintain the largest candidate for s3

1）定义一个栈，每次当我们存储一个新数的时候，我们首先弹出里面所有比它小的数字。而弹出的这些数就会成为s3的有效候选者。
2）我们维护s3的最大候选者（它一定是从栈中最后一个被弹出的数字）；
3）一旦我们遇到一个比s3小的数，就说明我们找到了合法的序列s1 < s3。由于s2 > s3，所以一定可以推导出s1 < s2。

class Solution(object):
    def find132pattern(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        # [1, 5, 3, 4]
        # stack = [5]
        # third 4
        if len(nums) < 3:
            return False
        
        third = -sys.maxsize
        stack = []
        for i in range(len(nums) - 1, -1, -1):
            if nums[i] < third:
                return True
            
            while stack and stack[-1] < nums[i]:
                third = stack.pop()
            stack.append(nums[i])
        return False
