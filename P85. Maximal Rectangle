 # 可以利用直方图的算法
参考了84. Largest Rectangle in Histogram升级版的解法。
如图所示，如果把每一行的1和它上面的1连在一起，那么就可以看成一个个站里的矩形方块。
那么我们的最终目的就是找出最大面积的矩形方块，所以就是第84题的做法了，使用单调栈。

需要注意的是，我们使用一个height数组，保存到某一层的第i个位置为止，能向上构成的矩形的高度。
而且需要对每层都做一个寻找面积的操作，最终选择所有层中能够成矩形面积最大值。
• 时间复杂度O(M * (N + M))
# space O(N)

class Solution(object):
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        if not matrix:
            return 0
        
        m = len(matrix)
        n = len(matrix[0])
        
        heights = [0] * n
        res = 0
        for row in matrix:
            for j in range(n):
                if row[j] == '0':
                    heights[j] = 0  # 1. cur val = 0, height is 0
                else:
                    heights[j] += 1
            res = max(res, self.largest_rec_histog(heights))
        return res
    
    
    def largest_rec_histog(self, heights):
        stack = [] # height 
        heights.append(0)
        res = 0
        
        for i, height in enumerate(heights):
            if not stack or heights[stack[-1]] <= height: # stack stores the index 
                stack.append(i)
            else:
                while stack and heights[stack[-1]] > height:
                    h = heights[stack.pop()]
                    if not stack:
                        w = i
                    else:
                        w = (i - 1) - (stack[-1] + 1) + 1
                    res = max(res, h * w)
                stack.append(i)
        return res
                    
                        
                    
            
