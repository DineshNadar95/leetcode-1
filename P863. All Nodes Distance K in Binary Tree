# 树是有向图，不可以反向遍历, children -> parent, 所以我们需要建立无向图

# sol1
# build graph bds
# time O(n), space O(n)
# build undirected graph from the tree, traverse the tree begin from the target, 
collect all notes that k steps from the target

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def distanceK(self, root, target, K):
        """
        :type root: TreeNode
        :type target: TreeNode
        :type K: int
        :rtype: List[int]
        """
        if not root:
            return []
        graph = collections.defaultdict(list)
        self.build_graph(root, graph)
        return self.bfs(graph, target, K)
    
    def build_graph(self, node,graph):
        
        if not node:
            return 
        if node.left:
            graph[node.val].append(node.left.val)
            graph[node.left.val].append(node.val)
            self.build_graph(node.left, graph)
        if node.right:
            graph[node.val].append(node.right.val)
            graph[node.right.val].append(node.val)
            self.build_graph(node.right, graph)
        
    def bfs(self,graph, target, k):
        visited = set()
        queue = collections.deque([target.val])
        visited.add(target.val)
        res = []
        while k:
            k -= 1
            for _ in range(len(queue)):
                node = queue.popleft()
                for neighbor in graph[node]:
                    if neighbor not in visited:
                        queue.append(neighbor)
                        visited.add(neighbor)
                        
        return list(queue)
                    
            
            
