# return maximum average
# time O(n)
# space O(h)

第一个位置表示以该节点为根的子树值的和，第二个位置表示子树的节点数；
自顶向上的累加每个节点的这两个数值；
子树平均数是和/节点，使用一个全局变量来存储；
使用字典做记忆化搜索，用来加速

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maximumAverageSubtree(self, root: TreeNode) -> float:
        self.average = 0
        self.helper(root)
        return self.average

    def helper(self, root):
        if not root:
            return 0, 0
        left_sum, left_size = self.helper(root.left)
        right_sum, right_size = self.helper(root.right)
        sum_new = left_sum + right_sum + root.val
        size_new = left_size + right_size + 1
        average_new = sum_new / size_new
        self.average = max(average_new, self.average)
        return sum_new, size_new
