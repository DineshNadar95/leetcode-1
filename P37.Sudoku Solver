# brute force
# 用1-9填充所有的格子，再判断是否valid
# time O(9^81)

# dfs + constraint + backtracking
# 基本的意思是在放置每个数字时都设置约束
# 每个dfs 都是在填充一个格子

time: constant, num of operations is O(9!^ 9), 9! for each row
sapce: constant， 递归深度, 81



class Solution(object):
    def solveSudoku(self, board):
        
        self.seen = set()
        for i in range(9):
            for j in range(9):
                if board[i][j] != '.':
                    self.seen.add((board[i][j], i))
                    self.seen.add((j, board[i][j]))
                    self.seen.add((i // 3, j // 3, board[i][j]))
         
        self.dfs(board)
        return board
        
    def dfs(self, board):
        
        for i in range(9):
            for j in range(9):
                if board[i][j] == '.':
                    for digit in range(1, 10):
                        digit = str(digit)
                        
                        if not (digit, i) in self.seen and not (j, digit) in self.seen and not (i // 3, j // 3, digit) in self.seen:
                            board[i][j] = digit
                            self.seen.add((digit, i))
                            self.seen.add((j, digit))
                            self.seen.add((i // 3, j // 3, digit))
        
                            if self.dfs(board):
                                return True
                
                            board[i][j] = '.'
                            self.seen.remove((digit, i))
                            self.seen.remove((j, digit))
                            self.seen.remove((i // 3, j // 3, digit))
            
                    return False
        return True
            
