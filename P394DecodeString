
# stack

# time O(n) , travsese + stack
# space O(n) 

class Solution(object):
    def decodeString(self, s):
        
        stack = []
        cur_num = 0
        cur_str = ''
        
        for char in s:
            if char.isdigit():
                cur_num = cur_num * 10 + int(char)
            elif char.isalpha():
                cur_str = cur_str + char
            elif char == '[':
                stack.append(cur_str)
                stack.append(cur_num)
                cur_str = ''
                cur_num = 0
            elif char == ']':
                pre_num = stack.pop()
                pre_res = stack.pop()
                cur_str = pre_res + cur_str * pre_num
        return cur_str
        
 
# recursion time O(n)
# space O(n)

当 s[i] == ']' 时，返回当前括号内记录的 res 字符串与 ] 的索引 i （更新上层递归指针位置）；
当 s[i] == '[' 时，开启新一层递归，记录此 [...] 内字符串 tmp 和递归后的最新索引 i，并执行 res + multi * tmp 拼接字符串。
遍历完毕后返回 res。


class Solution(object):
    def decodeString(self, s):
        
        return self.dfs(s, 0)


    def dfs(self, s, i):
        res, num = "", 0
        
        while i < len(s):
            if s[i].isdigit():
                num = num * 10 + int(s[i])
            elif s[i] == '[':
                i, tmp = self.dfs(s, i + 1)
                res += num * tmp
                num = 0
            elif s[i] == ']':
                return i, res
            else:
                res += s[i]
                
            i += 1
        return res
