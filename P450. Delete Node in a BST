被删除节点没有左子树：返回其右子树
被删除节点节点没有右子树：返回其左子树
被删除节点既有左子树，又有右子树：
1）查找到其右子树的最小值的节点，替换掉被删除的节点，并删除找到的最小节点
2）查找到其左子树的最大值的节点，替换掉被删除的节点，并删除找到的最大节点


# time O(nlgn)
# space O(h)

class Solution(object):
    def deleteNode(self, root, key):
        
        if not root:
            return None
        
        if key > root.val:
            root.right = self.deleteNode(root.right, key)
        elif key < root.val:
            root.left = self.deleteNode(root.left, key)
        else:
            # delete cur node
            # if node is a leaf
            if not root.left and not root.right:
                return None
            
            if root.right:
                # exchange root with successor
                # delte successor
                suc = self.successor(root)
                root.val = suc
                root.right = self.deleteNode(root.right, suc)
            elif root.left:
                pred = self.predecessor(root)
                root.val = pred
                root.left = self.deleteNode(root.left, pred)
        
        return root

        
    def successor(self, node):
        cur = node.right
        while cur.left:
            cur = cur.left
        return cur.val
    
    def predecessor(self, node):
        cur = node.left
        while cur.right:
            cur = cur.right
        return cur.val
    
    
        
        
        
            
