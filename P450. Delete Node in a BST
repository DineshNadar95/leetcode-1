算法:
1. 如果 key > root.val，说明要删除的节点在右子树，root.right = deleteNode(root.right, key)。
2. 如果 key < root.val，说明要删除的节点在左子树，root.left = deleteNode(root.left, key)。
3. 如果 key == root.val，则该节点就是我们要删除的节点，则：
- 如果该节点是叶子节点，则直接删除它：root = null。
- 如果该节点不是叶子节点且有右节点，则用它的后继节点的值替代 root.val = successor.val，然后删除后继节点。
- 如果该节点不是叶子节点且只有左节点，则用它的前驱节点的值替代 root.val = predecessor.val，然后删除前驱节点。
返回 root。


# time O(h)
# space O(h)

class Solution(object):
    def deleteNode(self, root, key):
        
        if not root:
            return None
        
        if key > root.val:
            root.right = self.deleteNode(root.right, key)
        elif key < root.val:
            root.left = self.deleteNode(root.left, key)
        else:
            # delete cur node
            # if node is a leaf
            if not root.left and not root.right:
                return None
            
            if root.right:
                # exchange root with successor
                # delte successor
                suc = self.successor(root)
                root.val = suc
                root.right = self.deleteNode(root.right, suc)
            elif root.left:
                pred = self.predecessor(root)
                root.val = pred
                root.left = self.deleteNode(root.left, pred)
        
        return root

        
    def successor(self, node):
        cur = node.right
        while cur.left:
            cur = cur.left
        return cur.val
    
    def predecessor(self, node):
        cur = node.left
        while cur.right:
            cur = cur.right
        return cur.val
    
    
        
        
        
            
