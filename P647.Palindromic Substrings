# sol1: brute force  time O(n^3)
# 注意对于单个的字母是palindrome, count = len(s),开始
class Solution(object):
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        length = len(s)
        count = len(s)
        for i in range(length):
            for j in range(i + 1, length):
                if s[i : j + 1] == s[i : j + 1][::-1]:
                    count += 1
                    
        return count
        

# so2: 从中心线向两边枚举，右 = 左，或右 = 左 + 1， time O(n^2)
class Solution(object):
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        res = 0
        n = len(s)
        for i in range(n):
            for j in range(2):
                left = i
                right = left + j
                while left >= 0 and right < n and s[left] == s[right]:
                    res += 1
                    left -= 1
                    right += 1
        return res
 
 # dp, time O(n^2), space O(n^2)
 class Solution(object):
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        n = len(s)
        dp = [[0] * n for _ in range(n)]
        
        res = 0
        for i in range(n - 1, -1, -1):
            dp[i][i] = 1
            res += 1
            for j in range(i + 1, n):
                if j == i + 1 and s[i] == s[j]:
                    dp[i][j] = 1
                    res += 1
                if j > i + 1 and dp[i + 1][j - 1] == 1 and s[i] == s[j]:
                    dp[i][j] = 1
                    res += 1
                    
        return res
