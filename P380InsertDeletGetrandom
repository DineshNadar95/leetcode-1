# hash insert, delete O(1), O(1),但是不支持随机访问
# 所以用hash + array, array 储存元素，hash key:element, value: element index in array
# 插入：先看这个数字是否已经在 HashMap 中存在，如果存在的话直接返回 false，不存在的话，将其插入到数组的末尾，然后建立数字和其位置的映射。
# 删除： 要先判断其是否在 HashMap 里，如果没有，直接返回 false。由于 HashMap 的删除是常数时间的，而数组并不是，
  为了使数组删除也能常数级，只需要删除数组的最后一个元素即可, 将要删除的数字和数组的最后一个数字调换个位置，然后修改对应的 HashMap 中的值，
# 返回随机数： 只要随机生成一个位置，返回该位置上的数字即可


import random
class RandomizedSet(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.nums = []
        self.dic = {}

    def insert(self, val):
        """
        Inserts a value to the set. Returns true if the set did not already contain the specified element.
        :type val: int
        :rtype: bool
        """
        
        # insert to the end the list， 
        if val in self.dic:
            return False
        
        self.nums.append(val)
        self.dic[val] = len(self.nums) - 1
        return True
        

    def remove(self, val):
        """
        Removes a value from the set. Returns true if the set contained the specified element.
        :type val: int
        :rtype: bool
        """
        # exchange val with end and the remove
        if val not in self.dic:
            return False
        
        if val != self.nums[-1]:
            # exchange end val with remove val
            index_val = self.dic[val]
            end = self.nums[-1]
            
            self.dic[end], self.dic[val] = self.dic[val], self.dic[end]
            self.nums[index_val] = end
            
        self.nums.pop()
        del self.dic[val]
        
        return True
        
        

    def getRandom(self):
        """
        Get a random element from the set.
        :rtype: int
        """
        rand = random.randint(0, len(self.nums) - 1)
        return self.nums[rand]
        
