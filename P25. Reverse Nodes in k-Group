# time O(n)
# space O(1)

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        
        count = 0
        p = head
        
        while p and count < k:
            count += 1
            p = p.next
            
        if count < k:
            return head
        
        next_head, new_head = self.reverse(head, k)
        head.next = self.reverseKGroup(next_head, k)
        return new_head
    
    def reverse(self, head, k):
        cur = head
        prev = None

        while k:
            nxt = cur.next
            cur.next = prev
            prev = cur
            cur = nxt # 易错
            k -= 1
        return cur, prev
