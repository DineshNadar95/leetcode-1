# 思路:
    recursion 递归
    # if len < k, return head
    
    recursion part, first k reverse, after first k, call recursion fun, return head
    # revserse first nodes at a time and return new head, return new_h, new_t
    # new_t.next = reverseKGraoup(after k)
    
    
# time O(n)
# space O(n/k)

class Solution(object):
    def reverseKGroup(self, head, k):
        
        cur = head
        count = 0
        while cur:
            count += 1
            cur = cur.next 
            if count == k:
                break
        if count < k:
            return head
        
        new_h, new_t = self.reverse(head, k)
        print(new_h, new_t)
        new_t.next = self.reverseKGroup(cur, k)
        return new_h
    
    def reverse(self, node, k):
        prev = None
        cur = node
        nxt = None
        
        while k > 0:
            nxt = cur.next
            cur.next = prev
            prev = cur 
            cur = nxt
            k -= 1
            
        return prev, node
