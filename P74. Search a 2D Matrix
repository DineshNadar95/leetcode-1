# sol1 : brute force 
# step: start from the right most ele in the first line (t = 11), 
  i = 0, j = 3, if m[i][j] == t, return True, elif < t, j + 1 else, i + 1
  return False
# time O(m + n)

[1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
  
class Solution(object):
    def searchMatrix(self, matrix, target):
    
        if not matrix:
            return False
        
        i = 0
        j = len(matrix[0]) - 1
        
        while i < len(matrix) and j >= 0:
            if matrix[i][j] == target:
                return True
            elif matrix[i][j] < target:
                i += 1
            else:
                j -= 1
        return False
  
  # sol2 : binary search
  # time O(log(m * n))
  # space O(1)
    注意到输入的 m x n 矩阵可以视为长度为 m x n的有序数组。
    该有序数组非常适合二分查找。row = idx // n ， col = idx % n。
      
  
class Solution(object):
    def searchMatrix(self, matrix, target):
        
        if not matrix or not matrix[0]:
            return False
        
        m = len(matrix)
        n = len(matrix[0])
        
    
        l = 0
        r = m * n - 1
        while l + 1 < r:
            mid = (l + r) // 2
            pivot = matrix[mid // n][mid % n]
            if pivot <= target:
                l = mid 
            else:
                r = mid
        
        if matrix[l // n][l % n] == target or matrix[r // n][r % n] == target:
            return True
        return False
                
