# recursion + dfs
# two layers dfs
# time O(nlgn) ~ O(n ^ 2)
# space O(n)

class Solution(object):
    def pathSum(self, root, sum):
        
        if not root:
            return 0
        return self.dfs(root, sum) + self.pathSum(root.left, sum) + self.pathSum(root.right, sum)
    
    def dfs(self, node, sum): # num of paths that start from node, path sum == sum
        
        if not node:
            return 0
        
        res = (node.val == sum)
        res += self.dfs(node.left, sum - node.val)
        res += self.dfs(node.right, sum - node.val)
        return res
        
sol2 : memo with path sum
# time O(n)
# space O(n)

class Solution(object):
    def pathSum(self, root, sum):
 
        self.memo = {0:1}
        return self.dfs(root, 0, sum)
    
    def dfs(self, root, prevSum, sum):
        if not root:
            return 0
        
        count = 0
        currSum = prevSum + root.val
        if currSum - sum in self.memo:
            count += self.memo[currSum - sum]
        if currSum in self.memo:
            self.memo[currSum] += 1
        else:
            self.memo[currSum] = 1
        count += self.dfs(root.left, currSum, sum)
        count += self.dfs(root.right, currSum, sum)
        self.memo[currSum] -= 1
        return count
