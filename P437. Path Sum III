# recursion + dfs
# two layers dfs
# time O(nlgn) ~ O(n ^ 2)
# space O(n)

路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点） 。这就要求我们只需要去求三部分即可：
-以当前节点作为头结点的路径数量
-以当前节点的左孩子作为头结点的路径数量
-以当前节点的右孩子作为头结点啊路径数量


class Solution(object):
    def pathSum(self, root, sum):
        
        if not root:
            return 0
        return self.dfs(root, sum) + self.pathSum(root.left, sum) + self.pathSum(root.right, sum)
    
    def dfs(self, node, sum): # num of paths that start from node, path sum == sum
        
        if not node:
            return 0
        
        res = (node.val == sum)
        res += self.dfs(node.left, sum - node.val)
        res += self.dfs(node.right, sum - node.val)
        return res
        
sol2 : memo with prefix sum

# time O(n)
# space O(n)

class Solution(object):
    def pathSum(self, root, sum):
 
        self.memo = {0:1}
        return self.dfs(root, 0, sum)
    
    def dfs(self, node, prev_sum, sum):
        if not node:
            return 0
        
        res = 0
        cur_sum = prev_sum + node.val
        if cur_sum - sum in self.memo:
            res += self.memo[cur_sum - sum]
            
        if cur_sum in self.memo:
            self.memo[cur_sum] += 1
        else:
            self.memo[cur_sum] = 1
            
        res += self.dfs(node.left, cur_sum, sum)
        res += self.dfs(node.right, cur_sum, sum)
        self.memo[cur_sum] -= 1
        
        return res
