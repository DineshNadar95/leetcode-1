class HitCounter(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.time = collections.deque([])

    def hit(self, timestamp):
        """
        Record a hit.
        @param timestamp - The current timestamp (in seconds granularity).
        :type timestamp: int
        :rtype: None
        """
        self.time.append(timestamp)
        

    def getHits(self, timestamp):
        """
        Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity).
        :type timestamp: int
        :rtype: int
        """
        while self.time and timestamp - self.time[0] >= 300:
            self.time.popleft()
        return len(self.time)
        

# follow up: if number of hits per second is large, in order to save space, we can use dic
# key:time, value: num of hits at this time
class HitCounter(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.dic = collections.defaultdict(int)
        

    def hit(self, timestamp):
        """
        Record a hit.
        @param timestamp - The current timestamp (in seconds granularity).
        :type timestamp: int
        :rtype: None
        """
        self.dic[timestamp] += 1

    def getHits(self, timestamp):
        """
        Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity).
        :type timestamp: int
        :rtype: int
        """
        res = 0
        for i in range(timestamp, timestamp - 300, -1):
            res += self.dic[i]
        return res
