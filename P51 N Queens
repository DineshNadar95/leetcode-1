# we only need to iterate over the columns and assume that we add per queen a line.

# brute force
# all possible ways, N^N (n queens and each have n possible positions)


# sol2: dfs with constraints
当在棋盘上放置了一个皇后后，立即排除当前行，列和对应的两个对角线。该过程传递了 约束 从而有助于减少需要考虑情况数

# using backtracking O(n!)
There could be the only one queen in a row and the only one queen in a column.
That means that there is no need to consider all squares on the board. One could just iterate over the columns.

cclass Solution(object):
    def solveNQueens(self, n):
        
        self.res = []
        cols = [-1 for _ in range(n)]
        self.dfs(cols, n, 0, [])
        return self.res
    
    def dfs(self, cols, n, cur_q, cur_path):
        if cur_q == n:
            self.res.append(cur_path)
            return 
        
        for i in range(n):
            if self.is_valid(cols, cur_q, i):
                cols[cur_q] = i
                cur_q_path = '.' * n
                cur_q_path = [cur_q_path[:i] + 'Q' + cur_q_path[i + 1:]]
                self.dfs(cols, n, cur_q + 1, cur_path + cur_q_path)
        
    def is_valid(self, cols, cur_q, i):
        cols[cur_q] = i
        for q in range(cur_q):
            if cols[q] == cols[cur_q] or abs(q - cur_q) == abs(cols[q] - cols[cur_q]):
                return False
        return True
    
