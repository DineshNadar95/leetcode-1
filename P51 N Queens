# we only need to iterate over the columns and assume that we add per queen a line.

# brute force
# all possible ways, N^N^2 (n queens and each have n possible positions)


# sol2: dfs with constraints
当在棋盘上放置了一个皇后后，立即排除当前行，列和对应的两个对角线。该过程传递了 约束 从而有助于减少需要考虑情况数

# using backtracking O(n!)
There could be the only one queen in a row and the only one queen in a column.
That means that there is no need to consider all squares on the board. One could just iterate over the columns.

class Solution(object):
    def solveNQueens(self, n):
        
        self.res = []
        self.dfs(n, [-1 for _ in range(n)], 0, [])
        return self.res
    
    def dfs(self, n, cols, cur_q, cur_p):
        if cur_q == n:
            self.res.append(cur_p)
            return 
        
        for i in range(n):
            cols[cur_q] = i
            if self.valid(cols, cur_q):
                tmp = '.' * n
                self.dfs(n, cols, cur_q + 1, cur_p + [tmp[:i] + 'Q' + tmp[i + 1 : ]])
                
    def valid(self, cols, cur_q):
        for i in range(cur_q):
            if cols[i] == cols[cur_q] or abs(cur_q - i) == abs(cols[cur_q] - cols[i]):
                return False
        return True
