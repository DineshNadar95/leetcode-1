# dp
# dp[i]: num of unique BST's (binary search trees) that store values 1 ... i
# transmation formula
# for root in 1 to i, dp[i] += dp[l] * dp[r] (dp[root - 1] * dp[i - root])


# time O(n^2)
# space O(n)


class Solution(object):
    def numTrees(self, n):

        dp = [0 for _ in range(n + 1)]
        dp[0] = 1
        
        for i in range(1, len(dp)):
            for root in range(1, i + 1):
                dp[i] += dp[root - 1] * dp[i - root]
        return dp[-1]
                
