# 最短路径 BFS
# time O(n^2)
# space O(n^2)

class Solution(object):
    def snakesAndLadders(self, board):
        """
        :type board: List[List[int]]
        :rtype: int
        """
        self.n = len(board)
        seen = set()
        queue = collections.deque([(1, 0)])
        seen.add((1, 0))
        while queue:
            label, step = queue.popleft()
            # current position
            r, c = self.label_to_position(label)
            
            if board[r][c] != -1:
                label = board[r][c]
            if label == self.n * self.n:
                return step
            for x in range(1, 7):
                new_label = label + x
                if new_label <= self.n * self.n and new_label not in seen:
                    seen.add((new_label))
                    queue.append((new_label, step + 1))
        return -1
                
    def label_to_position(self, label):
        r, c = divmod(label - 1, self.n)
        if r % 2 == 0:
            return self.n - 1 - r, c
        else:
            return self.n - 1- r, self.n - 1 - c
        
        
