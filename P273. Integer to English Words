# divide and conquer分治

1. < 20
2. < 100
3. < 1000
4. thousand, mill, bill

# recursive time O(n)
# space O(n), recursion depth

class Solution(object):
    def numberToWords(self, num):
        if num == 0:
            return 'Zero'
        
        self.to_19 = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']
        self.tens = ['Twenty','Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty',  'Ninety']
        
        return ' '.join(self.recursion(num))
    
    def recursion(self, n):
        if n < 20:
            return self.to_19[n - 1 : n]
        
        if n < 100:
            return [self.tens[n // 10 - 2]] + self.recursion(n % 10)
        
        if n < 1000:
            return [self.to_19[n // 100 - 1]] + ['Hundred'] + self.recursion(n % 100)
        
        for i, val in enumerate(['Thousand', 'Million', "Billion"]):
            if n < 1000 ** (i + 2):
                return self.recursion(n // (1000 ** (i + 1))) + [val] + self.recursion(n % (1000 ** (i + 1)))
        
