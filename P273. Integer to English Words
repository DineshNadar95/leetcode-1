# divide and conquer分治

1. < 20
2. < 100
3. < 1000
4. thousand, mill, bill

# recursive time O(n)
# space O(n), recursion depth

class Solution(object):
    def numberToWords(self, num):
        
        if num == 0:
            return 'Zero'
        
        self.to_19 = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']
        self.tens = ['Twenty','Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty',  'Ninety']
        
        words = self.dfs(num)
        return ' '.join(words)
    
    
    def dfs(self, num):
        if num < 20:
            return self.to_19[num - 1 : num]
        if num < 100:
            return [self.tens[num // 10 - 2]] + self.dfs(num % 10)
        if num < 1000:
            return [self.to_19[num // 100 - 1]] + ['Hundred'] + self.dfs(num % 100)
        
        vals = ['Thousand', 'Million', 'Billion']
        
        for i, val in enumerate(vals): # 1000, thousand; 1000 * 1000 million; 1000 ** 3 billion
            if num < 1000 ** (i + 2):
                return self.dfs(num // (1000 ** (i + 1))) + [vals[i]] + self.dfs(num % (1000 ** (i + 1)))
                
        
