# twice partition, O(n) time 
class Solution(object):
    def sortColors(self, nums):
        
        j = self.sort(nums, 0, 0)
        self.sort(nums, j, 1)
        return nums

    def sort(self, nums, start, flag):
        fast = start
        slow = start
        
        for fast in range(start, len(nums)):
            if nums[fast] == flag:
                nums[slow], nums[fast] = nums[fast], nums[slow]
                slow += 1
        return slow
                
                                
                
 # one pass  Three pointers
 # time O(n)
 # space O(1)
 
  000 111 222 

i用来遍历整个数组，碰到0把它和p0指向的数交换，碰到2把它和p2指向的数交换，碰到1继续向后遍历

# one time partition
class Solution:
    def sortColors(self, nums: List[int]) -> None:

        i = 0
        j = len(nums) - 1
        index = 0
        
        while index <= j:
            if nums[index] == 0:
                nums[i], nums[index] = nums[index], nums[i]
                i += 1
                index += 1
            elif nums[index] == 2:
                nums[index], nums[j] = nums[j], nums[index]
                j -= 1
            else:
                index += 1
