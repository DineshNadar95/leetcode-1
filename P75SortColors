# twice partition, O(n) time 


class Solution(object):
    def sortColors(self, nums):
        n = len(nums)
        index = self.sort_two(nums, 0, n - 1, 0)
        self.sort_two(nums, index, n - 1, 1)
        
        
    def sort_two(self, nums, i, j, flag):
        while i <= j:
            while i <= j and nums[i] == flag:
                i += 1
            while i <= j and nums[j] != flag:
                j -= 1
            
            if i <= j:
                nums[i], nums[j] = nums[j], nums[i]
                i += 1
                j -= 1
        return i
                

class Solution(object):
    def sortColors(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        
        n = len(nums)
        index = self.sort_two(nums, 0, 0, 0)
        self.sort_two(nums, index, index, 1)
        
        
    def sort_two(self, nums, i, j, flag):
        while j < len(nums):
            if nums[j] == flag:
                nums[i], nums[j] = nums[j], nums[i]
                i += 1
                j += 1
            else:
                j += 1
        return i
                
                
                
 # one pass  Three pointers
 # time O(n)
 # space O(1)
 
  000 111 222 

i用来遍历整个数组，碰到0把它和p0指向的数交换，碰到2把它和p2指向的数交换，碰到1继续向后遍历

# one time partition
class Solution:
    def sortColors(self, nums: List[int]) -> None:

        i = 0
        j = len(nums) - 1
        index = 0
        
        while index <= j:
            if nums[index] == 0:
                nums[i], nums[index] = nums[index], nums[i]
                i += 1
                index += 1
            elif nums[index] == 2:
                nums[index], nums[j] = nums[j], nums[index]
                j -= 1
            else:
                index += 1
