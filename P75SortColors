# twice partition, O(n) time 

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        index  = self.sort(nums, 0, 0)
        self.sort(nums, 1, index)
        
    def sort(self, nums, flag, start):
        left = start
        right = len(nums) - 1 
        while left <= right:
            while left <= right and nums[left] == flag:
                left += 1
            while left <= right and nums[right] != flag:
                right -= 1
            if left <= right:
                nums[left], nums[right] = nums[right], nums[left]
                left += 1
                right -= 1
        return left
        
 # one pass  Three pointers
 # time O(n)
 # space O(1)
 
  000 111 222 

i用来遍历整个数组，碰到0把它和p0指向的数交换，碰到2把它和p2指向的数交换，碰到1继续向后遍历

# one time partition
class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        # one time partition 

        
        left, index, right = 0, 0, len(nums) - 1
        while index <= right:
            if nums[index] == 0:
                nums[left], nums[index] = nums[index], nums[left]
                index += 1
                left += 1
            elif nums[index] == 2:
                nums[index], nums[right] = nums[right], nums[index]
                # 注意右边换过来的需要再查一遍
                right -= 1
            else:
                index += 1
