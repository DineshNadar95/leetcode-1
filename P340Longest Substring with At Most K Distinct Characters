# time O(n)
# space O(k)

class Solution(object):
    def lengthOfLongestSubstringKDistinct(self, s, k):
        
        
        res = 0
        c_s = collections.defaultdict(int)
        r = 0
        for l in range(len(s)):
            while r < len(s) and (len(c_s) < k or (len(c_s) == k and s[r] in c_s)):
                c_s[s[r]] += 1
                r += 1
                
            res = max(res, r - l)
            
            if c_s[s[l]] == 1:
                del c_s[s[l]]
            else:
                c_s[s[l]] -= 1
        return res
            
                
class Solution:
    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:
        counter = collections.defaultdict(int)
        j = 0
        res = 0
        for i in range(len(s)):

            while j < len(s) and (s[j] in counter or (s[j] not in counter and len(counter) < k)):
                counter[s[j]] += 1
                j += 1

            res = max(res, j - i)
            
            if s[i] in counter:
                counter[s[i]] -= 1
                if counter[s[i]] == 0:
                    del counter[s[i]]
                
        return res
                
                
