# time O(n)
# space O(k)

class Solution(object):
    def lengthOfLongestSubstringKDistinct(self, s, k):
        
        c_s = collections.Counter(s)
        if c_s <= k:
            return len(s)
        
        res = 0
        c_s = collections.defaultdict(int)
        l = 0
        r = 0
        for l in range(len(s)):
            while r < len(s) and (len(c_s) < k or (len(c_s) == k and s[r] in c_s)):
                c_s[s[r]] += 1
                r += 1
                
            res = max(res, r - l)
            
            if c_s[s[l]] == 1:
                del c_s[s[l]]
            else:
                c_s[s[l]] -= 1
        return res
            
                
