# time O(n)
# space O(k)

class Solution:
    
    def lengthOfLongestSubstringKDistinct(self, s, k):
        
        left = 0
        right = 0
        res = 0
        count = collections.defaultdict(int)
        
        for left in range(len(s)):
            
            #易错 1.  s[right] in count当 len(count) == k ,但是s[right]的增加不会加入新的key
            while right < len(s) and (len(count) < k or s[right] in count):
                count[s[right]] += 1
                right += 1
            
            res = max(res, right - left)
            
            # 易错2  count[s[left]] > 1
            if count[s[left]] > 1:
                count[s[left]] -= 1
            else:
                del count[s[left]]
        return res
                
