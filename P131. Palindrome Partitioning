# 1 看到 all possible palindrome partitioning就应该想到dfs(backtracking)
# 回溯的条件是目前的结果已经是回文串
# time O(2^n)
class Solution(object):
    def partition(self, s):
        """
        :type s: str
        :rtype: List[List[str]]
        """
        self.is_palindrome = lambda s: s == s[::-1]
        res = []
        self.dfs(s, res, [])
        return res
        
    def dfs(self, s, res, path):
        if not s:
            res.append(path)
            return 
        
        for i in range(1, len(s) + 1):
            if self.is_palindrome(s[:i]):
                self.dfs(s[i:], res, path + [s[:i]])
                
                
# sol2 bottom-up dp
class Solution(object):
    def partition(self, s):
        """
        :type s: str
        :rtype: List[List[str]]
        """
        dp = [[] for i in range(len(s) + 1)]
        dp[-1] = [[]]
        for i in range(len(s) - 1, -1, -1):
            for j in range(i + 1, len(s) + 1):
                if s[i : j] == s[i : j][::-1]:
                    for each in dp[j]:
                        dp[i].append([s[i:j]] + each)
        return dp[0]


