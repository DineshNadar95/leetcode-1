# brute force
# each substring in s, check if t is subsequence in this substring
# O(m^2 * n)


# two pointer
# time O(mn)
# space O(1)

# Find subsequence in S containing T, and return ending index in S
# Improve subsequence by searching from right-left, to find best starting index in S

e.g.

S = a b a c b c d f e g .
T = bcde

i = 0 1 2 3 4 5 6 7 8 9
find subsequence - bacbcdfe, end = 8
improve subsequence- bcdfe, start = 4
length = 5
Repeat next subsequence search at index 5 (start+1)

class Solution(object):
    def minWindow(self, S, T):
        
        m = len(S)
        n = len(T)
        
        self.min_len = sys.maxsize
        self.res = ''
        i = 0
        j = 0
        
        while i < m:
            if S[i] != T[j]:
                i += 1
            else:
                if j + 1 != n:
                    i += 1
                    j += 1
                else:
                    end = i 
                    i, j = self.move_back(S, T, i, j)
                    self.check_candidate(S, i, end)
                    i += 1
                    
        if self.min_len == sys.maxsize:
            return ''
        return self.res 
    
    def move_back(self, S, T, i, j):
        while j >= 0:
            while S[i] != T[j]:
                i -= 1
            j -= 1
            i -= 1
        return [i + 1, 0]
    
    def check_candidate(self, S, i, end):
        
        if end - i + 1 < self.min_len:
            self.min_len = end - i + 1
            self.res = S[i : end + 1]
        
        
