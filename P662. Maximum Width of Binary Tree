# 思路 level order traversal
# node i, left:2i, right:2i + 1
# width for the level is rightmost - leftmost + 1
# get the max of all widths

# time O(n)
# space O(n)

class Solution(object):
    def widthOfBinaryTree(self, root):
        
        if not root:
            return 0
        
        q = collections.deque([(root, 0)])
        res = 0
        while q:
            level = []
            for _ in range(len(q)):
                node, index = q.popleft()
                level.append(index)
                if node.left:
                    q.append([node.left, 2 * index])
                if node.right:
                    q.append([node.right, 2 * index + 1])
            
            res = max(res, level[-1] - level[0] + 1)
        return res
