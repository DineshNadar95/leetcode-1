# letter of combination 
'''
LC17 phone combination, Follow up: multiple digits to character eg "1 -> abc, 2 -> def, 23 -> qwert”
'''

class Solution(object):
    def letterCombinations(self, digits):
        
        if not digits:
            return []
        
        self.dic = {'2':'abc', '3':'def', '23':'qwert', '4':'ghi', '5':'jkl', '6':'mno', '7':'pqrs', 
                '8':'tuv', '9':'wxyz'}
        
        self.res = []
        self.dfs(digits, 0, '')
        return self.res
    
    def dfs(self, digits, index, cur_path):
        if index == len(digits):
            self.res.append(cur_path)
            return 
        
        for char in self.dic[digits[index]]:
            self.dfs(digits, index + 1, cur_path + char)
            
        if index + 1 < len(digits) and digits[index : index + 2] in self.dic:
            for char in self.dic[digits[index:index + 2]]:
                self.dfs(digits, index + 2, cur_path + char)
            
        
test = Solution()
digits = '23'
print(test.letterCombinations(digits))                                 


# decode ways
# 注意: '0' can't be decoded
class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if s[0] == '0':
            return 0
        dp = [0] * (len(s) + 1)
        dp[0] = 1
        for i in range(1, len(dp)):
            if s[i - 1] != '0':
                dp[i] = dp[i - 1]
            if i >= 2 and 10 <= int(s[i - 2 : i]) <= 26:
                dp[i] += dp[i - 2]
        return dp[-1]
        

class Solution(object):
    def decodeWays(self, s):
        """
        :type points: List[List[int]]
        :rtype: bool
        """
        self.num_char = {1:'A', 2: "B", 3 : "C", 4 : "D", 5:"E" ,6:  "F", 7: "G",     8:"H", 
      9:"I", 10: "J", 11:"K", 12:"L",  13 :"M", 14: "N", 15: "O",
     16: "P", 17: "Q",  18: "R", 19: "S", 20: "T",21: "U", 22: "V", 
     23: "W", 24: "X",25: "Y", 26: "Z" }
        
        self.res = []
        self.dfs(s, 0, '')
        return self.res
    
    def dfs(self, s, index, cur_path):
        if index == len(s):
            self.res.append(cur_path)
            return 
        
        if s[index] != '0':
            self.dfs(s, index + 1, cur_path + self.num_char[int(s[index])])
        if 10 <= int(s[index: index + 2]) <= 26:
            self.dfs(s, index + 2, cur_path + self.num_char[int(s[index : index + 2])])
            
                     
test = Solution()
print(test.decodeWays("226"))



'''
class Solution(object):
    def isConvex(self, points):
        """
        :type points: List[List[int]]
        :rtype: bool
        """
        def getdir(i):
            x0,y0 = points[i-2]
            x1,y1 = points[i-1]
            x2,y2 = points[i]
            tmp = (y1-y0) * (x2-x1) - (x1-x0) * (y2-y1)
            
            if tmp > 0:
                return 1
            elif tmp < 0:
                return -1
            else:
                return 0
            
        res = [getdir(i) for i in range(len(points))]
        print(res)
        set_ = set(getdir(i) for i in range(len(points)) if getdir(i))
        
        return len(set_) == 1             
                            
test = Solution()
print(test.isConvex([[0,0],[0,1],[1,1],[1,0]]))

'''

# “12.123.1.213” true
# "0..12.324" false
'''
s = '0..12.324'
print(s.split('.'))

'''  
def isValid(s):
    if not s:
        return False
    
    res = False
    
    def dfs(s, num_part):
        if num_part == 4:
            if not s:
                res = True
            return
        
        for i in range(1, 4):
            if i < len(s):
                if int(s[:i]) <= 255:
                    dfs(s[i:], num_part + 1)
            if s and s[0] == '0':
                break
                
        #return False
                       
    dfs(s,0)
    return res

print(isValid('10000'))
'''

'''
class Solution(object):
    def validTicTacToe(self, board):
        """
        :type board: List[str]
        :rtype: bool
        """
        # count_x , count_ o
        # count_x == count_o or count_x == count_o + 1
        
        # check win
        # if o win, x can't win and count_x == count_o
        # if x win, o can't win and count_x == count_o + 1
        
        count_x = 0
        count_o = 0
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == "X":
                    count_x += 1
                elif  board[i][j] == "O":
                    count_o += 1
        
        if count_o > count_x or count_x - count_o>1:
            return False
        
        if self.check_win(board, '0'):
            if self.check_win(board, 'X'):
                return False
            return count_x == count_o
        
        if self.check_win(board, 'X') and count_x != count_o +1:
            return False
        return True
    
        #if self.check_win(board, 'X'):
            #if self.check_win(board, '0'):
                #return False
            #return count_x == count_o + 1
        
        
    def check_win(self, board, player):
        # check row
        for i in range(len(board)):
            if board[i][0] == board[i][1] == board[i][2] == player:
                return True                        

        #Check the columns
        for i in range(len(board)):
            if board[0][i] == board[1][i] == board[2][i] == player:
                return True 
                                        
        #Check the diagonals
        if board[0][0] == board[1][1] == board[2][2]  == player or \
               board[0][2] == board[1][1] == board[2][0] == player:
            return True
                        
        return False
        
 # design tic-tac-toe, use scanner input and print result each move
 class TicTacToe(object):

    def __init__(self, n):
        
        self.board = [[0] * n for _ in range(n)]
        self.n = n

    def move(self):
        row = int(input('Please input your row:'))
        col = int(input('Please input your col:'))
        player = int(input('Please input the current player:'))
        offset = 0
        if player == 1:
            offset = 1
        else:
            offset = -1
            
        self.board[row][col] = offset
        # check win
        check_row = sum(self.board[row][c] == offset for c in range(self.n))
        check_col = sum(self.board[r][col] == offset for r in range(self.n))
        check_diag = sum(self.board[i][i] == offset for i in range(self.n))
        check_anti_diag = sum(self.board[j][self.n - 1- j] == offset for j in range(self.n))
        
        print(self.board)
        if self.n in [check_row, check_col, check_diag, check_anti_diag]:
            return player
        return 0
            
        
game = TicTacToe(3)
print(game.move())
print(game.move())
print(game.move())
        
            
'''
问如果给一个现在棋盘的state （state就是棋盘上现在所有棋的位置和轮到哪个玩家）， 返回all possible moves。
'''

class Solution(object):
    def Checker(self, board, player):
        
 
        if player == 'X': # move download
            offset = 1
        else:
            offset = -1 # move up
        
        res = []
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == player:
                    for dx, dy in [(offset, -1), (offset, 1)]:
                        x = i + dx
                        y = j + dy
                        #print((i, j), (x, y))
                        if 0 <= x < len(board) and 0 <= y < len(board[0]) and not board[x][y]:
                            res.append(((i, j), (x, y)))
        return res
                    
        
test = Solution()
board = board = [['X', 'X', 'X', 'X'], ['', '', '', ''], ['', '', '', ''],['O', 'O', 'O', 'O']]
player = 'X'
print(test.Checker(board, player))
                           
 # follow up 1 add king
 class Solution(object):
    def Checker(self, board, player):
        
     
        if player == 'X': # move download
            offset = 1
        elif player == 'O':
            offset = -1 # move up
            
            
        directions = [(offset, 1), (offset, -1)]
        dir_kings = [(1, -1), (1, 1), (-1, 1), (-1, -1)]
        
        res = []
        for i in range(len(board)):
            for j in range(len(board[0])):
                
                if board[i][j] == player:
                    cur_dirs = directions
                elif board[i][j].startswith(player) and board[i][j] != player:
                    directions = dir_kings
                else:
                    continue
                
                for dx, dy in directions:
                    x = i + dx
                    y = j + dy
                    if 0 <= x < len(board) and 0 <= y < len(board[0]) and not board[x][y]:
                        res.append(((i, j), (x, y)))
        return res
                    
        
test = Solution()
board = board = [['X', 'X', '', 'X'], ['XK', '', '', ''], ['', '', 'OK', ''],['O', 'O', '', 'O']]
player = 'O'
print(test.Checker(board, player))
                           
            
 # follow up2: can eat component by jumping over
 class Solution(object):
    def Checker(self, board, player):
        
                    
        if player == 'X': # move download
            offset = 1
        elif player == 'O':
            offset = -1 # move up
            
        directions = [(offset, 1), (offset, -1)]
        dir_kings = [(1, -1), (1, 1), (-1, 1), (-1, -1)]
        
        res = []
        for i in range(len(board)):
            for j in range(len(board[0])):
                
                if board[i][j] == player:
                    cur_dirs = directions
                elif board[i][j].startswith(player) and board[i][j] != player:
                    cur_dirs = dir_kings
                else:
                    continue
                
                for dx, dy in cur_dirs:
                    x = i + dx
                    y = j + dy
                    if 0 <= x < len(board) and 0 <= y < len(board[0]) and not board[x][y]:
                        res.append(((i, j), (x, y)))
                    elif 0 <= x < len(board) and 0 <= y < len(board[0]) not board[x][y].startswith(player):
                        # eat componnet 1, eat directly res.append(((i, j), (x, y)))
                        # eat component, jump over
                        if 0 <= i + 2 * dx < len(board) and 0 <= j + 2 * dy < len(board[0]) and not board[x][y]:
                            res.append(((i,j), (i + 2 * dx, j + 2 * dy)))
        return res
                           
                             
        
# "let us go to the supermarket to get the to go bundle" 
# n = 5
# Every word is picked randomly after the last occurrence, if it is the end of the string next round back to first one. First word is picked randomly from any of the words.

# "go bundle let us go" 
import random
import collections
class Solution2(object):
    def generate_sent(self, s, n):
        self.words = s.split()
        # dic : key word, value: next index
        self.dic = collections.defaultdict(list)
        self.m = len(self.words)
        for i, word in enumerate(self.words):
            if i == self.m - 1:
                self.dic[word].append(0)
            else:
                self.dic[word].append(i + 1)
        #print(self.dic)
        cur = random.randint(0, self.m - 1)
        #res.append(words[cur])
        res = []
        self.get_next(cur, res)
        return ' '.join(res)
        
        
        
    def get_next(self, cur, res):
        if len(res) == 5:
            return 
        
        res.append(self.words[cur])
        next_ = random.choice(self.dic[self.words[cur]]) 
        self.get_next(next_, res)
                
test = Solution2()
print(test.generate_sent("let us go to the supermarket to get the to go bundle" , 5))

# use for loop
import random
import collections
class Solution(object):
    def geneSent(self, words, n):
        words = words.split(' ')
        m = len(words)
        
        # key: word, value: possible adj idnexes
        dic = collections.defaultdict(list)
        for i, word in enumerate(words):
            if i == m - 1:  
                dic[word].append(0)
            else:
                dic[word].append(i + 1)
                
        # gene first word
        first = words[random.randint(0, m - 1)]
        res = []
        res.append(first)
        cur_word = first
        for j in range(1, n):
            nxt_index = random.choice(dic[cur_word])
            nxt_word = words[nxt_index]
            res.append(nxt_word)
            cur_word = nxt_word
        return ' '.join(res)
            
test = Solution()
words = 'he is a boy she is a girl is a god'
print(test.geneSent(words, 4))


# follow up
import collections
import random
class Solution(object):
    def generateSentence(self, s, n, k):
        s = s.split()
        # key k word, value:possible next index 
        self.m = len(s)
        self.dic = collections.defaultdict(list)
        double_s = s + s
        # key is 
        for i in range(self.m):
            # current three words i
            cur_word=double_s[i : i + k]
            key = ' '.join(cur_word)
            self.dic[key].append((i + k) % self.m)
            
        #print(self.dic)
        
        res = []
        start_i = random.randint(0, self.m - 1)
        cur = double_s[start_i:start_i + k]
        res += cur
        
        # res first k
        for i in range(k, n):
            nxt_index = random.choice(self.dic[' '.join(cur)])
            nxt_word = [s[nxt_index]]
            res += nxt_word
            cur = res[len(res) - k:]
        #print(res)
        return ' '.join(res)
        

test = Solution()
s = 'he is a boy she is a girl is a god'
k = 2
n = 5
print(test.generateSentence(s, n, k))


'''
design一个朋友们一起出游的时候，记账的app 。就是途中可能有人支付了油费，有人买了饭。在旅途结束的时候，你的app 能不能算出每个人的balance。就是每个人是欠别人钱，还是别人欠他钱。

大概就是用几个class variable 记下已经发生的开销吧，然后有一个算账的function可以随时根据这些class variable 算钱。


'''

        
            
        
# push
# begin : begin new transaction
# commit : end current transaction, 结束transaction并保留所有ele
# rollback : remove 删掉当前transaction的所有元素
'''
12.    一个stack
可以begin, commit, rollback, push, pop

例子：
push 1
begin
push 2   
push 3
rollback
pop1

最后是空的
begin, commit, rollback 可以无限nesting
'''
class TransactionStack(object):
    def __init__(self):
        self.stack = []
        self.transactions = []
        
    
    def push(self, num):
        if not self.transactions:
            self.stack.append(num)
        else:
            self.transactions[-1].append(num)
            
    def pop(self):
        if not self.transactions:
            if self.stack:
                self.stack.pop()
        else:
            self.transactions[-1].pop()
            
            
    def begin(self):
        self.transactions.append([])
        
    def rollback(self):
        if self.transactions:
            self.transactions.pop()
       
    def commit(self):
        if self.transactions:
            # [2,]
            # [2, [3, 5])
            # tmp [5, 3]
            cur_trans = self.transactions.pop()
            tmp = []
            while cur_trans:
                n = cur_trans.pop()
                tmp.append(n)
            while tmp:
                n = tmp.pop()
                self.stack.append(n)
'''
push 1
begin
push 2   
push 3
rollback
pop1
'''
test =  TransactionStack()
test.push(1)
test.begin()
test.push(2)
test.push(3)
#print(test.transactions)
test.rollback()
print(test.transactions)
print(test.stack)
test.pop()
print(test.transactions)
print(test.stack)
                
            
           
                    
1.    第一轮：面试就一个小时，前5分钟聊了下简历和公司，然后就开始用coderpad做题。
                -题目给了 List<List<String>> prefs, 记录了一个team里面每个人喜欢吃的餐馆。
                -先是 return 出现次数最高的餐馆。
                -followup 1: 每个人的preference list是有order的，最喜欢的到最不喜欢的。如果把这个ranking考虑进去的话，return 大家都比较满意的餐厅。
                -followup 2: 如果未来还有别的factor要考虑的话，比如distance啊什么的。你会怎么写code, 怎么refactor to save code 呢?

楼主请问followup1 的做法是先找 每个人的common restaurants, 然后把index 作为rank, index 越小 餐厅在这个人的list 中的rank 越高.最后取和rank 和最小的餐厅?
楼主怎么做，return 次数最多无疑是O(n * n)遍历list求top k，followup1是类似协同过滤实现推荐top k吗，还有followup2完全没有思路

'''
class Solution(object):
    def __init__(self):
        self.dic = {}
        
    def favo(self, prefs):
        # key: res, value:count
        for pref in prefs:
            for res in pref:
                self.dic[res] = self.dic.get(res, 0) + 1
        restaurants = list(self.dic.keys())
        restaurants.sort(key = lambda x: -self.dic[x])
        return restaurants[0]
    
    def add_order(self, prefs):
        # add weight in each person, can be 
        for pref in prefs:
            for rank, res in enumerate(pref):
                self.dic[res] = self.dic.get(res, 0) + rank   
        
    def add_dis(self, distance):
        # rank of near to far 
        for rank, res in enumerate(distance):
            self.dic[res] = self.dic.get(res, 0) + rank
          
    # return res, with smallest rank
    def get_favo(self):
    
        restaurants = list(self.dic.keys())
        restaurants.sort(key = lambda x: self.dic[x])
        return restaurants[0]
        
    def get_ranks(self):
        return self.dic
        
        
test = Solution()
prefs = [['B', 'C'], ['B', 'A'], ['C', 'A']]
distance = ['A', 'B', 'C']
test.add_order(prefs)
test.add_dis(distance)

print(test.get_favo())
print(test.get_ranks())
                           
       

'''
一轮地里的换卡的那个题 eg：  钱包里有2个红色 2个绿色. 想买黑色已知黑色可以用2个红色买   问能不能买。   follow up 是discount。   这个题当时就没太明白 所以我也说不太明白
'''

import enum
class Color(enum.Enum):
    BLACK = 1
    RED = 2
    GREEN = 3
    WHITE = 4
    
class Card(object):
    def __init__(self, color, exchanged_value):
        self.__color = color
        # dic, key: card, card: black, value: count {Red:2}
        self.__exchanged_value = exchanged_value
        
    def get_color(self):
        return self.__color
    
    def get_exchanged_value(self):
        return self.__exchanged_value
    
    
class Game(object):
    def __init__(self, money):
        # dic, key:card, value: count
        self.__money = money
    
    def get_money(self):
        return self.__money
    
    def can_purchase(self, card):
        exchanged_value = card.get_exchanged_value()
        for cur_card in self.__money.keys():
            if self.__money[cur_card] >= exchanged_value[cur_card]:
                return True
        return False
            
        
    def purchase(self, card):
        exchanged_value = card.get_exchanged_value()
        for cur_card in self.__money.keys():
            if self.__money[cur_card] >= exchanged_value[cur_card]:
                self.__money[cur_card] -= exchanged_value[cur_card]
                self.__money[card] = self.__money.get(card, 0) + 1
                break
                
    def get_discount(self, card):
        discount = 0.05 * self.__money[card]
        if discount > 0.5:
            discount = 0.5
        return discount
    
    def can_purchase_with_disc(self, card):
        exchanged_value = card.get_exchanged_value()
        discount = self.get_discount(card)
        for cur_card in self.__money.keys():
            if self.__money[cur_card] >= exchanged_value[cur_card] * (1 - discount):
                return True
        return False
        
    def purchase_with_disc(self, card):
        exchanged_value = card.get_exchanged_value()
        discount = self.get_discount(card)
        for cur_card in self.__money.keys():
            if self.__money[cur_card] >= exchanged_value[cur_card] * (1 - discount):
                self.__money[cur_card] -= exchanged_value[cur_card]*(1 - discount)
                self.__money[card] = self.__money.get(card, 0) + 1
                break
        
    
# 钱包里有2个红色 2个绿色. 想买黑色已知黑色可以用2个红色买     
red = Card(2, {})
green = Card(3, {})
black = Card(1,{red:2})

game = Game({red:2, green:3, black:1})
print(game.can_purchase_with_disc(black))
game.purchase_with_disc(black)
print(game.get_money())

class Receipt(object):
    def __init__(self, id, money, date, payer, others):
        self.__id = id
        self.__money = money
        self.__date = date
        # {group_member: $payment}
        self.__payer = payer
        self.__others = others # list of members didn't 
        
    
    def get_payer(self):
        return self.__payer
    
    def get_others(self):
        return self.__others
    
    
    def get_average(self):
        total_members = len(list(self.__payer.keys())) + len(self.__others)
        average = self.__money / total_members
        return average

    
class Account(object):
    def __init__(self):
        self.__group_balance = {}
        
    def calculate_balance(self, receipt):
        payer = receipt.get_payer()
        members = receipt.get_others()
        average = receipt.get_average()
      
        for p in payer.keys():
            self.__group_balance[p] = self.__group_balance.get(p, 0) + average - payer[p]
            
        for p in members:
            self.__group_balance[p] = self.__group_balance.get(p, 0) +  average
            
    def get_balance(self):
        return self.__group_balance
    
    
    
r1 = Receipt(1, 600, '1/1/2019/',  {'A':600}, ['B', 'C']) 
# A :  -400, B: 200, C: 200
r2 = Receipt(2, 300, '1/1/2019/',  {'A':300}, ['B', 'C'])
# A: -600, B:300, C:300
acc = Account()
acc.calculate_balance(r1)
acc.calculate_balance(r2)
print(acc.get_balance())
            
        
          
                
3.     OpenTable
感觉更像在考database schema design
1)    怎么存interval. 例如我要预定6pm, 用餐时间两小时，那么被我reserve的位子在6pm-8pm之间不可以被其他人reserve.
How to know if a table is open for reservation for a timeslot? 

 
2)怎样avoid double booking, etc, 怎么解决同时book conflict, 设计怎么存储interval
# If the table has been reserved, it could not be assigned to another party.

函数 search and book
设计餐厅搜索有空的时间 还有预定 这两个函数 包括桌子结构
user interface steps: party size, date, and location ==click search==> A list of restarant, each of which shows list of time available ==click the time==> review of reservation and confirm button to reserve

1)    Contract
Search crieteria : party size, date, and location 
List: result: A list of restarant, each of which shows list of time available
Book: review of reservation and confirm button to reserve

Question: table size
FindTableForReservation(input, party, date, location)->time abavilable
ConfimeReservation(table, timeslot)

'''
class Reservation(object):
    def __init__(self, table, date, customer):
        self.table = table
        self.date = date
        self.customer = customer
        
class Table(object):
    def __init__(self, id, capacity, reservations):
        self.id = id
        self.maxCapacity = capacity
        self.reservations = reservations # list of dates
        self.addReservation = False
    
    def check_avail(self, date):
        
        index = self.find_date_position(self, date)
        if index == 0:
            return True
        elif index == len(self.reservations):
            prev = self.reservations[index - 1]
            if prev + 2 <= date:
                return True
        else:
            prev = self.reservations[index - 1]
            after = self.reservations[index + 1]
            if prev + 2 <= date and date + 2 <= after:
                return True
        return False
        
    def reserve(self, date, customer_id):
        index = self.find_date_position(self, date)
        self.reservations.insert(index, date)
        return Reservation(self.id, date, customer_id)
        
    def find_date_position(self, date):
        length = len(self.reservations)
        if length == 0:
            return 0
        if date >= self.reservations[-1]:
            return length
        
        for i in range(1, length - 2):
            if date >= self.reservations[i]:
                return i + 1
            
        
    def getID(self):
        return self.id
    
    def getNumSeats(self):
        return self.numSeats
    
    def getReservation(self):
        return self.reservations
    

class Restaurant(object):
    def __init__(self, tables, name, location):
        self.tables = tables # list of tables
        self.name = name
        self.location = location
        self.availability = {} # key: date time, value:tables lists
        self.reservations = []
        self.max_dinhour = 2
        
        
    def search_availability(self, part_size, date):
        for table in self.tables:
            if table.getCapacity >= part_size:
                if table.check_avail(date):
                    self.availability[date].append(table)
                    
        return self.availability.keys()
    
    def make_reserve(self, date, customer_id):
        table = self.availability[date].pop()
        reservation = table.reserve(date, customer_id)
        self.reservations.append(reservation)
    
    
class ReserveSystem(object):
    def __init__(self, rests):
        self.restaurants = rests
        
    def search(self, part_size, date, location):
        res = []
        for rest in self.restaurants:
            if rest.location == location:
                times = rest.search_availability(part_size, date)
                res.append(rest, times)
        return times
                    
    def reserve(restaurant, date, customer_id):
        restaurant.make_reserve(date, customer_id)

        
    
        
        
                   
                    

                        
