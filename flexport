class Solution(object):
    def decodeWays(self, s):
        """
        :type points: List[List[int]]
        :rtype: bool
        """
        self.num_char = {1:'A', 2: "B", 3 : "C", 4 : "D", 5:"E" ,6:  "F", 7: "G",     8:"H", 
      9:"I", 10: "J", 11:"K", 12:"L",  13 :"M", 14: "N", 15: "O",
     16: "P", 17: "Q",  18: "R", 19: "S", 20: "T",21: "U", 22: "V", 
     23: "W", 24: "X",25: "Y", 26: "Z" }
        
        self.res = []
        self.dfs(s, 0, '')
        return self.res
    
    def dfs(self, s, index, cur_path):
        if index == len(s):
            self.res.append(cur_path)
            return 
        
        if s[index] != '0':
            self.dfs(s, index + 1, cur_path + self.num_char[int(s[index])])
        if 10 <= int(s[index: index + 2]) <= 26:
            self.dfs(s, index + 2, cur_path + self.num_char[int(s[index : index + 2])])
            
                     
test = Solution()
print(test.decodeWays("226"))



'''
class Solution(object):
    def isConvex(self, points):
        """
        :type points: List[List[int]]
        :rtype: bool
        """
        def getdir(i):
            x0,y0 = points[i-2]
            x1,y1 = points[i-1]
            x2,y2 = points[i]
            tmp = (y1-y0) * (x2-x1) - (x1-x0) * (y2-y1)
            
            if tmp > 0:
                return 1
            elif tmp < 0:
                return -1
            else:
                return 0
            
        res = [getdir(i) for i in range(len(points))]
        print(res)
        set_ = set(getdir(i) for i in range(len(points)) if getdir(i))
        
        return len(set_) == 1             
                            
test = Solution()
print(test.isConvex([[0,0],[0,1],[1,1],[1,0]]))

'''

# “12.123.1.213” true
# "0..12.324" false
'''
s = '0..12.324'
print(s.split('.'))
    
'''
class Solution(object):
    def validTicTacToe(self, board):
        """
        :type board: List[str]
        :rtype: bool
        """
        # count_x , count_ o
        # count_x == count_o or count_x == count_o + 1
        
        # check win
        # if o win, x can't win and count_x == count_o
        # if x win, o can't win and count_x == count_o + 1
        
        count_x = 0
        count_o = 0
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == "X":
                    count_x += 1
                elif  board[i][j] == "O":
                    count_o += 1
        
        if count_o > count_x or count_x - count_o>1:
            return False
        
        if self.check_win(board, '0'):
            if self.check_win(board, 'X'):
                return False
            return count_x == count_o
        
        if self.check_win(board, 'X') and count_x != count_o +1:
            return False
        return True
    
        #if self.check_win(board, 'X'):
            #if self.check_win(board, '0'):
                #return False
            #return count_x == count_o + 1
        
        
    def check_win(self, board, player):
        # check row
        for i in range(len(board)):
            if board[i][0] == board[i][1] == board[i][2] == player:
                return True                        

        #Check the columns
        for i in range(len(board)):
            if board[0][i] == board[1][i] == board[2][i] == player:
                return True 
                                        
        #Check the diagonals
        if board[0][0] == board[1][1] == board[2][2]  == player or \
               board[0][2] == board[1][1] == board[2][0] == player:
            return True
                        
        return False
        
        
            
    
'''  
def isValid(s):
    if not s:
        return False
    
    res = False
    
    def dfs(s, num_part):
        if num_part == 4:
            if not s:
                res = True
            return
        
        for i in range(1, 4):
            if i < len(s):
                if int(s[:i]) <= 255:
                    dfs(s[i:], num_part + 1)
            if s and s[0] == '0':
                break
                
        #return False
                       
    dfs(s,0)
    return res

print(isValid('10000'))
'''
'''
问如果给一个现在棋盘的state （state就是棋盘上现在所有棋的位置和轮到哪个玩家）， 返回all possible moves。
'''
import collections
class Solution(object):
    def checker(self, board, player):
        
        visited = set()
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j]:
                    visited.add((i, j))
                    
        #print(visited)
        if player == 'x':
            offset = 1
        elif player == 'o':
            offset = -1     
            
        
        if player in ['x', 'o']:
            direction = [[offset, 1], [offset, -1]]
        else:
            direction = [[0, 1], [0, -1], [1, 0], [-1, 0], [1, 1], [1, -1], [-1, 1], [-1,-1]]
        
        res = collections.defaultdict(list)
        for i in range(len(board)):
            for j in range(len(board[0])):           
                if board[i][j] == player:
                    #print((i, j))
                    for dx, dy in direction:
                        x = dx + i
                        y = dy + j
                        #print((i, j), (x, y))
                        if (x, y) not in visited and 0 <= x < len(board) and 0 <= y < len(board[0]):
                            res[(i, j)].append([x, y])
                        # eat opponent
                        if (x, y) in visited and board[x][y] != player:
                            #board[x][y] = player
                            res[(i, j)].append([x, y])
                        # add king
                
                        
        return res              
                        
        

test = Solution()
board = [['x', 'x', 'k', 'x'], ['', '', '', ''], ['', '', '', ''],['o', 'o', 'ok', 'o']]
print(test.checker(board, 'ok'))


class Solution2(object):
    def checker(self, board, player):
        
        visited = set()
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j]:
                    visited.add((i, j))
                    
        #print(visited)
        if player == 1:
            offset = 1
        else:
            offset = -1           
        
        res = collections.defaultdict(list)
        for i in range(len(board)):
            for j in range(len(board[0])):           
                if board[i][j] == player:
                    #print((i, j))
                    for dx, dy in [[offset, 1], [offset, -1]]:
                        x = dx + i
                        y = dy + j
                        #print((i, j), (x, y))
                        if (x, y) not in visited and 0 <= x < len(board) and 0 <= y < len(board[0]):
                            res[(i, j)].append([x, y])
                        # eat opponent
                        if (x, y) in visited and board[x][y] != player:
                            #board[x][y] = player
                            res[(i, j)].append(((i, j), (x, y)))
                        # add king
                
                        
        return res              
                        
        
            
# "let us go to the supermarket to get the to go bundle" 
# n = 5
# Every word is picked randomly after the last occurrence, if it is the end of the string next round back to first one. First word is picked randomly from any of the words.

# "go bundle let us go" 
import random
import collections
class Solution2(object):
    def generate_sent(self, s, n):
        self.words = s.split()
        # dic : key word, value: next index
        self.dic = collections.defaultdict(list)
        self.m = len(self.words)
        for i, word in enumerate(self.words):
            if i == self.m - 1:
                self.dic[word].append(0)
            else:
                self.dic[word].append(i + 1)
        #print(self.dic)
        cur = random.randint(0, self.m - 1)
        #res.append(words[cur])
        res = []
        self.get_next(cur, res)
        return ' '.join(res)
        
        
        
    def get_next(self, cur, res):
        if len(res) == 5:
            return 
        
        res.append(self.words[cur])
        next_ = random.choice(self.dic[self.words[cur]]) 
        self.get_next(next_, res)
                
test = Solution2()
print(test.generate_sent("let us go to the supermarket to get the to go bundle" , 5))

# follow up
import collections
import random
class Solution(object):
    def generateSentence(self, s, n, k):
        s = s.split()
        # key k word, value:possible next index 
        self.m = len(s)
        self.dic = collections.defaultdict(list)
        double_s = s + s
        # key is 
        for i in range(self.m):
            # current three words i
            cur_word=double_s[i : i + k]
            key = ' '.join(cur_word)
            self.dic[key].append((i + k) % self.m)
            
        #print(self.dic)
        
        res = []
        start_i = random.randint(0, self.m - 1)
        cur = double_s[start_i:start_i + k]
        res += cur
        
        # res first k
        for i in range(k, n):
            nxt_index = random.choice(self.dic[' '.join(cur)])
            nxt_word = [s[nxt_index]]
            res += nxt_word
            cur = res[len(res) - k:]
        #print(res)
        return ' '.join(res)
        

test = Solution()
s = 'he is a boy she is a girl is a god'
k = 2
n = 5
print(test.generateSentence(s, n, k))


        
            
        
# push
# begin : begin new transaction
# commit : end current transaction, 结束transaction并保留所有ele

# rollback : remove 删掉当前transaction的所有元素



class stackWithATransaction(object):
    def __init__(self):
        self.transactions = []
        self.stack = []
        #self._commit = []
        
    def push(self,val):
        if not self.transactions:
            self.stack.append(val)
            return
        else:
            self.transactions[-1].append(val)
            
            
    def pop(self):
        if not self.transactions():
            self.stack.pop()
            return 
        else:
            self.transactions[-1].pop()
            
    def top(self):
        
        if not self.transactions:
            return self.stack[-1]
        else:
            return self.transactions[-1]
        
    def begin(self):
        self.transactions.append([])
    
    def rollback(self):
        if not self.transactions:
            return False
        else:
            self.transactions.pop()
  
        return True
        
    def commit(self): # end current trans, store all ele
        if not self.transactions:
            return False
        tran = self.transactions[-1]
        #self._commit.append(tran)
        #print('_commit',self._commit)
        self.transactions.pop()

        if not self.transactions:
            self.stack.append(self.reverse(tran))
        else:
            reverse = self.reverse(tran)
            self.transactions[-1] += reverse
            #self.transactions[-1].append(self.reverse(tran))
                #self.transactions[-1].append(self.reverse(tran))
            #inner_tran = self.stack
        #else:
            #inner_tran = self.transactions[-1]
            
        #self.transactions[-1].append(
        #self._append(self.reverse(tran), inner_tran)
        return True
    
        
    def _append(self, source, new):
        while source:
            new.append(source.pop())
        
            
    def reverse(self, stack):
        s = []
        while stack:
            s.append(stack.pop())
        return s
            
            
    
test = stackWithATransaction()
test.push(4)
print('trans', test.transactions)
print('stack', test.stack)
test.begin()
test.push(7)
print('trans', test.transactions)
print('stack', test.stack)
test.begin()
test.push(2)
print('trans', test.transactions)
print('stack', test.stack)
test.rollback()
print('after rollback 2, trans: ', test.transactions)
print('stack', test.stack)
test.begin()
test.push(10)
print('after push trans 10, trans:', test.transactions)
print('stack', test.stack)
test.commit()
print('after commit, trans:', test.transactions)
print('stack', test.stack)
print('top', test.top())
test.rollback()
print(test.top())
print(test.commit())        
        
                    
1.    第一轮：面试就一个小时，前5分钟聊了下简历和公司，然后就开始用coderpad做题。
                -题目给了 List<List<String>> prefs, 记录了一个team里面每个人喜欢吃的餐馆。
                -先是 return 出现次数最高的餐馆。
                -followup 1: 每个人的preference list是有order的，最喜欢的到最不喜欢的。如果把这个ranking考虑进去的话，return 大家都比较满意的餐厅。
                -followup 2: 如果未来还有别的factor要考虑的话，比如distance啊什么的。你会怎么写code, 怎么refactor to save code 呢?

楼主请问followup1 的做法是先找 每个人的common restaurants, 然后把index 作为rank, index 越小 餐厅在这个人的list 中的rank 越高.最后取和rank 和最小的餐厅?
楼主怎么做，return 次数最多无疑是O(n * n)遍历list求top k，followup1是类似协同过滤实现推荐top k吗，还有followup2完全没有思路

'''

# [[a, b,c], [c,b], [c]]
import collections
class Solution(object):
    def rank(self, favo):
        dic = collections.defaultdict(int)
        for team in favo:
            for res in team:
                dic[res] += 1
        sort_dic = sorted(dic.items(), key = lambda x:-x[1])
        return sort_dic[0][0]
    
    def add_rank(self, favo2):
        # key:res, value: rank
        dic2 = collections.defaultdict(int)
        for team in favo2:
            for p in team:
                for rank, res in enumerate(p):
                    dic2[res] += rank
        sort_dic2 = sorted(dic2.items(), key = lambda x:x[1])
        print(dic2)
        return sort_dic2[0][0]
    
    # give the propotion to dis
    def add_distance(self, dis):
        # dis dic
        # total rank
        
    
test = Solution()


# three res a b c
favo2 = [['abc', 'bca','cab'], ['cba','bac'], ['abc']]
dis = {'a':1, 'b':2, 'c':3}

print(test.rank([['a', 'b','c'], ['c','b'], ['c']]))
print(test.add_rank(favo2))

'''
一轮地里的换卡的那个题 eg：  钱包里有2个红色 2个绿色. 想买黑色已知黑色可以用2个红色买   问能不能买。   follow up 是discount。   这个题当时就没太明白 所以我也说不太明白
'''

class Color():
    black, blue, red, green = 0, 1, 2, 3
    
class Card(object):
    def __init__(self, color, exchanged_value):
        self.__color = color
        # exchange value is a dictionary, {}
        # key: exchanged color, value: num of excha color
        # needed to buy this color 
        self.__exchange_value = exchanged_value
        
    def get_color(self):
        return self.__color
    
    def get_exchange_value(self):
        return self.__exchange_value
        
    
class Game(object):
    def __init__(self, cards):
        # money {} key:color, value:count
        self.__money = cards
        
    def canPurchase(self, card):
        for cur_card in self.__money:
            value = card.get_exchange_value()
            if value[cur_card] <= self.__money.get(cur_card, 0):
                return True
        return False
                 
    def purchase(self, card):
        for cur_card in self.__money:
            value = card.get_exchange_value()
            if value[cur_card] > self.__money.get(cur_card, 0):
                continue
            self.__money[cur_card] -= value[cur_card]
            self.__money[card] = self.__money.get(card, 0) + 1
            break
            
    # assume 
    def get_discount(self, card):
        discount = 0.05 * self.__money[card]
        if discount >= 0.5:
            return 0.5
        return  discount
    
    def can_purchase_with_dis(self, card):
        discount = self.get_discount(card)
        for cur_card in self.__money:
            value = card.get_exchange_value()
            if value[cur_card] * (1 - discount) <= self.__money.get(cur_card, 0):
                return True
        return False
        
        
    
    def purchase_with_dis(self, card):
        discount = self.get_discount(card)
        for cur_card in self.__money:
            value = card.get_exchange_value()
            if value[cur_card] * (1 - discount) > self.__money.get(cur_card, 0):
                continue
            self.__money[cur_card] -= value[cur_card] * (1 - discount)
            self.__money[card] = self.__money.get(card, 0) + 1
            break
    
    def get_money(self):
        return self.__money

red = Card(2, {})
green = Card(3,{})
black =  Card(0, {red : 2})

game = Game({red:2, green:2, black:1})
print(game.canPurchase(black))
print(game.get_money())
print(game.purchase(black))
print(game.get_money())

red = Card(2, {})
green = Card(3,{})
black =  Card(0, {red : 2})
game = Game({red:2, green:2, black:1})
print(game.can_purchase_with_dis(black))
print(game.get_money())
print(game.purchase_with_dis(black))
print(game.get_money())


red = Card(2, {})
green = Card(3,{})
black =  Card(0, {red : 2})

game = Game({red:2, green:2, black:1})
print(game.canPurchase(black))
print(game.get_money())
print(game.purchase(black))
print(game.get_money())

red = Card(2, {})
green = Card(3,{})
black =  Card(0, {red : 2})
game = Game({red:2, green:2, black:1})
print(game.can_purchase_with_dis(black))
print(game.get_money())
print(game.purchase_with_dis(black))
print(game.get_money())
    
                
3.     OpenTable
感觉更像在考database schema design
1)    怎么存interval. 例如我要预定6pm, 用餐时间两小时，那么被我reserve的位子在6pm-8pm之间不可以被其他人reserve.
How to know if a table is open for reservation for a timeslot? 

 
2)怎样avoid double booking, etc, 怎么解决同时book conflict, 设计怎么存储interval
# If the table has been reserved, it could not be assigned to another party.

函数 search and book
设计餐厅搜索有空的时间 还有预定 这两个函数 包括桌子结构
user interface steps: party size, date, and location ==click search==> A list of restarant, each of which shows list of time available ==click the time==> review of reservation and confirm button to reserve

1)    Contract
Search crieteria : party size, date, and location 
List: result: A list of restarant, each of which shows list of time available
Book: review of reservation and confirm button to reserve

Question: table size
FindTableForReservation(input, party, date, location)->time abavilable
ConfimeReservation(table, timeslot)


'''

# 需要完善 table class reverve for date(date)function
class Table(object):
    def __init__(self, id, capacity, reservation):
        self.id = id
        self.maxCapacity = capacity
        self.reservation = reservation # list of dates
        self.addReservation = False
        
        
    def getID(self):
        return self.id
    
    def getNumSeats(self):
        return self.numSeats
    
    def getReservation(self):
        return self.reservation
    
    def reserveForDate(self,date):
        
    
    
    
    
class Restaurant(object):
    def __init__(self, tables, name, location):
        self.tables = tables # list of tables
        self.name = name
        self.location = location
        self.max_dinhour = 2
        
        
    def findTableForReservation(self, part_size, date):
        for table in self.tables:
            if table.getCapacity >= part_size:
                if table.reserveForDate(date):
                    reservation = Reservation(self.name, table, date)
                    return reservation
        return None
        
        
        
class Restaurants(object):
    def __init__(self, rests):
        self.restaurants = rests
        
    def findRestaurant(self, part_size, date, location):
        for restaurant in self.restaurants:
            if restaurant.location = location:
                if restaurant.findTableForReservation(part_size, date):
                    
        
        
class Reservation(object):
    def __init__(self, restaurant, table, date):
        self.restaurant = restaurant
        self.table = table
        self.date = date
        
    def getTable(self):
        return self.table
    
    def getDate(self):
        return self.date
    
    def getRest(self):
        return self.restaurant
    
        
        
                   
                    

                        
