# time O(mn * mn) each time mn, worst case need to call mn/3 times, total mn * mn
# space O(1)

# step1, find curshed candies (each row or cols check if there are there repeated)
# step2, crush them, take care of empty cells
# step3, repeat
        
class Solution(object):
    def candyCrush(self, board):
        m = len(board)
        n = len(board[0])
        
        change = False
        
        # step1, find candies need to crush
        # find on each line 
        for i in range(m):
            for j in range(n - 2):
                if abs(board[i][j]) == abs(board[i][j + 1]) == abs(board[i][j + 2]) != 0:
                    board[i][j] = -abs(board[i][j])
                    board[i][j + 1] = -abs(board[i][j])
                    board[i][j + 2] = -abs(board[i][j])
                    change = True
                    
        # find on each col        
        for j in range(n):
            for i in range(m - 2):
                if abs(board[i][j]) == abs(board[i + 1][j]) == abs(board[i + 2][j]) != 0:
                    board[i][j] = -abs(board[i][j])
                    board[i + 1][j] = -abs(board[i][j])
                    board[i + 2][j] = -abs(board[i][j])
                    change = True
                    
        # step2, crush candy, 从下往上读并且写入>0 value, 剩下的w, 都写为0
        for j in range(n):
            w = m - 1
            r = m - 1
            
            while r >= 0:
                if board[r][j] > 0:
                    board[w][j] = board[r][j]
                    w -= 1
                r -= 1
            
            while w >= 0:
                board[w][j] = 0
                w -= 1
                
        # step3, repeate or return 
        if change:
            self.candyCrush(board)
        return board
        
                
                
        
        
