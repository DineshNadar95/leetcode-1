#DFS
# time O(V+E) , space O(V)
class Solution(object):
    def isBipartite(self, graph):
        """
        :type graph: List[List[int]]
        :rtype: bool
        """
        color = {}
        
        for i in range(len(graph)):
            if i not in color:
                color[i] = 1
                if not self.dfs(graph, i, color):
                    return False
        return True
                
    def dfs(self, graph, node, color):
        for neighbor in graph[node]:
            if neighbor in color:
                if color[neighbor] == color[node]:
                    return False
            else:
            # 注意 如果邻居未被染色，染色之后要调用dfs函数
                color[neighbor] = -color[node]
                if not self.dfs(graph, neighbor, color):
                    return False
        return True
        
        
            
            
        
            

# BFS 时间复杂度是O(E+V)，空间复杂度是O(V).
class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        
        nodes = len(graph)
        colored = {}
        queue = collections.deque()
        
        for i in range(nodes):
            if i not in colored and graph[i]:
                colored[i] = 1
                queue.append(i)
                while queue:
                    cur_node = queue.popleft()
                    for neighbor in graph[cur_node]:
                        if neighbor not in colored:
                            colored[neighbor] = - colored[cur_node]
                            queue.append(neighbor)
                        elif colored[neighbor] == colored[cur_node]:
                            return False
        return True

