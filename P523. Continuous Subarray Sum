# subarray sum time O(n^2), space O(1)
# pay attention to corner cases

class Solution:
    def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        if k == 0:
            for i in range(len(nums) - 1):
                if nums[i] + nums[i + 1] == 0: # all ele in nums are >= 0
                    return True
        
        else:
            
            for i in range(len(nums) - 1):
                sum_ = nums[i]
                for j in range(i + 1, len(nums)):
                    sum_ += nums[j]
                    if sum_ % k == 0 and j - i >= 1:
                        return True
                    
            return False

# If k == 0, then search for any consecutive pair of 0s.
# Else, dict key:prefix sum mod by k, value :index 
# We will return True if we've seen a cumulative sum % k at least 2 indices before.
# This means that there is a subarray that has a sum(subarray) % k == 0 and that subarray contains at least 2 elements.

# time O(n)
# space O(k)
class Solution(object):
    def checkSubarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
        if k == 0:
            for i in range(len(nums) - 1):
                if nums[i] + nums[i + 1] == 0:
                    return True
        
        else:
            # key: sum_ % k
            # value: index
            dic = {0:-1}
            sum_ = 0
            for i in range(len(nums)):
                sum_ = sum_ + nums[i]
                if sum_ % k in dic and i - dic[sum_% k] > 1:
                    return True
                elif sum_ % k not in dic:
                    dic[sum_ % k] = i
            return False
            
