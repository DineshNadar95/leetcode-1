# trie + dfs + hash table

# trie node : children
# add : char : next word, '#' : sent
# search : (dfs)

# hashtable : key : sent, val : times


AutocompleteSystem() takes O(k*l) time. 
We need to iterate over ll sentences each of average length kk, to create the trie for the given set of sentencessentences.
input() takes O(p+q+mlogm) time. Here, p refers to the length of the sentence formed till now, cur_sent. 
q refers to the number of nodes in the trie considering the sentence formed till now as the root node. 
Again, we need to sort the listlist of length mm indicating the options available for the hot sentences, 
which takes O(mlogm) time.




# trie
class TrieNode():
    def __init__(self):
        self.children = {}
    
class Trie():
    def __init__(self):
        self.root = TrieNode()
        
     # insert input is sentence, at the end the sentence, build a '#' for the sentence 
    def insert(self, word):
        cur = self.root
        for c in word:
            if c not in cur.children:
                cur.children[c] = TrieNode()
            cur = cur.children[c]
        cur.children['#'] = word
      
    # input, ''/lower case char/'#'
    def search(self, prefix, cur = None):
        if not cur:
            cur = self.root
        for c in prefix: # reach to the children of last char 
            if c not in cur.children:
                return []
            cur = cur.children[c]
        
        # reach to the end the prefix
        res = []
        for ele in cur.children:
             # met a sentence
            if ele == '#':
                res.append(cur.children['#'])
            else:
                # search for empty char until 
                res += self.search('', cur.children[ele])
        return res
                
                
class AutocompleteSystem(object):

    def __init__(self, sentences, times):
        """
        :type sentences: List[str]
        :type times: List[int]
        """
        # key:sentence, value:time
        self.track_times = collections.defaultdict()
        for i, s in enumerate(sentences):
            self.track_times[s] = times[i]
        
        # build trie for sentence
        self.trie = Trie()
        for s in sentences:
            self.trie.insert(s)
        
        self.keyword = ""
        

    def input(self, c):
        """
        :type c: str
        :rtype: List[str]
        """
        
        if c == '#':
            self.track_times[self.keyword] = self.track_times.get(self.keyword, 0) + 1
            self.trie.insert(self.keyword)
            self.keyword = ""
            return []
         
        self.keyword += c
        res = self.trie.search(self.keyword)
        # sort res by times and ascii value
        res.sort(key = lambda x: (- self.track_times[x], x))
        return res[:3]
            
            
        
