# trie

class Node(object):
    def __init__(self):
        self.child = collections.defaultdict(Node)
        self.content = ''

class FileSystem(object):

    def __init__(self):
        self.root = Node()
        
        
    def find(self, path): # find and return node at path
        cur = self.root
        if len(path) == 1:
            return self.root
        for word in path.split('/')[1:]:
            cur = cur.child[word]
        return cur
    
        

    def ls(self, path):
        """
        :type path: str
        :rtype: List[str]
        """
        cur = self.find(path)
        if cur.content: # file path, return file name
            return [path.split('/')[-1]]
        return sorted(cur.child.keys())
    

    def mkdir(self, path):
        """
        :type path: str
        :rtype: None
        """
        self.find(path)
        

    def addContentToFile(self, filePath, content):
        """
        :type filePath: str
        :type content: str
        :rtype: None
        """
        cur = self.find(filePath)
        cur.content += content

    def readContentFromFile(self, filePath):
        """
        :type filePath: str
        :rtype: str
        """
        cur = self.find(filePath)
        return cur.content


