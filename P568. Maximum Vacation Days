# brute-foce 
# dfs time O(num of cities ^ num of weeks)
# space O(num of weeks)

class Solution(object):
    
    def vaca(self, flights, days):
        
        self.res = 0
        self.dfs(flights, days,0, 0, 0)
        return self.res
    
    def dfs(self, flights, days, cur_city, cur_week, cur_va):
        
        if cur_week == len(days[0]):
            self.res = max(self.res, cur_va)
            return 
            
        for city, flight in enumerate(flights[cur_city]):
            if flight == 1 or city == cur_city:
                self.dfs(flights, days, city, cur_week + 1, cur_va+ days[city][cur_week])
                
    
test = Solution()
flights = [[0,1,1],[1,0,1],[1,1,0]]
days = [[1,3,1],[6,0,3],[3,3,3]]
print(test.vaca(flights, days))


# recursion + memo
# time O(n^2 *k)
# spcae O(n*k)

class Solution2(object):
    
    def vaca(self, flights, days):
        
        # dic key: city, week value: max days
        return self.dfs(flights, days, 0, 0, {})
    
    
    def dfs(self, flights, days, cur_week, cur_city, memo):
        if cur_week == len(days[0]):
            return 0
        
        if (cur_week, cur_city) in memo:
            return memo[(cur_week, cur_city)]
        
        res = 0
        for city, flight in enumerate(flights[cur_city]):
            if flight == 1 or city == cur_city:
                new = days[city][cur_week] + self.dfs(flights, days,cur_week + 1, city, memo)
                res = max(new, res)
        memo[(cur_week, cur_city)] = res
        return memo[(cur_week, cur_city)]
                
test = Solution2()
flights = [[0,1,1],[1,0,1],[1,1,0]]
days = [[1,3,1],[6,0,3],[3,3,3]]
print(test.vaca(flights, days))   
