# 递归，对于每个节点，检查树的左右节点值是否相等，同时判断：左节点的左子树和右节点的右子树是否对称、右节点的左子树和左节点的右子树是否对称。
# time O(n)
# space O(h)

class Solution(object):
    def isSymmetric(self, root):
        
        if not root:
            return True
        
        return self.mirror(root.left, root.right)
    
    def mirror(self, l, r):
        if not l and not r:
            return True
        if not l or not r:
            return False
        
        return l.val == r.val and self.mirror(l.left, r.right) and self.mirror(l.right, r.left)
        
        
        
  # iterative, like BFS
  # time O(n)
  # space O(n)
  
  class Solution(object):
    def isSymmetric(self, root):
        
        if not root:
            return True
        
        queue = collections.deque([])
        queue.append(root.left)
        queue.append(root.right)
        while queue:
            n1 = queue.popleft()
            n2 = queue.popleft()
            if not n1 and not n2:
                continue
            if not n1 or not n2:
                return False
            if n1.val != n2.val:
                return False
            queue.append(n1.left)
            queue.append(n2.right)
            queue.append(n1.right)
            queue.append(n2.left)
            
        return True
