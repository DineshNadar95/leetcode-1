# time O(m+n)
# space O(1)
# start from the right most ele in the first row

class Solution(object):
    def searchMatrix(self, matrix, target):
        
        if not matrix or not matrix[0]:
            return False
            
        i = 0
        j = len(matrix[0]) - 1
        while i < len(matrix) and j >= 0:
            if matrix[i][j] == target:
                return True
            elif matrix[i][j] < target:
                i += 1
            else:
                j -= 1
                
        return False
        
        
# bianry serach 
# time O(nlgn)
# 因为题目中matrix不是一个m * n sorted array, 不能用logm * logn实现
# idea: binary search for each line until return True

class Solution(object):
    def searchMatrix(self, matrix, target):
       
        if not matrix or not matrix[0]:
            return False
        
        self.target = target
        for i in range(len(matrix)):
            if self.binary_search(matrix, i):
                return True
            else:
                continue
        return False
    
    def binary_search(self, matrix, i):
        l = 0
        r = len(matrix[0]) - 1
        
        while l + 1 < r:
            m = (l + r) // 2
            if matrix[i][m] == self.target:
                return True
            if matrix[i][m] < self.target:
                l = m + 1
            else:
                r = m - 1
                
        return matrix[i][l] == self.target or self.target == matrix[i][r]
