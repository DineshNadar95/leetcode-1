# brute force 
# O(n^2)
# space O(1)

class Solution(object):
    def countPrimes(self, n):
        
        res = 0
        for i in range(2, n):
            if self.is_prime(i):
                res += 1
        return res
    
    def is_prime(self, n):
        if n == 2:
            return True
        
        for i in range(2, n - 1):
            if n % i == 0:
                return False
        return True
        

# O(n lglgn)接近于 O(n)
# space O(n)

筛子法:
如果一个数是质数，则它的倍数一定不是素数
其思想是从小的素数开始，排除该小素数的所有倍数，直到最终剩下的全是素数。具体的算法可以参考：
如果n不是质数，a * b = n, a <= b => a <= sqrt(n)


class Solution(object):
    def countPrimes(self, n):
        
        if n <= 2:
            return 0
        
        prime = [1 for _ in range(n)] # 1 is prime
        
        prime[0] = 0
        prime[1] = 0
        
        for i in range(2, int(sqrt(n)) + 1):
            if prime[i]: # i is prime
                for j in range(i + i, n, i):
                    prime[j] = 0 # i * 2/ 3/ 4 .. is not prime
        return sum(prime)
