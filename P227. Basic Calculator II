# use stack to store numbers, and do operation according to the operator before the number
# after one pass, we would have calculated all the * and /
# then we need to sum all the numbers in stack

我们采取的措施是使用一个栈保存数字，如果该数字之前的符号是加或减，那么把当前数字压入栈中，注意如果是减号，则加入当前数字的相反数，
因为减法相当于加上一个相反数。如果之前的符号是乘或除，那么从栈顶取出一个数字和当前数字进行乘或除的运算，再把结果压入栈中，
那么完成一遍遍历后，所有的乘或除都运算完了，再把栈中所有的数字都加起来就是最终结果了。

class Solution(object):
    def calculate(self, s):
        """
        :type s: str
        :rtype: int
        """
        num = 0
        prev_ope = '+'
        
        stack = []
        for i, ele in enumerate(s):
            if not ele:
                continue
            if ele.isdigit():
                num = num * 10 + int(ele)
            if i == len(s) - 1 or ele in '+-*/':
                if prev_ope == '+':
                    stack.append(num)
                elif prev_ope == '-':
                    stack.append(-num)
                elif prev_ope == '*':
                    val = stack.pop()
                    stack.append(val * num)
                elif prev_ope == '/':
                    val = stack.pop()
                    if val < 0:
                        stack.append(-(-val//num))
                    else:
                        stack.append(val//num)
                num = 0
                prev_ope = ele
                
        return sum(stack)
            
