# use stack to store numbers, and do operation according to the operator before the number
# after one pass, we would have calculated all the * and /
# then we need to sum all the numbers in stack

我们采取的措施是使用一个栈保存数字，如果该数字之前的符号是加或减，那么把当前数字压入栈中，注意如果是减号，则加入当前数字的相反数，
因为减法相当于加上一个相反数。如果之前的符号是乘或除，那么从栈顶取出一个数字和当前数字进行乘或除的运算，再把结果压入栈中，
那么完成一遍遍历后，所有的乘或除都运算完了，再把栈中所有的数字都加起来就是最终结果了。

class Solution(object):
    def calculate(self, s):
        
        stack = []
        pre_ope = '+'
        num = 0
        
        for i, char in enumerate(s):
            if char.isdigit():
                num = num * 10 + int(char)
            if char in '+-*/' or i == len(s) - 1:
                if pre_ope == '+':
                    stack.append(num)
                elif pre_ope == '-':
                    stack.append(-num)
                elif pre_ope == '*':
                    pre_num = stack.pop()
                    stack.append(pre_num * num)
                elif pre_ope == '/':
                    pre_num = stack.pop()
                    if pre_num < 0:
                        stack.append(-(-pre_num // num))
                    else:
                        stack.append(pre_num // num)
                
                pre_ope = char
                num = 0

        return sum(stack)
                    
                    
        
