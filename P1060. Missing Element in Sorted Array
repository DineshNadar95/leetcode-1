
# binary search
time O(lgn)
space O(1)

node:
binary search to find index, missing(index) < k <= missing(index + 1), 
so the result is nums[index] + k

class Solution(object):
    def missingElement(self, nums, k):
        
        missing_c = nums[-1] - nums[0] + 1 - len(nums)
        if missing_c < k:
            return nums[-1] + (k - missing_c)
        
        l = 0
        r = len(nums) - 1
        while l + 1 < r:
            m = (l + r) // 2
             # missing counts for left half is nums[mid] - nums[left] - (mid - left)
            if nums[m] - nums[l] - (m - l) < k:
                k = k - (nums[m] - nums[l] - (m - l))
                l = m 
            else:
                #  missing in the left half
                r = m
        return nums[l] + k
            
