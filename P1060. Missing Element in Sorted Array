
# brute force 
# O(n)
# liear time to find missing(index) < k <= missing(index + 1)
class Solution(object):
    def missingElement(self, nums, k):
        
        missing = lambda idx: nums[idx] - nums[0] - idx
                
        n = len(nums)
        # If kth missing number is larger than 
        # the last element of the array
        if k > missing(n - 1):
            return nums[-1] + k - missing(n - 1) 

        idx = 1
        # find idx such that 
        # missing(idx - 1) < k <= missing(idx)
        while missing(idx) < k:
            idx += 1

        # kth missing number is larger than nums[idx - 1]
        # and smaller than nums[idx]
        return nums[idx - 1] + k - missing(idx - 1)




# binary search
time O(lgn)
space O(1)

node:
binary search to find index, missing(index) < k <= missing(index + 1), 
so the result is nums[index] + k

class Solution(object):
    def missingElement(self, nums, k):
        missing_c = nums[-1] - nums[0] + 1 - len(nums)
        if k > missing_c:
            return nums[-1] + (k - missing_c)
        
        l = 0
        r = len(nums) - 1
        while l + 1 < r:
            m = (l + r) // 2
            missing_l_m = nums[m] - nums[l] - (m - l)
            if missing_l_m < k:
                l = m
                k -= missing_l_m
            else:
                r = m
        return nums[l] + k
            
        
