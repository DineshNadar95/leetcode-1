A sorted array nums with a and b as lower and upper bound, has b-a-len(nums)+1 missing numbers. 
For example, nums = [1,3,4,5,10] has 10-1-5+1=5 missing number.
Therefore, if the desired k is greater than the max missing number the interval can hold 
(k > b-a-len(nums)+1), we simply need to add extra counts to the last 
number nums[-1] + k - (max_value - min_value - len(nums) + 1). 
For example, nums = [1,3,4,5,10], k = 8, then the missing one = 10+8-5=13.

# binary search
time O(lgn)
space O(1)

class Solution(object):
    def missingElement(self, nums, k):
        
        missing_counts = nums[-1] - nums[0] + 1 - len(nums)
        if missing_counts < k:
            return nums[-1] + k - (nums[-1] - nums[0] + 1 - len(nums))
        
        left = 0
        right = len(nums) - 1
        
        while left + 1 < right:
            mid = (left + right) // 2
            # missing counts for left half is nums[mid] - nums[left] - (mid - left)
            if nums[mid] - nums[left] - (mid - left) < k:
                # missing in right half
                k = k - (nums[mid] - nums[left] - (mid - left))
                left = mid 
            else:
                # missing in the left half
                right = mid 
                
        return nums[left] + k
            
