# sol1:
 time O(n), space O(h)
 
 class Solution:
    def sumNumbers(self, root: TreeNode) -> int:
        if not root:
            return 0
        self.res = 0
        self.dfs(root, 0)
        return self.res
        
    def dfs(self, root, value):
        if not root.left and not root.right:
            self.res += (value * 10 + root.val)
        if root.left:
            self.dfs(root.left, value * 10 + root.val)
        if root.right:
            self.dfs(root.right, value * 10 + root.val)
            
 # bfs time O(n), space O(n)
 class Solution:
    def sumNumbers(self, root: TreeNode) -> int:
        if not root:
            return 0
        
        res = 0
        queue = collections.deque([(root, 0)])
        
        while queue:
            node, value = queue.popleft()
            if not node.left and not node.right:
                res += (value * 10 + node.val)
            if node.left:
                queue.append((node.left, value * 10 + node.val))
            if node.right:
                queue.append((node.right, value * 10 + node.val))
        return res
