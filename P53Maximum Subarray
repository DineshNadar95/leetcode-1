# dp[i] 前i个数的和
# 转移方程：dp[i] = num[i] if dp[i-1]< 0 else dp[i-1] + num[i]
# 如果前n-1的数和<0， 当前的数不加dp[n-1]
# time O(n)
# space O(n)

class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        dp = [0] * len(nums)
        dp[0] = nums[0]
        
        for i in range(1, len(nums)):
            if dp[i - 1] < 0:
                dp[i] = nums[i]
            else:
                dp[i] = dp[i - 1] + nums[i]
        return max(dp)
        
