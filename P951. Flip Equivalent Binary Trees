如果两个数有一个是空，另一个不空，那么一定不能互相得到。如果两个树的节点的值不等，也不能互相得到。

重点来了：我们现在已经确定了两个树都不空，root相等，如何确定它们的子树们是否翻转相等呢？
首先，我们来回顾一下flipEquiv函数的含义：判断两个树在进行翻转/不进行翻转的情况下，能不能相等。
所以，我们不确定两个子树的状况，只需要对两个子树进行翻转/不翻转两种状态判断即可。
如果进行翻转，那么root1的左子树可以通过root2的右子树得到，同时root1的左子树通过root2的右子树得到；
如果不进行翻转，那么root1和root2的对应左右子树通过操作应该也能互相得到。


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def flipEquiv(self, root1, root2):
        """
        :type root1: TreeNode
        :type root2: TreeNode
        :rtype: bool
        """
        if not root1 and not root2:
            return True
        if not root1 or not root2:
            return False
        if root1.val != root2.val:
            return False
        return self.flipEquiv(root1.left, root2.right) and self.flipEquiv(root1.right, root2.left) or self.flipEquiv(root1.left, root2.left) and self.flipEquiv(root1.right, root2.right)
        
