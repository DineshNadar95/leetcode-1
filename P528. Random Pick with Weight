# algo: prefix sum + binary search
# time O(w) + O(lgw)
# space o(w)

# step 1: Compute the prefix sum array pp
# step 2: Generate a random integer in the range [0,tot)
# step 3: Use binary search to find the index x where x is the first index in prefix sum > random int

# w:[1, 9]
# Prefix sum [1, 10]
# index 0 [0, 1), index 1 [1, 10)


class Solution(object):

    def __init__(self, w):
        
        self.w = w
        self.prefix = self.w
        for i in range(1, len(self.w)):
            self.prefix[i] += self.prefix[i - 1]
            
       
    def pickIndex(self):
       
        rand_int = random.randint(0, self.prefix[-1] - 1)
        
        l = 0
        r = len(self.w) - 1
        
        while l + 1 < r:
            m = (l + r) // 2
            if self.prefix[m] <= rand_int:
                l = m + 1
            else:
                r = m
        if self.prefix[l] > rand_int:
            return l
        return r
