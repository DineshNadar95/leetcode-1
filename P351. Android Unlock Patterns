# backtracking
# time O(n!)
# space O(n)

class Solution(object):
    def numberOfPatterns(self, m, n):
        
        self.cross = {
        (1, 3) : 2, (3, 1) : 2, (4, 6) : 5, (6, 4) : 5, (7, 9) : 8, (9, 7) : 8, 
        (1, 7) : 4, (7, 1) : 4, (2, 8) : 5, (8, 2) : 5, (3, 9) : 6, (9, 3) : 6, 
        (1, 9) : 5, (9, 1) : 5, (7, 3) : 5, (3, 7) : 5}
        
        count = 0
        for k in range(m, n + 1):
            count += 4 * self.dfs(1, k - 1, set()) + 4 * self.dfs(4, k - 1, set()) +  self.dfs(5, k - 1, set()) 
        return count
    
    def dfs(self, digit, k, visited):
        if k == 0:
            return 1
        
        visited.add(digit)
        res = 0
        for i in range(1, 10):
            if i not in visited and ((digit, i) not in self.cross or self.cross[(digit, i)] in visited):
                res += self.dfs(i, k - 1, visited)
                
        visited.remove(digit)
        return res
