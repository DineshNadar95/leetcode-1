# backtracking
# time O(n!)
# space O(n)

class Solution(object):
    def numberOfPatterns(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        self.cross = {(1, 3) : 2, (3, 1) : 2, (4, 6) : 5, (6, 4) : 5, (7, 9) : 8, (9, 7) : 8, (1, 7) : 4, (7, 1) : 4, (2, 8) : 5, (8, 2) : 5, (3, 9) : 6, (9, 3) : 6, (1, 9) : 5, (9, 1) : 5, (7, 3) : 5, (3, 7) : 5}
        self.visited = [False for i in range(9)]
        
        count = 0
        for k in range(m - 1, n):
            count = count + self.dfs(1, k) * 4 + self.dfs(2, k) * 4 + self.dfs(5, k)
        return count
    
    def dfs(self, cur_digit, k):
        if not k:
            return 1
        res = 0
        self.visited[cur_digit - 1] = True
        
        for i in range(1, 10):
            if not self.visited[i - 1] and ((cur_digit, i) not in self.cross or (cur_digit, i) in self.cross and self.visited[self.cross[(cur_digit, i)] - 1]):
                res += self.dfs(i, k - 1)
        self.visited[cur_digit - 1] = False
                
        return res
