# use hashmap of the smaller array
# interate along the larger array 
# time O(m)
# space O(n) m > n
class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        if len(nums1) > len(nums2):
            return self.intersect(nums2, nums1)
        
        dic = collections.defaultdict(int)
        for num in nums1:
            dic[num] += 1
        
        res = []
        for n in nums2:
            if dic[n] > 0:
                res.append(n)
                dic[n] -= 1
        return res

# two pointers
# time O(nlgn)
# space O(1)

class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        nums1.sort()
        nums2.sort()
        i = 0
        j = 0
        res = []
        while i < len(nums1) and j < len(nums2):
            if nums1[i] < nums2[j]:
                i += 1
            elif nums1[i] > nums2[j]:
                j += 1
            else:
                res.append(nums1[i])
                i += 1
                j += 1
        return res
    
    
 Follow up:

1. What if the given array is already sorted? How would you optimize your algorithm?
    two pointers time O(m+n)
2. What if nums1's size is small compared to nums2's size? Which algorithm is better?
    for each ele in nums1, binary search nums2, time:O(mlgn)
3. What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all 
    elements into the memory at once?
    put all elements of nums1 into a HashMap, key ele, value: count
    read chunks of array in nums2 that fit into the memory, and record the intersections.
    

        
        
