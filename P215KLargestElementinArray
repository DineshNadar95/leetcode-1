# sort O(nlgn)
from heapq import * 
class Solution(object):
    def findKthLargest(self, nums, k):
      
        nums.sort()
        return nums[len(nums) - k]
        
https://leetcode.com/problems/kth-largest-element-in-an-array/discuss/301338/Python-or-tm-215
根据Max Heap数据结构来解
你要第Kth大的元素，那我就Heapify一个Max Heap，然后既然是要找第K个大的元素，Max Heap顶端是最大的，
第k个大的就是从最底层向上的第k个元素，实现方法从最底下一个一个pop

Time Complexity：Heapify用了O(N)，然后一共pop了k个元素，每个元素使用logn的时间复杂，所以一共是O(n + klog(n))
#Time: O(n + klog(n)) | Space: O(n)
import heapq
class Solution(object):
    def findKthLargest(self, nums, k):
        # heap size of n
        nums = [-num for num in nums]
        heapify(nums)
        
        res = 0
        for _ in range(k):
            ele = heappop(nums)
            res = - ele
        return res
            
Time:  O(nlogk) | Space: O(K)
# if n >> k, 使用一个size k 的min heap, 遍历num, 若num > heap[0], 则pop heap[0], push num
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        
        heap = []
        for num in nums:
            if len(heap) == k:
                heappushpop(heap, num)
            else:
                heappush(heap, num)
                
        return heap[0]
        
# quick select O(n) time average, worst O(n^2)
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        if not nums:
            return -1
        return self.quick_select(nums, 0, len(nums) - 1, len(nums) + 1 - k)

    def quick_select(self, nums, start, end, k):
        if start == end:
            return nums[start]
        
        left = start
        right = end 
        pivot = nums[(start + end) // 2]
        while left <= right:
            while left <= right and nums[left] < pivot:
                left += 1
            while left <= right and nums[right] > pivot:
                right -= 1
                
            if left <= right:
                nums[left], nums[right] = nums[right], nums[left]
                left += 1
                right -= 1
                
        if start + k - 1 <= right:
            return self.quick_select(nums, start, right, k)
        elif start + k - 1 >= left:
            return self.quick_select(nums, left, end, k - (left - start))
        else:
            return nums[right + 1]
        
