# time O(N)
# space O(1)

# dp[i]: how may ways we can reach i
# iterate each dial 0 to n - 1

# f(1, n) = f(6, n-1) + f(8, n-1).
#  dp[start] = f(start, n), and update it for each n from 1, 2, ..., N.
#  f(0, N) + f(1, N) + ... + f(9, N) = sum(dp)


class Solution(object):
    def knightDialer(self, N):
       
        MOD = 10**9 + 7
        moves = [[4,6],[6,8],[7,9],[4,8],[3,9,0],[],
                     [1,7,0],[2,6],[1,3],[2,4]]

        dp = [1] * 10
        for hops in range(N-1):
            dp2 = [0] * 10
            for node, count in enumerate(dp):
                for nei in moves[node]:
                    dp2[nei] += count
                    dp2[nei] %= MOD
            dp = dp2
        return sum(dp) % MOD
        
