# dp
# minimum and with overlapping subproblems -> suitable for DP
# time O(n * sqrt(n))
# space O(n)

# dp[i], min ways to make up i
# dp[i] = min(dp[i], dp[i - j * j] + 1) (j ** 2 <= i)


class Solution(object):
    def numSquares(self, n):
        
        dp = [n] * (n + 1)
        dp[0] = 0
        dp[1] = 1
        
        for i in range(2, n + 1):
            j = 1
            while j ** 2 <= i:
                dp[i] = min(dp[i], dp[i - j * j] + 1)
                j += 1
        return dp[-1]
