# sol 1 : time O(N) per move, space O(n^2)
构造n*n的网格, 每次下棋时, 检查棋子所在的行/ 列 /对角线是否连成一条线. 检查的条件是计算行/ 列 /对角线棋子标记的个数是否等于n.

class TicTacToe(object):

    def __init__(self, n):
        self.length = n
        self.grid = [['0'] * n for i in range(n)]
        

    def move(self, row, col, player):
        if player == 1:
            mark = 1
        else:
            mark = -1
        self.grid[row][col] = mark
        
        sum_row = sum(self.grid[row][c] == mark for c in range(self.length))
        sum_col = sum(self.grid[r][col] == mark for r in range(self.length))
        sum_diag = sum(self.grid[i][i] == mark for i in range(self.length))
        sum_anti_diag = sum(self.grid[j][self.length - 1 - j] == mark for j in range(self.length))
        if sum_row == self.length or sum_col == self.length or sum_diag == self.length or sum_anti_diag == self.length:
            return player
        else:
            return 0
        
 # sol2 time O(1) per move, O(n) space 
 不用创建网格, 只需记录每个行、列和两条对角线的下棋的值。
  对于每个下棋，对于玩家1的下棋赋值是1，对于玩家2的下棋赋值是-1。
  然后我们只需要检查当前所在的行/ 列/ 对角线的下棋的值是否等于n或-n。
  
 class TicTacToe(object):

    def __init__(self, n):
        self.row = [0] * n
        self.col = [0] * n
        self.diag = 0
        self.anti_diag = 0
        self.n = n
        

    def move(self, row, col, player):
        if player == 1:
            offset = 1
        else:
            offset = -1
            
        self.row[row] += offset
        self.col[col] += offset
        if row == col:
            self.diag += offset
        if row + col == self.n - 1:
            self.anti_diag += offset
        
        if self.n in [self.row[row], self.col[col], self.diag, self.anti_diag]:
            return 1
        if -self.n in [self.row[row], self.col[col], self.diag, self.anti_diag]:
            return 2
        return 0
       


 
 
