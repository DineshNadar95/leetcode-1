# sol 1 : time O(N) per move, space O(n^2)
构造n*n的网格, 每次下棋时, 检查棋子所在的行/ 列 /对角线是否连成一条线. 检查的条件是计算行/ 列 /对角线棋子标记的个数是否等于n.

class TicTacToe(object):

    def __init__(self, n):
        
        self.n = n
        self.board = [[0] * n for _ in range(n)]
        

    def move(self, row, col, player):
        
        
        if player == 1:
            offset = 'X'
        else:
            offset = 'O'
            
        self.board[row][col] = offset
        # check row 
        sum_row = sum(self.board[row][i] == offset for i in range(self.n))
        sum_col = sum(self.board[i][col] == offset  for i in range(self.n))
        sum_diag = sum(self.board[i][i] == offset for i in range(self.n))
        sum_anti = sum(self.board[i][self.n - 1 - i] == offset  for i in range(self.n))
        
        if self.n in [sum_row, sum_col, sum_diag, sum_anti]:
            return player
        return 0


        
 # sol2 time O(1) per move, O(n) space 
 不用创建网格, 只需记录每个行、列和两条对角线的下棋的值。
  对于每个下棋，对于玩家1的下棋赋值是1，对于玩家2的下棋赋值是-1。
  然后我们只需要检查当前所在的行/ 列/ 对角线的下棋的值是否等于n或-n。
  
 class TicTacToe(object):

    def __init__(self, n):
        self.row = [0] * n
        self.col = [0] * n
        self.diag = 0
        self.anti_diag = 0
        self.n = n
        

    def move(self, row, col, player):
        if player == 1:
            offset = 1
        else:
            offset = -1
            
        self.row[row] += offset
        self.col[col] += offset
        if row == col:
            self.diag += offset
        if row + col == self.n - 1:
            self.anti_diag += offset
        
        if self.n in [self.row[row], self.col[col], self.diag, self.anti_diag]:
            return 1
        if -self.n in [self.row[row], self.col[col], self.diag, self.anti_diag]:
            return 2
        return 0
       
class Solution(object):
    def __init__(self):
        self.board = [[0] * 3 for _ in range(3)]
        self.n = 3
        
    def move(self):
        row, col, player = [int(x) for x in input('Please enter the row, col, player:').split(',')]
        
        offset = 0
        if player == 1:
            offset = 1
        else:
            offset = 2
            
        self.board[row][col] = offset
        print(self.board)
        # check win
        
        check_row = sum(self.board[row][c] == offset for c in range(self.n))
        check_col = sum(self.board[r][col] == offset for r in range(self.n))
        check_diag = sum(self.board[i][i] == offset for i in range(self.n))
        check_anti = sum(self.board[j][self.n - 1 - j] == offset for j in range(self.n))
        
        if self.n in [check_row, check_col, check_diag, check_anti]:
            return player
        else:
            return 0
        
        
test = Solution()
print(test.move())
print(test.move())
print(test.move())

      
            
        
                     
            

 
 
