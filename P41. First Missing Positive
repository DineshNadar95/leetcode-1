# brute force hash set
# time O(n)
# space O(n)



# Index as a hash key.
num[i] = i + 1
fisrt num[i] != i + 1, return i + 1

# data preparation: we put 0 < ele <= n to the index: ele - 1
# travse: first ele which index + 1 != ele 
# 例如数组nums = [3,4,-1,1]，调整位置后的结果为：[1,-1,3,4] # [-1, 4, 3, 1], [-1, 1, 3, 4], [1, -1, 3, 4]
# 除第二个数字外，其余数字均满足nums[i] = i + 1，因此返回2

# time O(n)
# space O(1)

class Solution(object):
    def firstMissingPositive(self, nums):
        
        
        # nums[i] = i + 1
        if not nums:
            return 1
        
        n = len(nums)
        for i in range(n):
            while 1 <= nums[i] <= n and nums[i] != i + 1 and nums[i] != nums[nums[i] - 1]:
                tmp1 = nums[nums[i] - 1]
                tmp2 = nums[i] 
                nums[nums[i] - 1] = tmp2
                nums[i] = tmp1
                
        for i in range(n):
            if i + 1 != nums[i]:
                return i + 1
        return n + 1
                
                   
                   
class Solution(object):
    def firstMissingPositive(self, nums):
       
        if not nums:
            return 1
        
        n = len(nums)
        for i in range(n):
            while 0 < nums[i] <= n and nums[i] != i + 1 and nums[i] != nums[nums[i] - 1]:
                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]
            
        for i in range(n):
            if nums[i] != i + 1:
                return i + 1
        return n + 1
