# two pointers + hashset (sliding window)

# hashsest the unique char in the sliding window

# sliding windown keep the subtring with unique char

变量start和end分别记录子串的起点和终点
从左向右逐字符遍历原始字符串，每次将end + 1
字典countDict存储当前子串中各字符的个数
当新增字符c的计数 > 1时，向右移动起点start，并将s[start]在字典中的计数 - 1，直到countDict[c]不大于1为止
更新最大长度

# time O(n), space O(k) (k is the length of set)

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        count = collections.defaultdict(int)
        res = 0
        j = 0
        for i in range(len(s)):
            while j < len(s) and s[j] not in count:
                count[s[j]] = 1
                j += 1
            # exit when j == len(s) or s[j] in count (i, j - 1)
            res = max(res, j - i)
            if count[s[i]] == 1:
                count[s[i]] -= 1
                del count[s[i]]
            else:
                count[s[i]] -= 1
        return res
