# freq(A) = k
# task分成k-1组， 每组n + 1个
# (k - 1) * (n + 1) + p (和A有相同frequency任务的数量，如果没有则为1）
# coner case : (n + 1) < num of tasks (dont' need idle)
# A B C D E A  n = 2, 3 * 1 + 1 = 4, but acutally we need 6

# time O(n)
# space O(1) <= 26

  class Solution(object):
    def leastInterval(self, tasks, n):
        """
        :type tasks: List[str]
        :type n: int
        :rtype: int
        """
        count = collections.Counter(tasks)
        counts = count.values()
        max_count = max(counts)
        res = (max_count - 1) * (n + 1)
        for count in counts:
            if count == max_count:
                res += 1
        return max(len(tasks), res)
        
# in order, task << cooldown

import collections
def taskSchedule(tasks, n):
    
    # key: task, value:least time that the task done
    task_time = collections.defaultdict(int)
    cur_time = 1
    for task in tasks:
        if task not in task_time or task_time[task] + n < cur_time:
            task_time[task] = cur_time
            cur_time += 1
        else:
            cur_time = task_time[task] + n + 1
            task_time[task] = cur_time
            cur_time += 1
    return cur_time - 1
            
tasks = [1, 2, 3, 1, 1, 2]
# 1 2 3 - 1 - - - 1 2
n = 3
print(taskSchedule(tasks, n))


## in order, task >> cooldown

# 我也遇到这个task scheduler的问题了 我的followup是用queue，queue里就存last cooldown range的job，
每次遇到job遍历一遍这个queue就好了，因为cooldown是常数 所以还算是O(N)

记录一个cooldown内做过的任务的时间，然后动态删除已经过期的任务。这样时间复杂度可能会增加到O(kn)，cooldown长度*task个数，但空间复杂度能够降低。
# follow up 2, keep original order and task >> n
# queue keep the tasks or idle in the last cooldown 
# the size of queue is n
import collections
def leastInterval2(tasks, n):
    # len(queue) 'n + 1'
    queue = collections.deque([])
    cur_time = 1
    for task in tasks:
        if task not in queue:
            queue.append(task)
            cur_time += 1
            if len(queue) > n + 1:
                queue.popleft()
                
        else:
            # we can only add the task if len(queue) == n + 1 and first ele is task
            while len(queue) < n + 1:
                queue.append('-')
                cur_time += 1
            
            while queue.popleft() != task:
                queue.append('-')
                cur_time += 1
            
            queue.append(task)
            cur_time += 1
    return cur_time - 1
            

print(leastInterval2([1, 2, 3, 1, 1, 2], 3))
                
tasks = [1, 2, 3, 1, 1, 2]
# 1 2 3 - 1 - - - 1 2
n = 3
print(taskSchedule(tasks, n))
