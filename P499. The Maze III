# æœ‰bug

class Solution(object):
    def findShortestWay(self, maze, ball, hole):
        """
        :type maze: List[List[int]]
        :type ball: List[int]
        :type hole: List[int]
        :rtype: str
        """
        dic = collections.defaultdict(list) # key: reached point, value : (step, dir) # {(0, 1) : (3, '121')}
        queue = collections.deque([(ball[0], ball[1], 0, '')])
        dirs = {(-1, 0) : 'u', (1, 0):'d', (0, -1):'l', (0, 1):'r'}
        
        while queue:
            x, y, step, cur_dir = queue.popleft()
            
            for dx, dy in dirs.keys():
                i = x
                j = y
                d = step
                dir_ = cur_dir
                
                while 0 <= i + dx < len(maze) and 0 <= j + dy < len(maze[0]) and maze[i + dx][j + dy] == 0 and (i + dx != hole[0] and j + dy != hole[1]):
                    
                    i += dx
                    j += dy
                    d += 1
                    
                if 0 <= i + dx < len(maze) and 0 <= j + dy < len(maze[0]) and (i + dx == hole[0] and j + dy == hole[1]):
                    if (i, j) not in dic or dic[(i, j)][0] > d:
                        dic[(i, j)] = [(d,dir_ + dirs[(dx, dy)])]
                    elif (i, j) in dic and dic[(i, j)][0] == d:
                        dic[(i, j)].append((d,dir_ + dirs[(dx, dy)]))
                        
                else:
                    if (i, j) not in dic or dic[(i, j)][0] > d:
                        dic[(i, j)] = [(d,dir_ + dirs[(dx, dy)])]
                        queue.append((i, j, d, dir_ + dirs[(dx, dy)]))
                        
                    elif (i, j) in dic and dic[(i, j)][0] == d:
                        dic[(i, j)].append((d,dir_ + dirs[(dx, dy)]))
                        queue.append((i, j, d, dir_ + dirs[(dx, dy)]))

            print(dic)
            if not (hole[0], hole[1]) in dic:
                return 'impossible'
            
            vals = dic[(hole[0], hole[1])] # [(5, ''), (5, )]
            vals.sort(key = lambda x: (x[0], x[1]))
            return vals[0][1]
        
            
            
            
                                                                                                            
                
                
                
