# bfs
# node: 1. # 1. if run into hole, break, # 2. if cur_s == step, didn't go through this direction

class Solution(object):
    def findShortestWay(self, maze, ball, hole):
        
        visited = collections.defaultdict(list)
        q = collections.deque([(ball[0], ball[1], 0, '')])
        
        while q:
            x, y, step, path = q.popleft()
            for dx, dy, dir_ in [(-1, 0, 'u'), (1, 0, 'd'), (0, -1, 'l'), (0, 1, 'r')]:
                new_x = x
                new_y = y
                cur_s = step
                cur_p = path + dir_
                while 0 <= new_x + dx < len(maze) and 0 <= new_y + dy < len(maze[0]) and maze[new_x + dx][new_y + dy] == 0:
                    new_x += dx
                    new_y += dy
                    cur_s += 1
                    # 1. if run into hole, break
                    if [new_x, new_y] == hole:
                        break
                
                # 2. if cur_s == step, didn't go through this direction
                if cur_s == step:
                    continue
                    
                if (new_x, new_y) not in visited or [cur_s, cur_p] < visited[(new_x, new_y)]:
                    visited[(new_x, new_y)] = [cur_s, cur_p]
                    if [new_x, new_y] != hole:
                        q.append([new_x, new_y, cur_s, cur_p])
                    else:
                        print(visited[(hole[0], hole[1])])

        if (hole[0], hole[1]) not in visited:
            return 'impossible'
                        
        return visited[(hole[0], hole[1])][1]
