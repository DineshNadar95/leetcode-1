# time O(n)
# space O(1)

# find count and connect tail with head
# find the new_head and new_tail

class Solution(object):
    def rotateRight(self, head, k):

        if not head:
            return None
        
        count = 1
        cur = head
        while cur.next:
            count += 1
            cur = cur.next
        
        cur.next = head
        
        # find new_h, new_t
        
        k = k % count
        
        # new_t, count - k
        # new_h, count - k + 1
        
        p = head
        for _ in range(count - k - 1):
            p = p.next
        
        new_t = p
        new_h = p.next
        new_t.next = None
        return new_h
    
            
        
        
