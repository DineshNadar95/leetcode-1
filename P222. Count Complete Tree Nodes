# dfs recursion
# linear time 
# time O(n)
# space O(h)

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def countNodes(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        return 1 + self.countNodes(root.left) + self.countNodes(root.right)
        
 # get height + recursion
 # time O(lgn * lgn)
 # space O(lgn)
 
 class Solution(object):
    def countNodes(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        
        left_height = self.get_height(root.left)
        right_height = self.get_height(root.right)
        if left_height == right_height:
            # left subtree is full, right is complete
            return 2 ** left_height + self.countNodes(root.right)
        else:
            # left is complete, right is full
            return self.countNodes(root.left) + 2 ** right_height
        
    def get_height(self, node):
        if not node:
            return 0
        return 1 + self.get_height(node.left)
      
    
