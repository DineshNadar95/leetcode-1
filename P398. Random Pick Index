# brute force 
# time O(n)
# space O(n)
class Solution(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.nums = nums
        

    def pick(self, target):
        """
        :type target: int
        :rtype: int
        """
        idx = []
        for i, ele in enumerate(self.nums):
            if ele == target:
                idx.append(i)
                
        return idx[random.randint(0, len(idx) - 1)]
        


# 水塘抽样
# time O(n)
# space O(1)
遇到1，概率为1，保留第一个数。
遇到2，概率为1/2，这个时候，1和2各1/2的概率被保留
遇到3，3被保留的概率为1/3，(之前剩下的数假设1被保留)，2/3的概率 1 被保留，(此时1被保留的总概率为 2/3 * 1/2 = 1/3)
遇到4，4被保留的概率为1/4，(之前剩下的数假设1被保留)，3/4的概率 1 被保留，(此时1被保留的总概率为 3/4 * 2/3 * 1/2 = 1/4)

class Solution(object):

    def __init__(self, nums):
        self.nums = nums
            
    def pick(self, target):
        
        res = None
        count = 0
        for i, num in enumerate(self.nums):
            if num == target:
                count += 1
                chance = random.randint(1, count)
                if chance == count:
                    res = i
        return res
