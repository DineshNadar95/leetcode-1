# brute force
# O(n^3)
# O(1)


# sort
# time O(nlgn)
# space O(1)

class Solution(object):
    def maximumProduct(self, nums):
        
        nums.sort()
        return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])
        
# find min1, min2, max1, max2, max3
# time O(n)
# space O(1)
class Solution(object):
    def maximumProduct(self, nums):
       
        
        # need to find, min1, min2, max1, max2, max3
        min1, min2 = sys.maxsize, sys.maxsize
        max1, max2, max3 = -sys.maxsize, -sys.maxsize, -sys.maxsize
        
        for num in nums:
            if num < min1:
                min2 = min1
                min1 = num
            elif num < min2:
                min2 = num
                
            if num > max1:
                max3 = max2
                max2 = max1
                max1 = num
            elif num > max2:
                max3 = max2
                max2 = num
            elif num > max3:
                max3 = num
                
            #print(num, max1, max2, max3, min1, min2)
        return max(min1 * min2 * max1, max1 * max2 * max3)
                
