
# (7 -> 2 -> 4 -> 3) 
#      (5 -> 6 -> 4)
# 7 - > 8 -> 0 -> 7

# idea: 遍历两个链表，找出两个num，相加，再构建新的linked list
# time O(m + n)
# space O(m + n)


class Solution(object):
    def addTwoNumbers(self, l1, l2):
        
        s1 = 0
        s2 = 0
        
        while l1:
            s1 = s1 * 10 + l1.val
            l1 = l1.next
            
        while l2:
            s2 = s2 * 10 + l2.val
            l2 = l2.next 
            
        res = s1 + s2
        
        dummy = ListNode(0)
        cur = dummy
        
        for d in list(str(res)):
            cur.next = ListNode(int(d))
            cur = cur.next 
        return dummy.next
            
            
 # sol2: stack
 # time O(m + n)
 # space O(m + n)
 class Solution(object):
    def addTwoNumbers(self, l1, l2):

        if not l1 and not l2:
            return None
        
        if not l1 or not l2:
            return l1 or l2
        
        s1 = []
        s2 = []
        while l1:
            s1.append(l1.val)
            l1 = l1.next
            
        while l2:
            s2.append(l2.val)
            l2 = l2.next
            
        tail = ListNode(0)
        cur = tail
        carry = 0
        while s1 or s2 or carry:
            if s1:
                carry += s1.pop()
            if s2:
                carry += s2.pop()
            
            cur.val = carry % 10
            carry = carry // 10
            if s1 or s2 or carry:
                new_node = ListNode(0) # 注意，生成的点在head部位
                new_node.next = cur
                cur = new_node
        return cur
