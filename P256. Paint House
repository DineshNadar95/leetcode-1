# dp
# 设定状态: f[i][j] 表示第i所房屋涂色为j时, 前i所房屋的最小花费
# 状态转移方程: f[i][j] = min{f[i-1][k]} +costs[i][j] (k != j)
# 边界: f[0][i] = costs[0][i]
# 答案: min{f[n-1][i]} i = 0, 1, 2
# 优化: 由于状态 f[i][j] 只受 f[i-1][k] 的影响, 所以可以使用滚动数组把空间复杂度降低至 O(1)

class Solution(object):
    def minCost(self, costs):
       
        r = 0
        b = 0
        g = 0
        
        for red, blue, green in costs:
            new_r = red + min(b, g)
            new_g = green + min(r, b)
            new_b = blue + min(r, g)
            
            r, b, g = new_r, new_b, new_g
            
        return min(r, b, g)
