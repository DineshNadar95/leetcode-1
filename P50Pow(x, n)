 # sol1: recursion
 # time O(lgn)
 # space O(lgn)
 
 class Solution(object):
    def myPow(self, x, n):
        
        
        if n == 0:
            return 1
        
        if n < 0:
            x = 1.0 / x 
            n = -n

        if n % 2:
            return x * self.myPow(x * x, (n-1)//2)
        else:
            return self.myPow(x * x, n // 2)
 
 
 # iteration
 # expand the x by x^2, n-> n //2
 # n is odd, res * tmp
 # until n == 0
 
 # time lgn
 # space O(1)
 
class Solution:
    def myPow(self, x: float, n: int) -> float:
        if x == 1 or n == 0:
            return 1
        if n < 0:
            x = 1 / x
            n = -n
            
        result = 1
        temp = x
        while n != 0:
            if n % 2 == 1:
                result = result * temp
            temp = temp * temp
            n = n // 2
        return  result



 
