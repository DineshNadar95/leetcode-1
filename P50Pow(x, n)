# recursion
# time lg(n)
# space O(lgn)
class Solution(object):
    def myPow(self, x, n):
        """
        :type x: float
        :type n: int
        :rtype: float
        """
        if n == 0:
            return 1
        if n < 0:
            x = 1 / x
            n = -n 
            return self.myPow(x, n)
        if n % 2:
            return x * self.myPow(x, n - 1)
        return self.myPow(x * x, n // 2)
 
 # time lgn
 # space O(1)
class Solution:
    def myPow(self, x: float, n: int) -> float:
        if x == 1 or n == 0:
            return 1
        if n < 0:
            x = 1 / x
            n = -n
            
        result = 1
        temp = x
        while n != 0:
            if n % 2 == 1:
                result = result * temp
            temp = temp * temp
            n = n // 2
        return  result
