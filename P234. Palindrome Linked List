# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        
        if not head or not head.next:
            return True
        
        fast = slow = head
        while fast.next and fast.next.next:
            fast = fast.next.next
            slow = slow.next
    
        slow = slow.next
        slow = self.reverse(slow)
        
        while slow:
            if head.val != slow.val:
                return False
            head = head.next
            slow = slow.next
        return True
    
    def reverse(self, head):
        current = head
        pre = None
        nxt = None
        while current:
            nxt = current.next
            current.next = pre
            pre = current
            current = nxt
        return pre
        
            
        
        
        
        
        
        
