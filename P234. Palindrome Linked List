# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        
        if not head or not head.next:
            return True
        
        # when fast, slow initialize to 0, first n//2 or n//2 + 1
        fast = head
        slow = head
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
            
        second = slow.next
        slow.next = None
        second = self.reverse(second)
        
        while second:
            if second.val != head.val:
                return False
            second = second.next
            head = head.next
        return True
        
        
    
    def reverse(self, head):
        cur = head
        prev = None
        nxt = None
        
        while cur:
            nxt = cur.next 
            cur.next = prev
            prev = cur
            cur = nxt
        return prev
