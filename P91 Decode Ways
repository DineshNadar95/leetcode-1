# DP
# 设定状态: f[i] 表示字符串前i - 1位有多少种解码方案
# f[i]=f[i-1]|S[i-1]对应一个字母+f[i-2]|S[i-2]S[i-1]对应一个字母
l  s[i-2]和s[i-1] 两个字符是10----26之间但不包括10和20这两个数时，有两种编码方式，比如23------>[“BC”，“W”]，所以dp[i] = dp[i-1]+dp[i-2]
l  s[i-2]和s[i-1] 两个字符10或20这两个数时，有一种编码方式，比如10------>[“J”], 所以dp[i] = dp[i-2]
l  s[i-2]和s[i-1] 两个字符不在上述两种范围时，编码方式为零，比如27，比如01，所以dp[i] = dp[i-1]

# time O(n)
# space O(n)

class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s or s[0] == '0':
            return 0
        
        dp = [0] * (len(s) + 1)
        dp[0] = 1
        dp[1] = 1
        
        
        for i in range(2, len(dp)):
            # One step jump
            if 0 < int(s[i - 1:i]):
                dp[i] = dp[i - 1]
            # Two step jump
            if 10 <= int(s[i - 2:i]) <= 26:
                dp[i] += dp[i - 2]
        return dp[-1]
        
  # follow up 1:recursion time O(2^n), n = len(string)
  class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        
        if not s or s[0] == '0':
            return 0
        
        return self.dfs(0, s)
    
    def dfs(self, index, s):
        if index == len(s):
            return 1
        if s[index] == '0':
            return 0
        
        res = self.dfs(index + 1, s)
        if index < len(s) - 1 and (s[index] == '1' or s[index] == '2' and s[index + 1] < '7'):
            res += self.dfs(index + 2, s)
        return res
test = Solution()

# reucursion + memo
class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        
        n = len(s)
        mem = {i : -1 for i in range(n + 1)}
        mem[n] = 1
        if not s:
            return 0
        
        return self.num(0, s, mem)
    
    def num(self, i, s, mem):
        if mem[i] > -1:
            return mem[i]
        if s[i] == '0':
            mem[i] = 0
            return 0
        res = self.num(i + 1, s, mem)
        if (i < len(s) - 1) and (s[i] == '1' or s[i] == '2' and s[i + 1] < '7'):
            res += self.num(i + 2, s, mem)
        mem[i] = res
        return res
  
  # follow up 2:print out all strings
 dic = {1:'A', 2: "B", 3 : "C", 4 : "D", 5:"E" ,6:  "F", 7: "G", 8:"H", 
      9:"I", 10: "J", 11:"K", 12:"L",  13 :"M", 14: "N", 15: "O",
     16: "P", 17: "Q",  18: "R", 19: "S", 20: "T",21: "U", 22: "V", 
     23: "W", 24: "X",25: "Y", 26: "Z" }

def decode(s):
    def is_valid(s):
        if s[0] == '0':
            return False
        if 0 < int(s) <= 26:
            return True
    
    def dfs(s, index, cur, res):
        
        if index == len(s):
            res.append(cur)
            return res

        if is_valid(s[index : index + 1]):
            num = int(s[index : index + 1])
            dfs(s, index + 1, cur + dic[num], res)
        if index + 1 < len(s) and is_valid(s[index : index + 2]):
            num2 = int(s[index : index + 2])
            dfs(s, index + 2, cur + dic[num2], res)
            
    result = []
    dfs(s, 0, '', result)
    return result
print(decode('12'))
 
  # follow up 3: add * 
  
  
