# DP
# 设定状态: f[i] 表示字符串前i位有多少种解码方案
# f[i]=f[i-1]|S[i-1]对应一个字母+f[i-2]|S[i-2]S[i-1]对应一个字母
# time O(n)
# space O(n)

class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s or s[0] == '0':
            return 0
        
        dp = [0] * (len(s) + 1)
        dp[0] = 1
        for i in range(1, len(dp)):
            if s[i - 1] != '0':
                dp[i] = dp[i - 1]
            if i != 1 and '09' < s[i-2:i] <'27':
                dp[i] += dp[i-2]
        return dp[-1]
            
