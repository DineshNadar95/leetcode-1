# DP
# 设定状态: dp[i] 表示字符串前i位有多少种解码方案,the count of decode ways of first i characters.
# one step jump dp[i] = dp[i - 1] if s[i - 1] > 0
# two step jump dp[i] += dp[i - 1] if 10 <= int(s[i - 2:i]) <= 26

# time O(n)
# space O(n)

class Solution(object):
    def numDecodings(self, s):
        
        if not s or s[0] == '0':
            return 0
        
        dp = [0] * (len(s) + 1)
        dp[0] = 1
        dp[1] = 1
        
        for i in range(2, len(dp)):
            if s[i - 1] != '0':
                dp[i] = dp[i - 1]
            if 10 <= int(s[i - 2 : i]) <= 26:
                dp[i] += dp[i - 2]
        return dp[-1]
        
        
  # follow up 1:recursion time O(2^n), n = len(string)
  class Solution(object):
   
    def numDecodings(self, s):
        if not s or s[0] == '0':
            return 0
        return self.dfs(s, 0)
    
    def dfs(self, s, index):
        # base case 1: empty '' decode ways 1
        if index == len(s):
            return 1
        # base 2: '01' -> 0
        if s[index] == '0':
            return 0
        
        # recursion case 1: '123' : a + decode(23) or 12 + decode(3)
        # recursion case 2:  '273' : b + decode(73)
        res = 0
        res = self.dfs(s, index + 1)
        if index + 1 < len(s) and 10 <= int(s[index : index + 2]) <= 26:
            res += self.dfs(s, index + 2)
        return res
    
        
test = Solution()

# reucursion + memo
# time O(n)
# space O(n)
class Solution(object):
    def numDecodings(self, s):
        if not s or s[0] == 0:
            return 0
        memo = {}
        memo[len(s)] = 1
        self.dfs(s, 0, memo)
        return memo[0]
    
    def dfs(self, s, index, memo):
        if index in memo:
            return memo[index]
        if s[index] == '0':
            memo[index] = 0
            return memo[index]
        
        res = self.dfs(s, index + 1, memo)
        if index + 1 < len(s) and 10 <= int(s[index : index + 2]) <= 26:
            res += self.dfs(s, index + 2, memo)
        memo[index] = res
        return memo[index]
  
  # follow up 2:print out all strings
class Solution(object):
    def numDecodings(self, s):
        self.dic = {1:'A', 2: "B", 3 : "C", 4 : "D", 5:"E" ,6:  "F", 7: "G",     8:"H", 
      9:"I", 10: "J", 11:"K", 12:"L",  13 :"M", 14: "N", 15: "O",
     16: "P", 17: "Q",  18: "R", 19: "S", 20: "T",21: "U", 22: "V", 
     23: "W", 24: "X",25: "Y", 26: "Z" }
     
        if not s or s[0] == '0':
            return []
        
        self.res = []
        self.dfs(s, 0, '')
        return self.res
    def dfs(self, s, index, cur_path):
        if index == len(s):
            self.res.append(cur_path)
            return 
        
        if int(s[index:index + 1]) > 0:
            self.dfs(s, index + 1, cur_path + self.dic[int(s[index:index + 1])])
        
        if index + 1 < len(s) and 10 <= int(s[index:index + 2]) <= 26:
            self.dfs(s, index + 2, cur_path + self.dic[int(s[index:index + 2])])
            
                                              
            
test = Solution()
print(test.decode('121'))
    
print(decode('12'))
 
  # follow up 3: add * 
  但是input String可以包含 *
    比如 1*2，可以有  102 （1），112 （3）， 122（3），132(2), 142(2), 152(2), 162(2), 172(2) 182(2) 192 (2)  一共 21种解法。
    返回多少解, 刚开始想还挺简单的，写起来并不简单，比如 1**1 ，两个*都要判断。。
    
    

  
  
