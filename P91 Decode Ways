# DP
# 设定状态: dp[i] 表示字符串前i - 1位有多少种解码方案
# one step jump dp[i] = dp[i - 1] if s[i - 1] > 0
# two step jump dp[i] += dp[i - 1] if 10 <= int(s[i - 2:i]) <= 26

# time O(n)
# space O(n)

class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s or s[0] == '0':
            return 0
        
        dp = [0] * (len(s) + 1)
        dp[0] = 1
        dp[1] = 1
      
        for i in range(2, len(dp)):
            # One step jump
            if 0 < int(s[i - 1:i]):
                dp[i] = dp[i - 1]
            # Two step jump
            if 10 <= int(s[i - 2:i]) <= 26:
                dp[i] += dp[i - 2]
        return dp[-1]
        
  # follow up 1:recursion time O(2^n), n = len(string)
  class Solution(object):
    def numDecodings(self, s):
        
        if not s or s[0] == '0':
            return 0
        return self.dfs(0, s)
    
    def dfs(self, index, s):
        if index == len(s):
            return 1
        if s[index] == '0':
            return 0
        
        res = self.dfs(index + 1, s)
        if index < len(s) - 1 and (s[index] == '1' or s[index] == '2' and s[index + 1] < '7'):
            res += self.dfs(index + 2, s)
        return res
        
test = Solution()

# reucursion + memo
class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        
        n = len(s)
        mem = {i : -1 for i in range(n + 1)}
        mem[n] = 1
        if not s:
            return 0
        
        return self.num(0, s, mem)
    
    def num(self, i, s, mem):
        if mem[i] > -1:
            return mem[i]
        if s[i] == '0':
            mem[i] = 0
            return 0
        res = self.num(i + 1, s, mem)
        if (i < len(s) - 1) and (s[i] == '1' or s[i] == '2' and s[i + 1] < '7'):
            res += self.num(i + 2, s, mem)
        mem[i] = res
        return res
  
  # follow up 2:print out all strings
 dic = {1:'A', 2: "B", 3 : "C", 4 : "D", 5:"E" ,6:  "F", 7: "G", 8:"H", 
      9:"I", 10: "J", 11:"K", 12:"L",  13 :"M", 14: "N", 15: "O",
     16: "P", 17: "Q",  18: "R", 19: "S", 20: "T",21: "U", 22: "V", 
     23: "W", 24: "X",25: "Y", 26: "Z" }

class Solution(object):
    
    def decode(self, s):
        if not s or  s[0] == '0':
            return ''
        
        self.res = []
        self.dfs(s, 0, '')
        return self.res
    
    def dfs(self, s, i, cur_path):
        
        if i == len(s):
            self.res.append(cur_path)
            return 
        
        if self.is_valid(s[i:i + 1]):
            self.dfs(s, i + 1, cur_path + dic[int(s[i:i + 1])])
            
        if i + 1 < len(s) and self.is_valid(s[i:i + 2]):
            self.dfs(s, i + 2, cur_path + dic[int(s[i:i + 2])])
    
    
    def is_valid(self, s):
        if s[0] == '0':
            return False
        if 0 < int(s) <= 26:
            return True
            
test = Solution()
print(test.decode('121'))
    
print(decode('12'))
 
  # follow up 3: add * 
  但是input String可以包含 *
    比如 1*2，可以有  102 （1），112 （3）， 122（3），132(2), 142(2), 152(2), 162(2), 172(2) 182(2) 192 (2)  一共 21种解法。
    返回多少解, 刚开始想还挺简单的，写起来并不简单，比如 1**1 ，两个*都要判断。。
    
    

  
  
