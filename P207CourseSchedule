# topological sort by BFS
# time O(numCourses + len(prerequisities)
# space O(numCourses)
# 思路 queue.pop（0）说明完成了该course, count += 1, 要所有先修课都修完（indegree = 0)时该课程才会上完


class Solution:
    def canFinish(self, numCourses, prerequisities):
        indegree = [0] * numCourses
        neighbors = {course:[] for course in range(numCourses)}
        
        
        for i, j in prerequisities:
            indegree[i] += 1
            neighbors[j].append(i)
        
        count = 0
        queue = []
        for course in range(numCourses):
            if indegree[course] == 0:
                queue.append(course)
        
        while len(queue) > 0:
            course = queue.pop(0)
            count += 1
            for neighbor in neighbors[course]:
                indegree[neighbor] -= 1
                if indegree[neighbor] == 0:
                    queue.append(neighbor)
                    
        return count == numCourses             
        
        
        
    
        
        
        
        
        
