# backtracking
# time  O(4^mn)
# space O(mn)

class Solution(object):
    def uniquePathsIII(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        total = 0
        self.res = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 0:
                    total += 1
                elif grid[i][j] == 1:
                    start = (i, j)
        self.dfs(grid, start[0], start[1], total)
        return self.res
                
                
    def dfs(self, grid, x, y, total):
        for dx, dy in [(1,0), (-1, 0), (0, 1), (0, -1)]:
            new_x = x + dx
            new_y = y + dy
            if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and grid[new_x][new_y] in [0, 2]:
                if grid[new_x][new_y] == 0:
                    total -= 1
                    grid[new_x][new_y] = -1
                    self.dfs(grid, new_x, new_y, total)
                    grid[new_x][new_y] = 0
                    total += 1
                elif total == 0:
                    self.res += 1
                    return 
                
    
            
