# backtracking
# time  O(4^mn)
# space O(mn)

node: 1, backtracking after the four directions; 2. total = 1 (start) + 0

class Solution(object):
    def uniquePathsIII(self, grid):
        
        self.total = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 0:
                    self.total += 1
                elif grid[i][j] == 1:
                    start = [i, j]
        self.total += 1
        self.res = 0
        self.dfs(grid, start[0], start[1])
        return self.res
    
    
    def dfs(self, grid, i, j):
        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or not grid[i][j] in [1, 0, 2]:
            return
        
        if grid[i][j] == 2:
            if self.total == 0:
                self.res += 1
            return 
        
        self.total -= 1
        grid[i][j] = -1
        for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:
            x = i + dx
            y = j + dy
            self.dfs(grid, x, y)
            
        # backtracking
        grid[i][j] = 0
        self.total += 1


            
        
                
                
                
            
        
                
           
