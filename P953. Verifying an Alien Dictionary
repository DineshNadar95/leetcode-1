直接依次进行判断即可。拿出两个相邻的字符串pre和after，然后判断他们的相同位置的每个字符的顺序，
如果pre的某个位置小于after，说明这两个字符串是有序的，那么继续判断；
如果Pre的某个位置大于after，说明不有序，直接返回False。
这两部判断完成之后没结束，我们还要继续判断Example 3的情况，所以，需要判断pre的长度是不是大于after，并且after等于pre的前部分。

在遍历完所有的字符串之后都没有返回False，说明是有序的，那么返回True.

# hashmap
# time O(n*len(S)), 字典的长度 + 单词的个数 * 单词的长度
# space O(n) dic:字典的字符数 or O(1)

class Solution(object):
    def isAlienSorted(self, words, order):
        
        dic = {}
        for i, char in enumerate(order):
            dic[char] = i
            
        for i in range(len(words) - 1):
            w1 = words[i]
            w2 = words[i + 1]
            length = min(len(w1), len(w2))
            for j in range(length):
                if w1[j] != w2[j]:
                    if dic[w1[j]] > dic[w2[j]]:
                        return False
                    else:
                        break
            if w1[:length] == w2[:length] and len(w1) > len(w2):
                return False
        return True
                
                    
            
