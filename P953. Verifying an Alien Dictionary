直接依次进行判断即可。拿出两个相邻的字符串pre和after，然后判断他们的相同位置的每个字符的顺序，
如果pre的某个位置小于after，说明这两个字符串是有序的，那么继续判断；
如果Pre的某个位置大于after，说明不有序，直接返回False。
这两部判断完成之后没结束，我们还要继续判断Example 3的情况，所以，需要判断pre的长度是不是大于after，并且after等于pre的前部分。

在遍历完所有的字符串之后都没有返回False，说明是有序的，那么返回True.

# hashmap
# time O(n*len(S)), 字典的长度 + 单词的个数 * 单词的长度
# space O(n) dic:字典的字符数

class Solution:
    def isAlienSorted(self, words: List[str], order: str) -> bool:
        
        dic = {}
        for index, value in enumerate(order):
            dic[value] = index
            
        for i in range(len(words) - 1):
            
            word1 = words[i]
            word2 = words[i + 1]
            
            len_first = len(word1)
            len_second = len(word2)
            # case for example 3
            if len_first > len_second and word1[:len_second] == word2:
                return False
            for i in range(min(len_first, len_second)):
                if word1[i] == word2[i]:
                    continue
                elif dic[word1[i]] > dic[word2[i]]:
                        return False
                break
        return True
