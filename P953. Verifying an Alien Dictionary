直接依次进行判断即可。拿出两个相邻的字符串pre和after，然后判断他们的相同位置的每个字符的顺序，
如果pre的某个位置小于after，说明这两个字符串是有序的，那么继续判断；
如果Pre的某个位置大于after，说明不有序，直接返回False。
这两部判断完成之后没结束，我们还要继续判断Example 3的情况，所以，需要判断pre的长度是不是大于after，并且after等于pre的前部分。

在遍历完所有的字符串之后都没有返回False，说明是有序的，那么返回True.

# hashmap
# time O(n*len(S))
# space O(n)

class Solution(object):
    def isAlienSorted(self, words, order):
        """
        :type words: List[str]
        :type order: str
        :rtype: bool
        """
        order_map = {c:i for i,c in enumerate(order)}
        for i in range(len(words) - 1):
            word1 = words[i]
            word2 = words[i + 1]
            for k in range(min(len(word1), len(word2))):
                if word1[k] != word2[k]:
                    if order_map[word1[k]] > order_map[word2[k]]:
                        return False
                    break
                else:
                    if len(word1) > len(word2):
                        return False
        return True
                        
