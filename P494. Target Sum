# recursion  TLE
# time O(2^n)
# space O(n)
class Solution(object):
    def findTargetSumWays(self, nums, S):
       
        self.res = 0
        self.dfs(nums, S, 0, 0)
        return self.res
        
    def dfs(self, nums, target, index, cur_sum):
        if index == len(nums):
            if cur_sum == target:
                self.res += 1
            return 
                
        self.dfs(nums, target, index + 1, cur_sum + nums[index])
        self.dfs(nums, target, index + 1, cur_sum - nums[index])
        
        
# sol2 
# time O(l * n) l: range of sum, n:nums sizeï¼Œsince the memo array of size l*n has been filled just once. 
# space O(n) the depth of recursion
# dic key (index, sum) value: counts from this index, cur_sum to target
        
recursion + memo
class Solution(object):
    def findTargetSumWays(self, nums, S):
  
        # dfs + memo
        # memo key index, cur_sum , value;  count
        if not nums:
            return 0
        
        return self.dfs(nums, S, 0, 0, {})
    
    def dfs(self, nums, target, cur_sum, index, memo):
        if (index, cur_sum) not in memo:
            res = 0
            
            if index == len(nums):
                if cur_sum == target:
                    res = 1
                return res
            else:
                res = self.dfs(nums, target, cur_sum + nums[index], index + 1, memo) + self.dfs(nums, target, cur_sum - nums[index], index + 1, memo)
                
            memo[(index,  cur_sum)] = res
        return memo[(index,  cur_sum)] 
           

# dp
DP: time O(n * S)
space O(s)
count key:sum, value:count

class Solution(object):
    def findTargetSumWays(self, nums, S):
        # key:sum, value:count
        dp = collections.defaultdict(int)
        
        dp[0] = 1
        for num in nums:
            dp2 = collections.defaultdict(int)
            for sum_, c in dp.items():
                dp2[sum_ + num] += c
                dp2[sum_ - num] += c
                
            dp = dp2
        return dp[S]
