# python dictionary + double linked list + dummy node + dummy tail
# dictionary, key : key, value : linked list node(k,v)
# 新节点从尾部加入
# 老节点从头部移走
# insert, delete for linked list is O(1), but access and search time is O(n)

# add and remove 都是针对linked list的操作
# 操作时先操作linked list node,在操作dict

class ListNode(object):
    def __init__(self, key, val):
        self.key = key
        self.val = val
        self.prev = None
        self.next = None
        
class LRUCache(object):

    def __init__(self, capacity):
        self.capa = capacity
        self.dic = {}
        self.dummy_head = ListNode(0, 0)
        self.dummy_tail = ListNode(0, 0)
        self.dummy_head.next = self.dummy_tail
        self.dummy_tail.prev = self.dummy_head 
        

    def get(self, key):
        
        if key not in self.dic:
            return -1
        node = self.dic[key]
        self.delete(node)
        self.insert(node)
        return node.val
        

    def put(self, key, value):
        if key in self.dic:
            self.delete(self.dic[key])
            del self.dic[key]
            
        if len(self.dic) == self.capa:
            head = self.dummy_head.next
            self.delete(head)
            del self.dic[head.key]
        
        new_node = ListNode(key, value)
        self.insert(new_node)
        self.dic[key] = new_node
        
        
    def delete(self, node):
        prev = node.prev
        next = node.next
        prev.next = next
        next.prev = prev
        
    def insert(self, node): # insert from the tail
        tail = self.dummy_tail.prev
        tail.next = node
        node.prev = tail
        node.next = self.dummy_tail
        self.dummy_tail.prev = node
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
