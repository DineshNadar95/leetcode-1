# python dictionary + double linked list + dummy node + dummy tail
# dictionary, key : key, value : linked list node(k,v)
# 新节点从尾部加入
# 老节点从头部移走
# insert, delete for linked list is O(1), but access and search time is O(n)

# add and remove 都是针对linked list的操作
# 操作时先操作linked list node,在操作dict

class ListNode(object):
    def __init__(self, key, val):
        self.key = key
        self.val = val
        self.prev = None
        self.next = None
        
        
class LRUCache(object):

    def __init__(self, capacity):
        
        self.capa = capacity
        self.dic = {}
        self.dummy_head = ListNode(0, 0)
        self.dummy_tail = ListNode(0, 0)
        self.dummy_head.next = self.dummy_tail
        self.dummy_tail.prev = self.dummy_head

    def get(self, key):
       
        if key not in self.dic:
            return -1
        node = self.dic[key]
        self.delete(node)
        self.insert(node)
        return node.val

    def put(self, key, value):
        
        if key in self.dic:
            self.delete(self.dic[key])
            del self.dic[key]
            #self.dic.remove(key)
            
        else:
            if self.capa == len(self.dic):  # remove from head
                head = self.dummy_head.next
                del self.dic[head.key]
                self.delete(head)
        
        # insert key, value
        node = ListNode(key, value)
        self.insert(node)
        self.dic[key] = node
        
        
        
    def delete(self, node):
        prev = node.prev
        nxt = node.next
        prev.next = nxt
        nxt.prev = prev
        
    def insert(self, node):
        tail = self.dummy_tail.prev
        tail.next = node
        node.prev = tail
        node.next  = self.dummy_tail
        self.dummy_tail.prev = node
        
