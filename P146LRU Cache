# python dictionary + double linked list + dummy node + dummy tail
# dictionary, key : key, value : linked list node(k,v)
# 新节点从尾部加入
# 老节点从头部移走
# insert, delete for linked list is O(1), but access and search time is O(n)

# add and remove 都是针对linked list的操作
# 操作时先操作linked list node,在操作dict

class Node(object):
    def __init__(self, key, val):
        self.prev = None
        self.next = None
        self.key = key
        self.val = val
        
class LRUCache:

    def __init__(self, capacity: int):
        # key: key, value:node
        self.dic = {}
        self.capacity = capacity
        self.dummy_head = Node(0, 0)
        self.dummy_tail = Node(0, 0)
        self.dummy_head.next = self.dummy_tail 
        self.dummy_tail.prev = self.dummy_head
        

    def get(self, key: int) -> int:
        # remove the node and add it from the tail to linked list
        if key in self.dic:
            node = self.dic[key]
            self.remove(node)
            self.add(node)
            return node.val
        else:
            return -1
        
        

    def put(self, key: int, value: int) -> None:
        # first check if the ky in dic
        # else: check the capacity, remove head
        # insert 
        if key in self.dic:
            self.remove(self.dic[key])
        else:
            if self.capacity == len(self.dic):
                head = self.dummy_head.next
                self.remove(head)
                del self.dic[head.key]
        node = Node(key, value)
        self.add(node)
        self.dic[key] = node
            
            
    def remove(self, node):
        node_prev = node.prev
        node_next = node.next
        node_prev.next = node.next
        node.next.prev = node_prev
        
    def add(self, node):
        tail = self.dummy_tail.prev
        tail.next = node
        node.prev = tail
        node.next = self.dummy_tail
        self.dummy_tail.prev = node
        
        
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
