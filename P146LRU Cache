# python dictionary + double linked list + dummy node + dummy tail
# dictionary, key : key, value : node(k,v)
# 新节点从尾部加入
# 老节点从头部移走
# insert, delete for linked list is O(1), but access and search time is O(n)

class Node():
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.prev = None
        self.next = None
    
class LRUCache():
    def __init__(self, capacity):
        self.capacity = capacity
        self.dic = {}
        self.dummy_head = Node(0, 0)
        self.dummy_tail = Node(0, 0)
        self.dummy_head.next = self.dummy_tail
        self.dummy_tail.prev = self.dummy_head
        
    def put(self, key, value):
        if key in self.dic:
            self.remove(self.dic[key])
        elif len(self.dic) == self.capacity:
            head = self.dummy_head.next
            self.remove(head)
            del self.dic[head.key]
        node = Node(key, value)   
        self.add(node)
        self.dic[key] = node  
        
     
    def get(self, key):
        if key in self.dic:
            node = self.dic[key]
            self.remove(node)
            self.add(node)
            return node.value
        return -1
            
    def add(self, node):
        tail = self.dummy_tail.prev
        tail.next = node
        node.prev = tail
        node.next = self.dummy_tail
        self.dummy_tail.prev = node
        
    def remove(self, node):
        prev_node = node.prev
        next_node = node.next
        prev_node.next = next_node
        next_node.prev = prev_node
            
    
        
            
    
# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
