# binar search
# time O(lg(x/精度))
# space O(1)

# 核心： find first integer in range(0, x) m, m ** 2 <= x
# l ** 2 <= x, (l + 1) ** 2 > x

class Solution:
    def mySqrt(self, x: int) -> int:
        if x == 0:
            return 0
        
        i = 1
        j = x
        
        while i + 1 < j:
            m = (i + j) // 2 # find m in range(1, x) last m ** 2 <= x
            if m ** 2 > x:
                j = m - 1
            elif m ** 2 < x:
                i = m
            else:
                return m
            
        if j ** 2 > x:
            return i
        return j
            
        
        
 # follow up 一直二分直到 |number^2 - x| <= 1e-10
 class Solution:
    
    """
    @param x: a double
    @return: the square root of x
    """
    def sqrt(self, x):
        
        if x >= 1:
            start, end = 1, x
        else:
            start, end = x, 1
        
        while end - start > 1e-10:
            mid = (start + end) / 2
            if mid * mid < x:
                start = mid
            else:
                end = mid
                
        return start
        
