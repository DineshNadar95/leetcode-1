# time O(n)
# space O(1)


1) 先找到从后向前数，第一个降序的位置，
2) 如果i合法，从n-1开始寻找第一个大于i的数，并交换二者位置
3) 把此位置后面的翻转

首先说一下这题怎么想到的。有如下的一个数组
1　　2　　7　　4　　3　　1
下一个排列为：
1　　3　　1　　2　　4　　7
观察可以发现，再给出的数组中，2之后的数字都是降序排列的，我们把2后面第一个比2大的数字放到最前面，然后让3后面的数字升序排列。

class Solution(object):
    def nextPermutation(self, nums):
        
        i = len(nums) - 1
        while i > 0 and nums[i] <= nums[i - 1]:
            i -= 1
            
        i -= 1 
        if i >= 0: # if i == -1, nums [3, 2, 1], 不需要exchange
            j = len(nums) - 1
            while j > i and nums[j] <= nums[i]:
                j -= 1
            nums[i], nums[j] = nums[j], nums[i]
            
        self.reverse(nums, i + 1)
        return nums
    
    def reverse(self, nums, i):
        
        j = len(nums) - 1
        
        while i < j:
            nums[i], nums[j] = nums[j], nums[i]
            i += 1
            j -= 1
        
        
            
class Solution(object):
    def nextPermutation(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        i = len(nums) - 2
        while i >= 0 and nums[i] >= nums[i + 1]:
            i -= 1
            
        self.swap(nums, i)
        self.reverse(nums, i)
        
        # reverse from i + 1
        
    def swap(self, nums, i):
        # swap with first num > nums[i]
        if i >= 0:
            j = len(nums) - 1
            while j > i and nums[j] <= nums[i]:
                j -= 1
                
            if j > i:
                nums[i], nums[j] = nums[j], nums[i]
                
    def reverse(self, nums, i):
        l = i + 1
        r = len(nums) - 1
        while l < r:
            nums[l], nums[r] = nums[r], nums[l]
            l += 1 
            r -= 1
                     
            
 # follow up 
 # previous permutation
 # 7 4  5 3 8
# 7 4  3 8 5

# step 1 find first ele decreaing i (from n - 2) 5
# step 2 exchanged the value of i with first ele smaller than i (from n - 1)
# step 3 reverse the ele after i 

def previousPermutation(nums):
    n = len(nums)
    i = n - 2
    while i >= 0 and nums[i] <= nums[i + 1]:
        i -= 1
        
    j = n - 1
    if i >= 0 and nums[j] >= nums[i]:
        j -= 1
        
    nums[i], nums[j] = nums[j], nums[i]
    
    left = i + 1
    right = n - 1
    while left < right:
        nums[left], nums[right] = nums[right], nums[left]
        left += 1
        right -= 1
        
    return nums

nums = [7, 4,  5 ,3 ,8]
print(previousPermutation(nums))


