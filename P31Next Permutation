# time O(n)
# space O(1)

# case 1, 升后降，1 3 7 5 4
# case 2, 3 2 1

1) 先找到从后向前数，第一个降序的位置，
2) 如果i合法，从n-1开始寻找第一个大于i的数，并交换二者位置
3) 把此位置后面的翻转


class Solution(object):
    def nextPermutation(self, nums):
        i = len(nums) - 1
        while i > 0 and nums[i] <= nums[i - 1]:
            i -= 1
        i -= 1
        
        if i >= 0:
            self.exchange(nums, i)
        self.reverse(nums, i + 1)
        return nums
    
    def exchange(self, nums, i):
        j = len(nums) - 1
        while j > i and nums[j] <= nums[i]:
            j -= 1
        nums[i], nums[j] = nums[j], nums[i]
        
    def reverse(self, nums, i):
        j = len(nums) - 1
        while i < j:
            nums[i], nums[j] = nums[j], nums[i]
            i += 1
            j -= 1
            

 # follow up 
 # previous permutation
 # 7 4  5 3 8
# 7 4  3 8 5

# step 1 find first ele decreaing i (from n - 2) 5
# step 2 exchanged the value of i with first ele smaller than i (from n - 1)
# step 3 reverse the ele after i 

def previousPermutation(nums):
    n = len(nums)
    i = n - 2
    while i >= 0 and nums[i] <= nums[i + 1]:
        i -= 1
        
    j = n - 1
    if i >= 0 and nums[j] >= nums[i]:
        j -= 1
        
    nums[i], nums[j] = nums[j], nums[i]
    
    left = i + 1
    right = n - 1
    while left < right:
        nums[left], nums[right] = nums[right], nums[left]
        left += 1
        right -= 1
        
    return nums

nums = [7, 4,  5 ,3 ,8]
print(previousPermutation(nums))


