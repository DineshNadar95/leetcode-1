# sort then enumerate 
# 注意take care of dupliation values [0, 1, 1, 2] 
# time O(nlgn)
# space O(1)

class Solution(object):
    def longestConsecutive(self, nums):
        
        if not nums:
            return 0
        
        if len(nums) == 1:
            return 1
        
        nums.sort()
        res = 1
        cur_len = 1
        for i in range(1, len(nums)):
            if i > 0 and nums[i] == nums[i - 1]: # take care of dupliation values
                continue
            if nums[i] - nums[i - 1] == 1:
                cur_len += 1
                res = max(res, cur_len)
            else:
                cur_len = 1
        return res
# time O(n)
# space O(n)
# hashset
哈希表，遍历每个数，如果num - 1 在当前set里面，不检查，否则起点设为当前num, while 循环在整个运行过程中只会被迭代 n 次

class Solution(object):
    def longestConsecutive(self, nums):
        
        if not nums:
            return 0
        
        nums_set = set(nums)
        res = 0
        cur = 0
        cur_len = 0
        
        for num in nums_set:
            if num - 1 in nums_set:
                continue 
            
            cur = num
            cur_len = 1
            
            while cur + 1 in nums_set:
                cur = cur + 1
                cur_len += 1
                
            res = max(res, cur_len)
                
        return res
            
            
