# hashtable + most_common()
# O(nlng)
class Solution(object):
    def frequencySort(self, s):
        
        res = ''
        c = collections.Counter(s)
        for char, freq in c.most_common():
            res = res + char * freq
        return res
        
        


# heap
# time O(nlgn)
# space O(n)

from heapq import * 
class Solution(object):
    def frequencySort(self, s):
        
        res = ''
        counter = collections.Counter(s)
        heap = []
        for char, c in counter.items():
            heappush(heap, (-c, char))
        
        while heap:
            c, char = heappop(heap)
            res = res + char * (-c)
            
        return res
        

# bucket sort by max frequency
# time O(n)
# space O(n)

from heapq import * 

class Solution(object):
    def frequencySort(self, s):
        if not s:
            return ''
        
        counter = collections.Counter(s)
        max_freq = max(counter.values())
        bucket = [[] for _ in range(max_freq + 1)]
        for char, c in counter.items():
            bucket[c].append(char)
            
        res = ''
        for i in range(len(bucket) - 1, 0, -1):
            for char in bucket[i]:
                res = res + char * i
        return res
