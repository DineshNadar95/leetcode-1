# hashtable + binary search
# space O(n)
# set time O(1)
# get time O(lgn)

# node:
hash tale: key = key, value = [(t, val), ....]
首先判断key in dic, then bisec for t

# k, v, t

# get : 
# input k, t0
# output val (with t <= t0) return last t

# dic, key: key, value: (val, t)


class TimeMap:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.dic = collections.defaultdict(list)
        

    def set(self, key: str, value: str, timestamp: int) -> None:
        self.dic[key].append([value, timestamp])
        
        

    def get(self, key: str, timestamp: int) -> str:
        if key not in self.dic:
            return ''
        vals = self.dic[key]
        i = 0
        j = len(vals) - 1
        
        while i + 1 < j:
            m = (i + j) // 2
            if vals[m][1] > timestamp:
                j = m - 1
            else:
                i = m
                
        if vals[j][1] <= timestamp:
            return vals[j][0]
        if vals[i][1] <= timestamp:
            return vals[i][0]
        return ''
        
