# hashtable + binary search
# space O(n)
# set time O(1)
# get time O(lgn)

# node:
hash tale: key = key, value = [(t, val), ....]
首先判断key in dic, then bisec for t

class TimeMap(object):

    def __init__(self):
       
        self.dic = collections.defaultdict(list)
        
    def set(self, key, value, timestamp):
        
        self.dic[key].append([timestamp, value])
        
    def get(self, key, timestamp):
        
        # < < <= > > 
        if key in self.dic:
            vals = self.dic[key]
            l = 0
            r = len(vals) - 1
            while l + 1 < r:
                m = (l + r) // 2
                if vals[m][0] <= timestamp:
                    l = m
                else:
                    r = m - 1
                    
            if vals[r][0] <= timestamp:
                return vals[r][1]
            elif vals[l][0] <= timestamp:
                return vals[l][1]
            return ''
