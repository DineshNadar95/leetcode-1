# hashtable + binary search
# space O(n)
# set time O(1)
# get time O(lgn)

# node:
hash tale: key = key, value = [(t, val), ....]
首先判断key in dic, then bisec for t

class TimeMap(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.dic = collections.defaultdict(list)
        

    def set(self, key, value, timestamp):
        """
        :type key: str
        :type value: str
        :type timestamp: int
        :rtype: None
        """
        self.dic[key].append((value, timestamp))

    def get(self, key, timestamp):
        """
        :type key: str
        :type timestamp: int
        :rtype: str
        """
        if key in self.dic:
            
            v = self.dic[key]
            # sanity check
            left = 0
            right = len(v) - 1
            
            if v[left][1] > timestamp:
                return ''
            if v[right][1] <= timestamp:
                return v[right][0]
            
            while left + 1 < right:
                mid = (left + right) // 2
                if v[mid][1] == timestamp:
                    return v[mid][0]
                if v[mid][1] < timestamp:
                    left = mid + 1
                else:
                    right = mid - 1
            
            if v[right][1] <= timestamp:
                return v[right][0]
            return v[left][0]
                    
        return ''
        
