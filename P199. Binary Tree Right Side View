# bfs
 # Traverse the tree level by level and add the last value of each level to the view
 # time O(n)
 # space O(n)

class Solution(object):
    def rightSideView(self, root):
        res = []
        
        if not root:
            return res
        
        queue = collections.deque([root])
        while queue:
            level = []
            for _ in range(len(queue)):
                node = queue.popleft()
                level.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            res.append(level[-1])
        return res


# DFS traverse the tree right-to-left, add values to the view whenever we first reach a new record depth. 
# time O(n)
# space O(h)


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        self.view = []
        self.helper(root, 0)
        return self.view
        
    def helper(self, node, depth):
        if node:
            if depth == len(self.view):
                self.view.append(node.val)
            self.helper(node.right, depth + 1)
            self.helper(node.left, depth + 1)
            
  
  
