# DFS traverse the tree right-to-left, add values to the view whenever we first reach a new record depth. 
# time O(n)
# space O(h)


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        self.view = []
        self.helper(root, 0)
        return self.view
        
    def helper(self, node, depth):
        if node:
            if depth == len(self.view):
                self.view.append(node.val)
            self.helper(node.right, depth + 1)
            self.helper(node.left, depth + 1)
            
  
  
 # Iterative, level-by-level
 # Traverse the tree level by level and add the last value of each level to the view
 # time O(n)
 # space O(n)

Traverse the tree level by level and add the last value of each level to the view. This is O(n).
  class Solution(object):
    def rightSideView(self, root):
        view = []
        if root:
            level = [root]
            while level:
                view.append(level[-1].val)
                level = [kid for node in level for kid in (node.left, node.right) if kid]
        return view
