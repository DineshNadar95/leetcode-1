# 目的，寻找sorted的half
如果该题存在重复数，只需要跳过首位重复数即可。其他操作同在无重复数的旋转数组中寻找目标值。

# [4, 4, 5, 6, 7, 0, 1, 2]
# binary search time O(lgn), worst case time complexity is O(n) 1 3 1 1 1 
# space O(1)


class Solution(object):
    def search(self, nums, target):
        
        if not nums:
            return False
        
        l = 0
        r = len(nums) - 1
        
        while l + 1 < r:
            while l + 1 < r and nums[l] == nums[l + 1]:
                l += 1
                
            while l + 1 < r and nums[r] == nums[r - 1]:
                r -= 1
                
            m = (l + r) // 2
            
            if nums[l] <= nums[m]:
                if nums[l] <= target <= nums[m]:
                    r = m
                else:
                    l = m
            else:
                if nums[m] <= target <= nums[r]:
                    l = m
                else:
                    r = m
                    
        return target in [nums[l], nums[r]]
