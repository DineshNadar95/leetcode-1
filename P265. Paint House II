# time O(nk^2)
# space O(k)

class Solution(object):
    def minCostII(self, costs):
        
        if not costs:
            return 0
        
        n = len(costs)
        k = len(costs[0])
        
        if n == 1 and k == 1:
            return costs[0][0]
        
        dp = [0 for _ in range(k)]
        for i in range(n):
            tmp = [0 for _ in range(k)]
            for j in range(k):
                cur_c = costs[i][j]
                tmp[j] = cur_c + min(dp[:j] + dp[j + 1:])
            dp = tmp
        return min(dp)
                

