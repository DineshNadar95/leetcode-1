# traverse 
# time O(m * n), space O(1)
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if not needle:
            return 0
        for i in range(len(haystack) - len(needle) + 1):
            if haystack[i] == needle[0]:
                j = 1
                while j < len(needle) and haystack[i + j] == needle[j]:
                    j += 1         
                if j == len(needle):
                    return i
            
        return -1
        
# rabin karp
# time O(m + n)

class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        base = 10 ^ 6
        if not needle:
            return 0
        
        n = len(haystack)
        m = len(needle)
        
        if not haystack or m > n:
            return -1
        
        target_hash = 0
        source_hash = 0
        power = 1
        for i in range(m):
            power = (power * 31) % base 
            target_hash = (target_hash * 31 + ord(needle[i])) % base
            source_hash = (source_hash * 31 + ord(haystack[i])) % base
        
        for j in range(n - m + 1):
            window = j
            if target_hash == source_hash and self.is_identical(needle, haystack, window, m):
                return window
             # 当window取到source最后m位, 不能再往后加string,直接返回-1
            if window + m > n - 1:
                return -1
            source_hash = (source_hash * 31 + ord(haystack[window + m])) % base
            source_hash = (source_hash - ord(haystack[window]) * power) % base
            if source_hash < 0:
                source_hash += base 
        return -1
         
    def is_identical(self, needle, source, window, m):
        return needle == source[window : window + m]
            
                
                     
                
                
                
                
        
