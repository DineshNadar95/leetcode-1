# sliding window

# Scan the array from left to right. 
# If we are at the end of a block (last elements OR it stopped alternating), 
# then we should record the length of that block as our candidate answer, 
# and set the start of the new block as the next element.

# time O(n)
# space O(1)

class Solution(object):
    def maxTurbulenceSize(self, A):
        
        i = 0
        res = 1
        for j in range(1, len(A)):
            if A[j] - A[j - 1] == 0:
                i = j
            elif j == len(A) - 1 or (A[j] - A[j - 1]) * (A[j + 1] - A[j]) >= 0:
                res = max(res, j - i + 1)
                i = j
        return res
                
