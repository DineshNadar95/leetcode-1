# 快慢指针
# time O(nlgn) # find the middle point using O(n/2) time complexity
# space O(lgn)

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
        if not head:
            return None
        if not head.next:
            return TreeNode(head.val)
        
        # find the middle node
        slow = head 
        # 注意易错点，这里fast 初始为fast.next.next
        fast = head.next.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        tmp = slow.next
        slow.next = None
        right = tmp.next
        
        # recursively build the BST for two partition
        root = TreeNode(tmp.val)
        left = self.sortedListToBST(head)
        right = self.sortedListToBST(right)
        
        # connect to BST with root
        root.left = left
        root.right = right
        return root

# sol2 用空间换时间
    # convert list to array 
   # convert array to BST
   
   # time O(n) sicne find the middle point for array is O(1)
   # spcace O(n) 
   
class Solution(object):
    
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
        # find the middle 
        
        array = []
        while head:
            array.append(head.val)
            head = head.next
            
        left = 0
        right = len(array) - 1

        return self.convert(array, left, right)
        
    def convert(self, array, left, right):
        if left > right:
            return 
        
        middle = (left + right) // 2
        root = TreeNode(array[middle])
        
        root.left = self.construct(array, left, middle - 1)
        root.right = self.construct(array, middle + 1, right)
        return root

        
 # sol3: simulate the inorder traversal, find the size first
 # make recursion calls for left half, then move head by one and make it to the root, and then call right half
 这个递归的唯一难点在于：如何能够在每次递归调用中，用O(1)时间内获得链表中部的节点？这也是此题和Convert Array to BST的最大不同之处。
在一般情况下，这点本来是做不到的，但是在这里我们可以通过递归“累积”的方式来实现。
设想，我们维护一个全局变量h，最初指向左半链表的头。我们每处理一个左链表的节点，h就向后移动一位。
这样，当我们处理完左半链表时，h正好处于左半链表尾的下一个元素，这个元素恰好是整个树的root，
所以我们才使用h.val来初始化root。之所以递归必须是中序，是因为h只有在左半链表都处理完毕后才能获得。

 # time O(n)
 # space O(lgn) 最优的解法
 # 在这个算法中，每当我们构建完二叉搜索树的左半部分时，链表中的头指针将指向根节点或中间节点（它成为根节点）。 
 # 因此，我们只需使用头指针指向的当前值作为根节点，并将指针后移一位，即 head = head.next。
 
 The invariance that we maintain in this algorithm is that whenever we are done building the left half of the BST, 
 the head pointer in the linked list will point to the root node or the middle node (which becomes the root).
 
class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
        if not head:
            return None
        if not head.next:
            return TreeNode(head.val)
        
        count = 0
        pointer = head
        while pointer:
            count += 1
            pointer = pointer.next
            
        self.head = head
        return self.construct(0, count - 1)
    
    def construct(self, left, right):
        if left > right:
            return 
            
        # call the dfs for left half
        middle = (left + right) // 2
        left = self.construct(left, middle - 1)
        
        # after we're done the left, we create the root, and connect root, left; and then move head
        node = TreeNode(self.head.val)
        node.left = left
        self.head = self.head.next
        
        # recursively call the right half
        node.right = self.construct(middle + 1, right)
        
        return node
    
        
