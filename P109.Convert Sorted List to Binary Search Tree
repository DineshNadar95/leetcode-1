# 快慢指针
# time O(nlgn) # find the middle point using O(n/2) time complexity
# space O(lgn)

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
        if not head:
            return None
        if not head.next:
            return TreeNode(head.val)
        
        # find the middle node
        slow = head 
        # 注意易错点，这里fast 初始为fast.next.next
        fast = head.next.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        tmp = slow.next
        slow.next = None
        right = tmp.next
        
        # recursively build the BST for two partition
        root = TreeNode(tmp.val)
        left = self.sortedListToBST(head)
        right = self.sortedListToBST(right)
        
        # connect to BST with root
        root.left = left
        root.right = right
        return root

# sol2 用空间换时间
    # convert list to array 
   # convert array to BST
   
   # time O(n) sicne find the middle point for array is O(1)
   # spcace O(n) 
   
class Solution(object):
    
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
        # find the middle 
        
        array = []
        while head:
            array.append(head.val)
            head = head.next
            
        left = 0
        right = len(array) - 1

        return self.convert(array, left, right)
        
    def convert(self, array, left, right):
        if left > right:
            return 
            
        middle = (left + right) // 2
        root_val = array[middle]
        root = TreeNode(root_val)
        
        # base case, when there is only one node
        if left == right:
            return root
        
        root.left  = self.convert(array, left, middle - 1)
        root.right = self.convert(array, middle + 1, right)
        return root
        
 # sol3: simulate the inorder traversal, find the size first
 # time O(n)
 # space O(lgn) 最优的解法
 
 
 
