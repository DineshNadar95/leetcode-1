# 快慢指针
# time O(n)
# space O(lgn)

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
        if not head:
            return None
        if not head.next:
            return TreeNode(head.val)
        
        # find the middle node
        slow = head 
        fast = head.next.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        tmp = slow.next
        slow.next = None
        right = tmp.next
        
        # recursively build the BST for two partition
        root = TreeNode(tmp.val)
        left = self.sortedListToBST(head)
        right = self.sortedListToBST(right)
        
        # connect to BST with root
        root.left = left
        root.right = right
        return root

# sol2 
    # convert list to array 
   # convert array to BST
   
   # time O(n) sicne find the middle point for array is O(1)
   # spcace O(n) 
   
class Solution(object):
    
    def mapListToValues(self, head):
            vals = []
            while head:
                vals.append(head.val)
                head = head.next
            return vals
  
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
            
        values = self.mapListToValues(head)

        def convertListToBST(l, r):

            # Invalid case
            if l > r:
                return None

            # Middle element forms the root.
            mid = (l + r) // 2
            node = TreeNode(values[mid])

            # Base case for when there is only one element left in the array
            if l == r:
                return node

            # Recursively form BST on the two halves
            node.left = convertListToBST(l, mid - 1)
            node.right = convertListToBST(mid + 1, r)
            return node
            
        return convertListToBST(0, len(values) - 1)
            
        
        
