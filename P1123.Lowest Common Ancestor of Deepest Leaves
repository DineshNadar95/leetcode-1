# recursion
time O(n), space O(h)

# the input of the recursion is node
# the output of the recursion function is height of cur node and lca of current leaves

class Solution(object):
    def lcaDeepestLeaves(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        if not root:
            return None
        
        return self.dfs(root)[1]
    
    def dfs(self, node):
        # return height, lca
        
        if not node:
            return 0, None
        
        l_h, l_lca = self.dfs(node.left)
        r_h, r_lca = self.dfs(node.right)
        
        # if height of right subtree is larger, lca is in right subtree, height + 1
        if l_h < r_h:
            return r_h + 1, r_lca
        # if height of left subtree is larger, lca is in left subtree, height + 1
        elif l_h > r_h:
            return l_h + 1, l_lca
        # if height of left subtree  == height of right subtree, lca is the node, height + 1
        else:
            return l_h + 1, node
        
        
